<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Yt's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://ytlvy.com//"/>
  <updated>2015-06-15T12:05:17.000Z</updated>
  <id>http://ytlvy.com//</id>
  
  <author>
    <name><![CDATA[Yt]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[ios gcd]]></title>
    <link href="http://ytlvy.com/2015/06/15/ios-gcd/"/>
    <id>http://ytlvy.com/2015/06/15/ios-gcd/</id>
    <published>2015-06-15T12:05:01.000Z</published>
    <updated>2015-06-15T12:05:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="GCD">GCD</h2><h3 id="befor_GCD">befor GCD</h3><h4 id="object_method">object method</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="typename">void</span>) <span class="string">performSelectorInBackground:</span> <span class="string">withObject:</span></span><br><span class="line">- (<span class="typename">void</span>) <span class="string">performSelectorOnMainThread:</span> <span class="string">withObject:</span> <span class="string">waitUntilDone:</span></span><br></pre></td></tr></table></figure>
<h3 id="多线程面临的问题">多线程面临的问题</h3><ol>
<li>race condition</li>
<li>dead lock</li>
<li>too much threads consumes two much memory</li>
</ol>
<h4 id="多线程的意义">多线程的意义</h4><p>高交互性， 界面编程中，将耗时的操作放入到其他线程执行，避免影响到主线程界面响应</p>
<h3 id="GCD_基础">GCD 基础</h3><h4 id="Dispatch_Queue_派发队列">Dispatch Queue 派发队列</h4><ol>
<li>serial dispath queue  顺序派发队列</li>
<li>concurrent dispath queue  并发派发队列</li>
</ol>
<p>和浏览器对同一域名可发起的同时连接数限制一样，可最多同时执行的线程数，也是由系统来决定的</p>
<h4 id="创建队列">创建队列</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispath_queue_t mySerialDispatchQueue = dispatch_queue_create<span class="list">(<span class="string">"com.example.gcd.MySerialDispatchQueue"</span>, NULL)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_queue_t myConcurrentDispathQueue = dispatch_queue_create<span class="list">(<span class="string">"com.ytlvy.gcd.MyConcurrentDispatchQueue"</span>, DISPATCH_QUEUE_CONCURRENT)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">myConcurrentQueue</span>, ^&#123;</span><br><span class="line">  //do staff</span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">mySerialDispatchQueue</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_retain<span class="list">(<span class="keyword">myConcurrentDispatchQueue</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>当并发队列添加任务后，队列被release，是没有问题的。因为block在添加到队列时，会触发dispatch_retain操作来持有队列，在block结束时，会自动触发dispatch_release来释放队列</p>
<h4 id="Main_Dispatch_Queue_/_Global_Dispatch_Queue">Main Dispatch Queue / Global Dispatch Queue</h4><p>可以采用系统方法来获取派发队列。<br> NAME                              | Type        | Description<br> ————————————          | ——————| ————————<br> Main dispatch queue               | Serial      | Executed on the main thread<br> Global dispatch queue(Hight)      | Concurrent  | Priority High<br> Global dispatch queue(default)    | Concurrent  | Priority Normal<br> Global dispatch queue(low)        | Concurrent  | Priority Low<br> Global dispatch queue(background) | Concurrent  | Priority Background</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mainDispatchQueue = dispatch_get_main_queue<span class="list">()</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueHight = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_HIGH</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueDefault =</span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueLow = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_LOW</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueBackground = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>dispatch_retain dispatch_release对系统分配的队列不生效。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">dispatch_async</span>(<span class="function">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>) ^&#123;</span><br><span class="line">   <span class="comment">//do staff</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">dispatch_async</span>(dispatch_get_main_queue, ^&#123;</span><br><span class="line">    <span class="comment">// update gui</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Controlling_Dispatch_Queue">Controlling Dispatch Queue</h4><p><code>dispatch_set_target_queue</code>设置队列优先级</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mySerialDispatchQueue = </span><br><span class="line">    dispatch_create<span class="list">(<span class="string">"com.ytlvy.gcd.MySerialDispatchQueue"</span>, NULL)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueBackGround = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_set_target_queue<span class="list">(<span class="keyword">mySerialDispatchQueue</span>, globalDispatchQueueBackground)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="dispatch_after">dispatch_after</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_time_t</span> time = <span class="keyword">dispatch_t</span>ime(DISPATCH_TIME_NOW, <span class="number">3u</span>ll * NSEC_PER_SEC);</span><br><span class="line"></span><br><span class="line">dispatch_after(time, dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>“ull” is for “unsigned long long type”</p>
<p>毫秒<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_time_t</span> time = <span class="keyword">dispatch_t</span>ime(DISPATCH_TIME_NOW, <span class="number">1u</span>ll * NSEC_PER_MSEC);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t getDispatchTimeByDate(NSDate *<span class="type">date</span>)&#123;</span><br><span class="line">  NSTimeInterval interval;</span><br><span class="line">  double <span class="keyword">second</span>, subsecond;</span><br><span class="line">  struct timespec, <span class="property">time</span>;</span><br><span class="line">  dispatch_time_t milestone;</span><br><span class="line"></span><br><span class="line">  interval = [<span class="type">date</span> timeIntervalSince1970];</span><br><span class="line">  subsecond = modf(interval, &amp;<span class="keyword">second</span>);</span><br><span class="line">  <span class="property">time</span>.tv_sec = <span class="keyword">second</span>;</span><br><span class="line">  <span class="property">time</span>.tv_nsec = subsecond * NSEC_PER_SEC;</span><br><span class="line">  milestone = dispatch_wailltime(&amp;<span class="property">time</span>, <span class="number">0</span>);</span><br><span class="line"><span class="command"></span><br><span class="line">  return</span> milstone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，dispatch第二个参数，应该使用<code>ull</code> 或者 <code>double</code>类型<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SDate <span class="built_in">*</span>start = [NSDate date];</span><br><span class="line">dispatch_time_t popTime = dispatch_time<span class="params">(DISPATCH_TIME_NOW, <span class="number">4</span> * NSEC_PER_SEC)</span>;</span><br><span class="line"></span><br><span class="line">dispatch_after<span class="params">(popTime, dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">  NSLog<span class="params">(@<span class="string">"seconds: %f"</span>, [start timeIntervalSinceNow])</span>;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"><span class="comment">// output: seconds: -0.0001</span></span><br><span class="line"></span><br><span class="line">NSDate <span class="built_in">*</span>start = [NSDate date];</span><br><span class="line">dispatch_time_t popTime = dispatch_time<span class="params">(DISPATCH_TIME_NOW, <span class="number">4.0</span> * NSEC_PER_SEC)</span>;</span><br><span class="line"></span><br><span class="line">dispatch_after<span class="params">(popTime, dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">  NSLog<span class="params">(@<span class="string">"seconds: %f"</span>, [start timeIntervalSinceNow])</span>;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"><span class="comment">// output: seconds: -4.0001</span></span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch_group">dispatch group</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_group_t group = dispatch_group_create<span class="list">()</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123; NSLog<span class="list">(@<span class="string">"blk0"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123; NSLog<span class="list">(@<span class="string">"blk1"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123; NSLog<span class="list">(@<span class="string">"blk2"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line"></span><br><span class="line">dispatch_group_notify<span class="list">(<span class="keyword">group</span>, dispatch_get_main_queue<span class="list">()</span>, ^&#123; NSLog<span class="list">(@<span class="string">"done"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">group</span>)</span><span class="comment">;</span></span></span></span></span></span><br></pre></td></tr></table></figure>
<p>等所有任务结束，使用派发队列组。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_group_t group = dispatch_group_create<span class="list">()</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123;NSLog<span class="list">(@<span class="string">"blk0"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123;NSLog<span class="list">(@<span class="string">"blk1"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123;NSLog<span class="list">(@<span class="string">"blk2"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line"></span><br><span class="line">dispatch_group_wait<span class="list">(<span class="keyword">group</span>, DISPATCH_TIME_FOREVER)</span><span class="comment">;</span></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">group</span>)</span><span class="comment">;</span></span></span></span></span><br></pre></td></tr></table></figure></p>
<p>等待1秒<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t time = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="number">1</span>ull * <span class="type">NSEC_PER_SEC</span>);</span><br><span class="line">long <span class="literal">result</span> = dispatch_group_wait(group, time);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">result</span> == <span class="number">0</span>)&#123;</span><br><span class="line">  //finished</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  //some task still running</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>检测任务是否完成<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long <span class="literal">result</span> = dispatch_group_wait(group, <span class="type">DISPATCH_TIME_NOW</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="dispatch_barrier_async">dispatch_barrier_async</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_queue_create<span class="list">(</span><br><span class="line">      <span class="string">"com.example.gcd.ForBarrier"</span>, DISPATCH_QUEUE_CONCURRENT)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk0_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk1_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk2_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk3_for_reading)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_barrier_async<span class="list">(<span class="keyword">queue</span>, blk_for_writing)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk4_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk5_for_reading)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">queue</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="dispatch_sync">dispatch_sync</h3><p>dead lock<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_main_queue<span class="list">()</span><span class="comment">;</span></span><br><span class="line">dispatch_sync<span class="list">(<span class="keyword">queue</span>, ^&#123;&#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//dead lock</span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line">  dispatch_sync<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//serial queue  dead lock</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create<span class="list">(<span class="string">"com.example"</span>, NULL)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line">  dispatch_sync<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch_apply">dispatch_apply</h4><p>与 <code>dispatch_sync</code> 和<code>dispatch_group</code>相关，可以多次添加同一任务, 并等待任务结束</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue =</span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_apply<span class="list">(<span class="number">10</span>, queue, ^<span class="list">(<span class="keyword">size_t</span> index)</span>&#123;</span><br><span class="line">  NSLog<span class="list">(<span class="string">"%zu"</span>, index)</span><span class="comment">;</span></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br><span class="line">NSLog<span class="list">(@<span class="string">"done"</span>)</span><span class="comment">; //last output</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">  dispatch_apply<span class="list">([array count], queue, ^<span class="list">(<span class="keyword">size_t</span> idx)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">  //all tasks by dispatch_apply are finished</span><br><span class="line"></span><br><span class="line">  dispatch_async<span class="list">(<span class="keyword">dispatch_get_main_queue</span><span class="list">()</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="dispatch_suspend_&amp;&amp;_dispatch_resume">dispatch_suspend &amp;&amp; dispatch_resume</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch_suspend<span class="list">(<span class="keyword">queue</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_resume<span class="list">(<span class="keyword">queue</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="dispatch_semaphore">dispatch semaphore</h4><p>NSMutableArray 是非线程安全的，当多个线程同时更改操作会导致程序崩溃.semaphore是一个更小粒度的多线程控制方法, 通过内部计数来控制线程的准入方式.<br>semaphore拥有一个内部计数器来模拟标志, 当计数器为0, 线程等待; 非0时,继续执行.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create<span class="list">(<span class="number">1</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_remaphore_wait<span class="list">(<span class="keyword">semaphore</span>, DISPATCH_TIME_FOREVER)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t time = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="number">1</span>ull * <span class="type">NSEC_PER_SEC</span>);</span><br><span class="line">long <span class="literal">result</span> = dispatch_semaphore_wait(semaphore, time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">result</span> == <span class="number">0</span>)&#123;</span><br><span class="line">  //<span class="keyword">do</span> staff, execute a task</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  //wait </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当dispatch_semaphore_wait 返回0时, 可以安全执行一个有并发控制的任务. 当任务执行完毕, 需要调用dispatch_semaphore_signal 增加计数</p>
<p>Adding data to NSMutableArray<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = </span><br><span class="line">    dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">NSMutableArray *arr = [NSMutableArray <span class="keyword">new</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">  dispatch_async(<span class="built_in">queue</span>, ^&#123;</span><br><span class="line">      dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span><br><span class="line">       *  因为semaphore的计数大于1. 在disaptch_semaphore_wait返回后,</span><br><span class="line">       *  计数器被设置为0. 因为只有一个线程可以获准进入,所以此时更新</span><br><span class="line">       *  NSMutableArray是安全的.</span><br><span class="line">       */</span></span><br><span class="line">      [arr addObject:@(i)];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span><br><span class="line">       * 需要并发控制的任务结束后, 需要调用signal来增加semaphore的计数器,</span><br><span class="line">       * 以便其他等待的线程可以通过dispatch_semaphore_wait, 获得执行权限</span><br><span class="line">       */</span></span><br><span class="line">      dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_release(semaphore);</span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch_once">dispatch_once</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> pred;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;pred, ^&#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Dispatch_I/O">Dispatch I/O</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t pipe_q =</span><br><span class="line">    dispatch_queue_create<span class="params">(<span class="string">"PipeQ"</span>, NULL)</span>;</span><br><span class="line">pipe_channel = dispatch_io_create<span class="params">(DISPATCH_IO_STREAM, fd, pipe_q, ^<span class="params">(int err)</span>&#123;</span><br><span class="line">  close<span class="params">(fd)</span>;</span><br><span class="line">  &#125;)</span>;</span><br><span class="line"></span><br><span class="line">  out_fd = fdpair[<span class="number">1</span>];</span><br><span class="line">  dispatch_io_set_low_water<span class="params">(pipe_channel, SIZE_MAX)</span>;</span><br><span class="line">  dispatch_io_read<span class="params">(pipe_channel, <span class="number">0</span>, SIZE_MAX, pipe_q, </span><br><span class="line">    ^<span class="params">(bool done, dispatch_data_t pipedata, int error)</span>&#123;</span><br><span class="line">      if<span class="params">(error == <span class="number">0</span>)</span>&#123;</span><br><span class="line">          size_t len = dispatch_data_get_size<span class="params">(pipedata)</span>;</span><br><span class="line">          if<span class="params">(len &gt; <span class="number">0</span>)</span>&#123;</span><br><span class="line">            const char *bytes = NULL;</span><br><span class="line">            char *encode;</span><br><span class="line"></span><br><span class="line">            dispatch_data_t md = dispatch_data_create_map<span class="params">(</span><br><span class="line">              pipedata, <span class="params">(const void **)</span>&amp;bytes, &amp;len)</span>;</span><br><span class="line">            encoded = asl_core_encode_buffer<span class="params">(bytes, len)</span>;</span><br><span class="line">            asl_set<span class="params">(<span class="params">(aslmsg)</span>merged_msg, ASL_KEY_AUX_DATA, encode)</span>;</span><br><span class="line">            free<span class="params">(encoded)</span>;</span><br><span class="line"></span><br><span class="line">            _asl_send_message<span class="params">(NULL, merged_msg, -<span class="number">1</span>, NULL)</span>;</span><br><span class="line">            asl_msg_release<span class="params">(merged_msg)</span>;</span><br><span class="line">            dispatch_release<span class="params">(md)</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if<span class="params">(done)</span>&#123;</span><br><span class="line">        dispatch_semaphore_signal<span class="params">(semaphore)</span>;</span><br><span class="line">        dispatch_relase<span class="params">(pipe_channel)</span>;</span><br><span class="line">        dispatch_release<span class="params">(pipe_q)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[你对本页的描述]]>
    
    </summary>
    
      <category term="GCD" scheme="http://ytlvy.com/tags/GCD/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios block]]></title>
    <link href="http://ytlvy.com/2015/06/15/ios-block/"/>
    <id>http://ytlvy.com/2015/06/15/ios-block/</id>
    <published>2015-06-15T12:02:03.000Z</published>
    <updated>2015-06-15T12:04:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Block">Block</h2><p>Converting Source Code<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc file_name_of_the_<span class="built_in">source</span>_code</span><br></pre></td></tr></table></figure></p>
<h3 id="无变量">无变量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags;</span><br><span class="line">  <span class="keyword">int</span> Reserved;</span><br><span class="line">  <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Block\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = (<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA);</span><br><span class="line"></span><br><span class="line">  ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="static变量">static变量</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">    <span class="keyword">struct</span> __block_impl <span class="keyword">impl</span>;</span><br><span class="line">    <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *static_val;</span><br><span class="line"></span><br><span class="line">    __main_block_impl_0(void *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc,</span><br><span class="line">    <span class="keyword">int</span> *_static_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : static_val(_static_val) &#123;</span><br><span class="line">        <span class="keyword">impl</span>.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">        <span class="keyword">impl</span>.Flags = flags;</span><br><span class="line">        <span class="keyword">impl</span>.FuncPtr = fp;</span><br><span class="line">        Desc = desc; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> void __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="keyword">int</span> *static_val = __cself-&gt;static_val;</span><br><span class="line">    (*static_val) *= <span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="__block_variable">__block variable</h3><p>将原来的变量更改为：Block_byref_val变量，此变量包含一个forwarding影像，用来存放block对其的修改。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//__block variable</span></span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags;</span><br><span class="line">  <span class="keyword">int</span> Reserved;</span><br><span class="line">  <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __Block_byref_val_0 &#123;</span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line"></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line"></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(<span class="keyword">struct</span> __main_block_impl_0*dst, <span class="keyword">struct</span> __main_block_impl_0*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(<span class="keyword">struct</span> __main_block_impl_0*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(<span class="keyword">struct</span> __main_block_impl_0*, <span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_1 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_1* Desc;</span><br><span class="line"></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line"></span><br><span class="line">  __main_block_impl_1(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_1 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_1(<span class="keyword">struct</span> __main_block_impl_1 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">2</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_1(<span class="keyword">struct</span> __main_block_impl_1*dst, <span class="keyword">struct</span> __main_block_impl_1*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_1(<span class="keyword">struct</span> __main_block_impl_1*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_1 &#123;</span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(<span class="keyword">struct</span> __main_block_impl_1*, <span class="keyword">struct</span> __main_block_impl_1*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_1*);</span><br><span class="line">&#125; __main_block_desc_1_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_1), __main_block_copy_1, __main_block_dispose_1&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  __attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = (<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> (*blk1)(<span class="keyword">void</span>) = (<span class="keyword">void</span> (*)())&amp;__main_block_impl_1((<span class="keyword">void</span> *)__main_block_func_1, &amp;__main_block_desc_1_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> IMAGE_INFO &#123; <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure></p>
<p>two block share same instance of the __Block_byref_val_0</p>
<h3 id="Memory_Segments_for_Blocks">Memory Segments for Blocks</h3><ol>
<li>_NSConcreteStackBlock</li>
<li>_NSConcreteGlobalBlock</li>
<li>_NSConcreteMallocBlock</li>
</ol>
<p>|  program area   |<br>| (.text section) |<br>|————————-|<br>|   data area     |<br>|   .data section |  &lt;——-  _NSConcreteGlobalBlock<br>|————————-|<br>|                 |<br>|       heap      |  &lt;——-  _NSConcreteMallocBlock<br>|                 |<br>|                 |<br>|————————-|<br>|      stack      |  &lt;——-  _NSConcreteStackBlock</p>
<h4 id="NSConcreteGlobalBlock_Class_Object">NSConcreteGlobalBlock Class Object</h4><ol>
<li>when a Block literal is written where a global variable is<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;<span class="built_in">printf</span>(<span class="string">"Global Block\n"</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Because automatic variables can’t exist where the global variables are declared, capturing never happens</p>
<ol>
<li>when a Block literal is inside a function and doesn’t capture any automatic variables</li>
</ol>
<blockquote>
<p>Any Block created by another kind of Block literal will be an object of the _NSConcreteStackBlock class, and be stored on the stack.<br>此外所有其他生成的block都是_NSConcreteStackBlock</p>
<p>A Block, which is stored in the data section like global variables, can be accessed safely via pointers outside any variable scopes. But the other Blocks, which are stored on the stack, will be disposed of after the scope of the Block is left. And <strong>block variables are stored on the stack as well, so the </strong>block variables will be disposed of when the scope is left<br>全局block， 可以在任何函数域内，安全的进行存取。但是stackBlock会在函数域结束后，被自动释放。为了解决这个问题，Block提供了一种机制，可以将StackBlock复制到heap</p>
</blockquote>
<h4 id="Block_on_the_Heap">Block on the Heap</h4><p>复制到堆上的闭包类型, 变更为NSConcreteMallocBlock. __forwarding变量用来指向闭包,具体的存放位置, stack or heap.</p>
<h4 id="Copying_Blocks_Automatically">Copying Blocks Automatically</h4><p>在ARC环境下, 系统会自动检测, 并将block复制到heap.<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="keyword">int</span> (^blk_t)(<span class="keyword">int</span>);</span><br><span class="line">blk_t func(<span class="keyword">int</span> rate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ^(<span class="keyword">int</span> <span class="keyword">count</span>)&#123;<span class="keyword">return</span> rate * <span class="keyword">count</span>;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Coping_Blocks_Manually">Coping Blocks Manually</h4><p>系统不能自动检测的情况</p>
<ol>
<li>When a Block is passed as an argument for methods or functions<br>(But if the method or the function copies the argument inside, the caller doesn’t need to copy it manually as)</li>
<li>Cocoa Framework methods, the name of which includes “usingBlock”</li>
<li>GCD API</li>
</ol>
<p>you need to copy a Block when you pass it to an NSArray class instance method “initWithObjects”<br>当你将Block作为参数, 传入数组 ‘initWithObjects’时,需要手动复制<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>) getBlockArray</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSArray</span> alloc] initWithObjects: </span><br><span class="line">     [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk0:%d"</span>, val);&#125; <span class="keyword">copy</span>],</span><br><span class="line">     [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk1:%d"</span>, val);&#125; <span class="keyword">copy</span>],</span><br><span class="line">      <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>尽量多得使用copy对Block无不良影响</p>
<h4 id="Memory_Segments_for___block_Variables">Memory Segments for __block Variables</h4><ol>
<li>当闭包被复制到Heap时, 如果闭包使用了__block变量, 且此变量未被其他block使用, 此变量也会被复制到heap.</li>
<li>如果__block变量被多个闭包使用, 此变量也会被复制到heap. 当二个闭包被复制时, heap中得变量引用指数+1.</li>
</ol>
<h4 id="__forwarding">__forwarding</h4><p>始终指向最新的Block, 可以对齐进行存取</p>
<h4 id="automatic_variables_of_C_array_type_can’t_be_used_in_a_Block_directly">automatic variables of C array type can’t be used in a Block directly</h4><p>原因是C语言不允许将一个数组变量，赋值另外一个数组变量, 不能编译<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> a[10])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">10</span>] = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b[<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>] = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">    func(a); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Capturing_Objects">Capturing Objects</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">  <span class="keyword">id</span> __<span class="keyword">strong</span> array;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="When_is_the_Block_on_the_stack_copied_to_the_heap">When is the Block on the stack copied to the heap</h4><p>􏰀1. When the instance method “copy” is called on the Block<br>􏰀2. When the Block is returned from a function<br>􏰀3. When the Block is assigned to a member variable of id or the Block type class, with __strong qualifier<br>􏰀4. When the Block is passed to a method, including “usingBlock” in the Cocoa Framework, or a Grand Central Dispatch API</p>
<h4 id="When_You_Should_Call_the_“copy”_Method">When You Should Call the “copy” Method</h4><p>􏰀1. When the Block is returned from a function<br>􏰀2. When the Block is assigned to a member variable of id or the Block<br>type class, with a __strong qualifier<br>􏰀3. When the Block is passed to a method, including “usingBlock” in the Cocoa Framework, or a Grand Central Dispatch API</p>
<h4 id="Circular_Reference_with_Blocks">Circular Reference with Blocks</h4><p>__weak</p>
<p>在不支持weak的情况下<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">id</span> tmp = <span class="keyword">self</span>;</span><br><span class="line">blk_ = ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, tmp);</span><br><span class="line">  tmp = <span class="literal">nil</span>; </span><br><span class="line">&#125;;</span><br><span class="line">- (<span class="keyword">void</span>)execBlock &#123;</span><br><span class="line">  blk_();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果不执行execBlock, 还是存在循环引用, 要确保执行了execBlock</p>
]]></content>
    <summary type="html">
    <![CDATA[block用法, 以及底层实现]]>
    
    </summary>
    
      <category term="block" scheme="http://ytlvy.com/tags/block/"/>
    
      <category term="ios" scheme="http://ytlvy.com/tags/ios/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[wget]]></title>
    <link href="http://ytlvy.com/2015/06/11/wget/"/>
    <id>http://ytlvy.com/2015/06/11/wget/</id>
    <published>2015-06-11T05:06:15.000Z</published>
    <updated>2015-06-11T05:07:01.000Z</updated>
    <content type="html"><![CDATA[<h2 id="wget">wget</h2><h3 id="用wget做站点镜像">用wget做站点镜像</h3><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">wget</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">mirror</span> <span class="literal">-</span><span class="comment">p</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">convert</span><span class="literal">-</span><span class="comment">links</span> <span class="literal">-</span><span class="comment">P</span> <span class="title">[</span><span class="comment">本地目录</span><span class="title">]</span> <span class="title">[</span><span class="comment">网站地址</span><span class="title">]</span></span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -np -nd <span class="string">http:</span><span class="comment">//appinn.com</span></span><br></pre></td></tr></table></figure>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -r -<span class="tag">p</span> -np -k http:<span class="comment">//dsec.pku.edu.cn/~usr_name/</span></span><br></pre></td></tr></table></figure>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -m <span class="string">http:</span><span class="comment">//www.tldp.org/LDP/abs/html/</span></span><br></pre></td></tr></table></figure>
<h3 id="在不稳定的网络上下载一个部分下载的文件，以及在空闲时段下载">在不稳定的网络上下载一个部分下载的文件，以及在空闲时段下载</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -t <span class="number">0</span> -w <span class="number">31</span> -c <span class="string">http:</span><span class="comment">//dsec.pku.edu.cn/BBC.avi -o down.log &amp;</span></span><br></pre></td></tr></table></figure>
<h3 id="从filelist读入要下载的文件列表">从filelist读入要下载的文件列表</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -t <span class="number">0</span> -w <span class="number">31</span> -c -B <span class="string">ftp:</span><span class="comment">//dsec.pku.edu.cn/linuxsoft -i filelist.txt -o down.log &amp;</span></span><br></pre></td></tr></table></figure>
<p>上面的代码还可以用来在网络比较空闲的时段进行下载。我的用法是:在mozilla中将不方便当时下载的URL链接拷贝到内存中然后粘贴到文件filelist.txt中，在晚上要出去前执行上面代码</p>
<h3 id="详细参数">详细参数</h3><h4 id="启动">启动</h4><blockquote>
<p> -V,  —version           显示wget的版本后退出<br>  -h,  —help              打印语法帮助<br>  -b,  —background        启动后转入后台执行<br>  -e,  —execute=COMMAND   执行`.wgetrc’格式的命令，wgetrc格式参见/etc/wgetrc或~/.wgetrc</p>
</blockquote>
<h4 id="记录和输入文件">记录和输入文件</h4><blockquote>
<p> -o,  —output-file=FILE     把记录写到FILE文件中<br>  -a,  —append-output=FILE   把记录追加到FILE文件中<br>  -d,  —debug                打印调试输出<br>  -q,  —quiet                安静模式(没有输出)<br>  -v,  —verbose              冗长模式(这是缺省设置)<br>  -nv, —non-verbose          关掉冗长模式，但不是安静模式<br>  -i,  —input-file=FILE      下载在FILE文件中出现的URLs<br>  -F,  —force-html           把输入文件当作HTML格式文件对待<br>  -B,  —base=URL             将URL作为在-F -i参数指定的文件中出现的相对链接的前缀<br>   —sslcertfile=FILE     可选客户端证书<br>   —sslcertkey=KEYFILE   可选客户端证书的KEYFILE<br>   —egd-file=FILE        指定EGD socket的文件名</p>
</blockquote>
<h4 id="下载">下载</h4><blockquote>
<p> —bind-address=ADDRESS   指定本地使用地址(主机名或IP，当本地有多个IP或名字时使用)<br>  -t,  —tries=NUMBER           设定最大尝试链接次数(0 表示无限制).<br>  -O   —output-document=FILE   把文档写到FILE文件中<br>  -nc, —no-clobber             不要覆盖存在的文件或使用.#前缀<br>  -c,  —continue               接着下载没下载完的文件<br>  —progress=TYPE          设定进程条标记<br>  -N,  —timestamping           不要重新下载文件除非比本地文件新<br>  -S,  —server-response        打印服务器的回应<br>  —spider                 不下载任何东西<br>  -T,  —timeout=SECONDS        设定响应超时的秒数<br>  -w,  —wait=SECONDS           两次尝试之间间隔SECONDS秒<br>  —waitretry=SECONDS      在重新链接之间等待1…SECONDS秒<br>  —random-wait            在下载之间等待0…2*WAIT秒<br>  -Y,  —proxy=on/off           打开或关闭代理<br>  -Q,  —quota=NUMBER           设置下载的容量限制<br>  —limit-rate=RATE        限定下载输率</p>
</blockquote>
<h4 id="目录">目录</h4><p>  -nd  —no-directories            不创建目录<br>  -x,  —force-directories         强制创建目录<br>  -nH, —no-host-directories       不创建主机目录<br>  -P,  —directory-prefix=PREFIX   将文件保存到目录 PREFIX/…<br>       —cut-dirs=NUMBER           忽略 NUMBER层远程目录</p>
<h4 id="HTTP_选项">HTTP 选项</h4><pre><code>--http-<span class="built_ins">user</span>=<span class="built_ins">USER</span>      设定HTTP用户名为 <span class="built_ins">USER</span>.
--http-passwd=PASS    设定http密码为 PASS.
</code></pre><p>  -C,  —cache=on/off        允许/不允许服务器端的数据缓存 (一般情况下允许).<br>  -E,  —html-extension      将所有text/html文档以.html扩展名保存<br>       —ignore-length       忽略 <code>Content-Length&#39;头域
       --header=STRING       在headers中插入字符串 STRING
       --proxy-user=USER     设定代理的用户名为 USER
       --proxy-passwd=PASS   设定代理的密码为 PASS
       --referer=URL         在HTTP请求中包含</code>Referer: URL’头<br>  -s,  —save-headers        保存HTTP头到文件<br>  -U,  —user-agent=AGENT    设定代理的名称为 AGENT而不是 Wget/VERSION.<br>       —no-http-keep-alive  关闭 HTTP活动链接 (永远链接).<br>       —cookies=off         不使用 cookies.<br>       —load-cookies=FILE   在开始会话前从文件 FILE中加载cookie<br>       —save-cookies=FILE   在会话结束后将 cookies保存到 FILE文件中</p>
<h4 id="FTP_选项">FTP 选项</h4><p>  -nr, —dont-remove-listing   不移走 `.listing’文件<br>  -g,  —glob=on/off           打开或关闭文件名的 globbing机制<br>       —passive-ftp           使用被动传输模式 (缺省值).<br>       —active-ftp            使用主动传输模式<br>       —retr-symlinks         在递归的时候，将链接指向文件(而不是目录)</p>
<h4 id="递归下载">递归下载</h4><p>  -r,  —recursive          递归下载－－慎用!<br>  -l,  —level=NUMBER       最大递归深度 (inf 或 0 代表无穷).<br>       —delete-after       在现在完毕后局部删除文件<br>  -k,  —convert-links      转换非相对链接为相对链接<br>  -K,  —backup-converted   在转换文件X之前，将之备份为 X.orig<br>  -m,  —mirror             等价于 -r -N -l inf -nr.<br>  -p,  —page-requisites    下载显示HTML文件的所有图片</p>
<h4 id="递归下载中的包含和不包含(accept/reject)">递归下载中的包含和不包含(accept/reject)</h4><p>  -A,  —accept=LIST                分号分隔的被接受扩展名的列表<br>  -R,  —reject=LIST                分号分隔的不被接受的扩展名的列表<br>  -D,  —domains=LIST               分号分隔的被接受域的列表<br>       —exclude-domains=LIST       分号分隔的不被接受的域的列表<br>       —follow-ftp                 跟踪HTML文档中的FTP链接<br>       —follow-tags=LIST           分号分隔的被跟踪的HTML标签的列表<br>  -G,  —ignore-tags=LIST           分号分隔的被忽略的HTML标签的列表<br>  -H,  —span-hosts                 当递归时转到外部主机<br>  -L,  —relative                   仅仅跟踪相对链接<br>  -I,  —include-directories=LIST   允许目录的列表<br>  -X,  —exclude-directories=LIST   不被包含目录的列表<br>  -np, —no-parent                  不要追溯到父目录</p>
]]></content>
    <summary type="html">
    <![CDATA[wget 用法]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="linux" scheme="http://ytlvy.com/categories/linux/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AutoLayout -- Content Compression Resistance & Content Hugging]]></title>
    <link href="http://ytlvy.com/2015/06/08/AutoLayout-Content-Compression-Resistance-Content-Hugging/"/>
    <id>http://ytlvy.com/2015/06/08/AutoLayout-Content-Compression-Resistance-Content-Hugging/</id>
    <published>2015-06-08T13:26:29.000Z</published>
    <updated>2015-06-08T13:49:39.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Content_Compression_Resistance_&amp;&amp;_Content_Hugging">Content Compression Resistance &amp;&amp; Content Hugging</h2><p>Auto Layout中, 存在Content Compression Resistance 和 Content Hugging 这两个概念.这两个概念是在<code>固有内容尺寸</code>（Intrinsic Content Size）之上起作用的.</p>
<h3 id="Intrinsic_Content_Size">Intrinsic Content Size</h3><p>包含内容的UI控件, 由内容多少而决定的大小规则.</p>
<h3 id="Content_Compression_Resistance_&amp;_Content_Hugging">Content Compression Resistance &amp; Content Hugging</h3><ol>
<li>内容大小改变是指, 内容显示内容所占空间的长度来说的.</li>
<li><code>内容抗压指数</code>，在父视图变小时, 会根据抗压指数来缩小各子控件;</li>
<li><code>内容拥抱指数</code>, 内容越集中于控件中心, 周围空白越小.</li>
</ol>
<h3 id="例子">例子</h3><p>假设，你有一个下面这样的按钮：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[       Click Me        ]</span><br></pre></td></tr></table></figure></p>
<p>按钮与其父视图之间的边距约束优先级是500。<br>然后，如果按钮的吸附性优先级（Hugging priority）大于500，按钮看起来会是这样：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Click Me]</span><br></pre></td></tr></table></figure>
<p>如果，吸附性优先级小于500，按钮会是这样：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[       Click Me        ]</span><br></pre></td></tr></table></figure></p>
<p>然后，如果现在父视图收缩了，按钮的压缩阻力优先级（Compression Resistance priority）大于500，它看起来会是这样：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Click Me]</span><br></pre></td></tr></table></figure></p>
<p>否则，如果压缩阻力优先级小于500，它会是这样：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Cli..]</span><br></pre></td></tr></table></figure></p>
<p>如果不是这样，则很可能是有一些其他的约束扰乱了你的整个布局！ 例如，可能你的边距约束优先级是1000。或者你可能有一个优先级较高的宽度约束。如果遇到这种情况，可以试试“Editor &gt; Size to Fit Content”菜单命令。</p>
]]></content>
    <summary type="html">
    <![CDATA[autoLayout 内容抗压指数 和 内容吸附指数]]>
    
    </summary>
    
      <category term="autolayout" scheme="http://ytlvy.com/tags/autolayout/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[objc runtime method Cache]]></title>
    <link href="http://ytlvy.com/2015/06/08/objc-runtime-method-Cache/"/>
    <id>http://ytlvy.com/2015/06/08/objc-runtime-method-Cache/</id>
    <published>2015-06-08T13:01:55.000Z</published>
    <updated>2015-06-08T13:51:38.000Z</updated>
    <content type="html"><![CDATA[<h3 id="method_cache_更新机制">method cache 更新机制</h3><p>为了方便函数的查找, objc在运行时,引入了method cache机制,来快速定位函数.method cache的大小是动态更新的,在更新时, 将直接生成新容量的缓存, 并将旧的缓存放入到垃圾队列中,等待时机释放. 而时机的选择, 采用检测每个线程的program counter,来查看是否处于objc_msgSend.如果都不在,则释放.<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BOOL ThreadsInMsgSend<span class="params">(void)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span><span class="params">(thread in GetAllThreads<span class="params">()</span>)</span> &#123;</span><br><span class="line">        uintptr_t pc = thread.GetPC<span class="params">()</span>;</span><br><span class="line">        <span class="keyword">if</span><span class="params">(pc &gt;= objc_msgSend_startAddress &amp;&amp; pc &lt;= objc_msgSend_endAddress)</span> &#123;</span><br><span class="line">            return YES;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bucket_t <span class="built_in">*</span>oldCache = class-&gt;cache;</span><br><span class="line">class-&gt;cache = malloc<span class="params">(newSize)</span>;</span><br><span class="line"></span><br><span class="line">append<span class="params">(gOldCachesList, oldCache)</span>;</span><br><span class="line"><span class="keyword">if</span><span class="params">(!ThreadsInMsgSend<span class="params">()</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span><span class="params">(cache in gOldCachesList)</span> &#123;</span><br><span class="line">        free<span class="params">(cache)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    gOldCachesList.clear<span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[objc运行时, 函数缓存更新机制]]>
    
    </summary>
    
      <category term="cache" scheme="http://ytlvy.com/tags/cache/"/>
    
      <category term="runtime" scheme="http://ytlvy.com/tags/runtime/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS Multithreading && Memory Management]]></title>
    <link href="http://ytlvy.com/2015/06/07/IOS-Multithreading-Memory-Management/"/>
    <id>http://ytlvy.com/2015/06/07/IOS-Multithreading-Memory-Management/</id>
    <published>2015-06-07T13:04:21.000Z</published>
    <updated>2015-06-07T13:06:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Block">Block</h2><p>Converting Source Code<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -rewrite-objc file_name_of_the_<span class="built_in">source</span>_code</span><br></pre></td></tr></table></figure></p>
<h3 id="无变量">无变量</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags;</span><br><span class="line">  <span class="keyword">int</span> Reserved;</span><br><span class="line">  <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Block\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0)&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = (<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA);</span><br><span class="line"></span><br><span class="line">  ((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="static变量">static变量</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">    <span class="keyword">struct</span> __block_impl <span class="keyword">impl</span>;</span><br><span class="line">    <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> *static_val;</span><br><span class="line"></span><br><span class="line">    __main_block_impl_0(void *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc,</span><br><span class="line">    <span class="keyword">int</span> *_static_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : static_val(_static_val) &#123;</span><br><span class="line">        <span class="keyword">impl</span>.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">        <span class="keyword">impl</span>.Flags = flags;</span><br><span class="line">        <span class="keyword">impl</span>.FuncPtr = fp;</span><br><span class="line">        Desc = desc; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> void __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">    <span class="keyword">int</span> *static_val = __cself-&gt;static_val;</span><br><span class="line">    (*static_val) *= <span class="number">3</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="__block_variable">__block variable</h3><p>将原来的变量更改为：Block_byref_val变量，此变量包含一个forwarding影像，用来存放block对其的修改。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//__block variable</span></span><br><span class="line"><span class="keyword">struct</span> __block_impl &#123;</span><br><span class="line">  <span class="keyword">void</span> *isa;</span><br><span class="line">  <span class="keyword">int</span> Flags;</span><br><span class="line">  <span class="keyword">int</span> Reserved;</span><br><span class="line">  <span class="keyword">void</span> *FuncPtr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __Block_byref_val_0 &#123;</span><br><span class="line">  <span class="keyword">void</span> *__isa;</span><br><span class="line">__Block_byref_val_0 *__forwarding;</span><br><span class="line"> <span class="keyword">int</span> __flags;</span><br><span class="line"> <span class="keyword">int</span> __size;</span><br><span class="line"> <span class="keyword">int</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line"></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line"></span><br><span class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_0(<span class="keyword">struct</span> __main_block_impl_0 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_0(<span class="keyword">struct</span> __main_block_impl_0*dst, <span class="keyword">struct</span> __main_block_impl_0*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_0(<span class="keyword">struct</span> __main_block_impl_0*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_0 &#123;</span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(<span class="keyword">struct</span> __main_block_impl_0*, <span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_0*);</span><br><span class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_0), __main_block_copy_0, __main_block_dispose_0&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> __main_block_impl_1 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_1* Desc;</span><br><span class="line"></span><br><span class="line">  __Block_byref_val_0 *val; <span class="comment">// by ref</span></span><br><span class="line"></span><br><span class="line">  __main_block_impl_1(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_1 *desc, __Block_byref_val_0 *_val, <span class="keyword">int</span> flags=<span class="number">0</span>) : val(_val-&gt;__forwarding) &#123;</span><br><span class="line">    impl.isa = &amp;_NSConcreteStackBlock;</span><br><span class="line">    impl.Flags = flags;</span><br><span class="line">    impl.FuncPtr = fp;</span><br><span class="line">    Desc = desc;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_func_1(<span class="keyword">struct</span> __main_block_impl_1 *__cself) &#123;</span><br><span class="line">  __Block_byref_val_0 *val = __cself-&gt;val; <span class="comment">// bound by ref</span></span><br><span class="line">(val-&gt;__forwarding-&gt;val) = <span class="number">2</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_copy_1(<span class="keyword">struct</span> __main_block_impl_1*dst, <span class="keyword">struct</span> __main_block_impl_1*src) &#123;_Block_object_assign((<span class="keyword">void</span>*)&amp;dst-&gt;val, (<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __main_block_dispose_1(<span class="keyword">struct</span> __main_block_impl_1*src) &#123;_Block_object_dispose((<span class="keyword">void</span>*)src-&gt;val, <span class="number">8</span><span class="comment">/*BLOCK_FIELD_IS_BYREF*/</span>);&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> __main_block_desc_1 &#123;</span><br><span class="line">  <span class="keyword">size_t</span> reserved;</span><br><span class="line">  <span class="keyword">size_t</span> Block_size;</span><br><span class="line">  <span class="keyword">void</span> (*copy)(<span class="keyword">struct</span> __main_block_impl_1*, <span class="keyword">struct</span> __main_block_impl_1*);</span><br><span class="line">  <span class="keyword">void</span> (*dispose)(<span class="keyword">struct</span> __main_block_impl_1*);</span><br><span class="line">&#125; __main_block_desc_1_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> __main_block_impl_1), __main_block_copy_1, __main_block_dispose_1&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  __attribute__((__blocks__(byref))) __Block_byref_val_0 val = &#123;(<span class="keyword">void</span>*)<span class="number">0</span>,(__Block_byref_val_0 *)&amp;val, <span class="number">0</span>, <span class="keyword">sizeof</span>(__Block_byref_val_0), <span class="number">10</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = (<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> (*blk1)(<span class="keyword">void</span>) = (<span class="keyword">void</span> (*)())&amp;__main_block_impl_1((<span class="keyword">void</span> *)__main_block_func_1, &amp;__main_block_desc_1_DATA, (__Block_byref_val_0 *)&amp;val, <span class="number">570425344</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">struct</span> IMAGE_INFO &#123; <span class="keyword">unsigned</span> version; <span class="keyword">unsigned</span> flag; &#125; _OBJC_IMAGE_INFO = &#123; <span class="number">0</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure></p>
<p>two block share same instance of the __Block_byref_val_0</p>
<h3 id="Memory_Segments_for_Blocks">Memory Segments for Blocks</h3><ol>
<li>_NSConcreteStackBlock</li>
<li>_NSConcreteGlobalBlock</li>
<li>_NSConcreteMallocBlock</li>
</ol>
<p>|  program area   |<br>| (.text section) |<br>|————————-|<br>|   data area     |<br>|   .data section |  &lt;——-  _NSConcreteGlobalBlock<br>|————————-|<br>|                 |<br>|       heap      |  &lt;——-  _NSConcreteMallocBlock<br>|                 |<br>|                 |<br>|————————-|<br>|      stack      |  &lt;——-  _NSConcreteStackBlock</p>
<h4 id="NSConcreteGlobalBlock_Class_Object">NSConcreteGlobalBlock Class Object</h4><ol>
<li>when a Block literal is written where a global variable is<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;<span class="built_in">printf</span>(<span class="string">"Global Block\n"</span>);&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Because automatic variables can’t exist where the global variables are declared, capturing never happens</p>
<ol>
<li>when a Block literal is inside a function and doesn’t capture any automatic variables</li>
</ol>
<blockquote>
<p>Any Block created by another kind of Block literal will be an object of the _NSConcreteStackBlock class, and be stored on the stack.<br>此外所有其他生成的block都是_NSConcreteStackBlock</p>
<p>A Block, which is stored in the data section like global variables, can be accessed safely via pointers outside any variable scopes. But the other Blocks, which are stored on the stack, will be disposed of after the scope of the Block is left. And <strong>block variables are stored on the stack as well, so the </strong>block variables will be disposed of when the scope is left<br>全局block， 可以在任何函数域内，安全的进行存取。但是stackBlock会在函数域结束后，被自动释放。为了解决这个问题，Block提供了一种机制，可以将StackBlock复制到heap</p>
</blockquote>
<h4 id="Block_on_the_Heap">Block on the Heap</h4><p>复制到堆上的闭包类型, 变更为NSConcreteMallocBlock. __forwarding变量用来指向闭包,具体的存放位置, stack or heap.</p>
<h4 id="Copying_Blocks_Automatically">Copying Blocks Automatically</h4><p>在ARC环境下, 系统会自动检测, 并将block复制到heap.<br><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="keyword">int</span> (^blk_t)(<span class="keyword">int</span>);</span><br><span class="line">blk_t func(<span class="keyword">int</span> rate)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> ^(<span class="keyword">int</span> <span class="keyword">count</span>)&#123;<span class="keyword">return</span> rate * <span class="keyword">count</span>;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Coping_Blocks_Manually">Coping Blocks Manually</h4><p>系统不能自动检测的情况</p>
<ol>
<li>When a Block is passed as an argument for methods or functions<br>(But if the method or the function copies the argument inside, the caller doesn’t need to copy it manually as)</li>
<li>Cocoa Framework methods, the name of which includes “usingBlock”</li>
<li>GCD API</li>
</ol>
<p>you need to copy a Block when you pass it to an NSArray class instance method “initWithObjects”<br>当你将Block作为参数, 传入数组 ‘initWithObjects’时,需要手动复制<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">id</span>) getBlockArray</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSArray</span> alloc] initWithObjects: </span><br><span class="line">     [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk0:%d"</span>, val);&#125; <span class="keyword">copy</span>],</span><br><span class="line">     [^&#123;<span class="built_in">NSLog</span>(<span class="string">@"blk1:%d"</span>, val);&#125; <span class="keyword">copy</span>],</span><br><span class="line">      <span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>尽量多得使用copy对Block无不良影响</p>
<h4 id="Memory_Segments_for___block_Variables">Memory Segments for __block Variables</h4><ol>
<li>当闭包被复制到Heap时, 如果闭包使用了__block变量, 且此变量未被其他block使用, 此变量也会被复制到heap.</li>
<li>如果__block变量被多个闭包使用, 此变量也会被复制到heap. 当二个闭包被复制时, heap中得变量引用指数+1.</li>
</ol>
<h4 id="__forwarding">__forwarding</h4><p>始终指向最新的Block, 可以对齐进行存取</p>
<h4 id="automatic_variables_of_C_array_type_can’t_be_used_in_a_Block_directly">automatic variables of C array type can’t be used in a Block directly</h4><p>原因是C语言不允许将一个数组变量，赋值另外一个数组变量, 不能编译<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> a[10])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> b[<span class="number">10</span>] = a;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, b[<span class="number">0</span>]); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> a[<span class="number">10</span>] = &#123;<span class="number">2</span>&#125;;</span><br><span class="line">    func(a); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="Capturing_Objects">Capturing Objects</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</span><br><span class="line">  <span class="keyword">struct</span> __block_impl impl;</span><br><span class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</span><br><span class="line">  <span class="keyword">id</span> __<span class="keyword">strong</span> array;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h4 id="When_is_the_Block_on_the_stack_copied_to_the_heap">When is the Block on the stack copied to the heap</h4><p>􏰀1. When the instance method “copy” is called on the Block<br>􏰀2. When the Block is returned from a function<br>􏰀3. When the Block is assigned to a member variable of id or the Block type class, with __strong qualifier<br>􏰀4. When the Block is passed to a method, including “usingBlock” in the Cocoa Framework, or a Grand Central Dispatch API</p>
<h4 id="When_You_Should_Call_the_“copy”_Method">When You Should Call the “copy” Method</h4><p>􏰀1. When the Block is returned from a function<br>􏰀2. When the Block is assigned to a member variable of id or the Block<br>type class, with a __strong qualifier<br>􏰀3. When the Block is passed to a method, including “usingBlock” in the Cocoa Framework, or a Grand Central Dispatch API</p>
<h4 id="Circular_Reference_with_Blocks">Circular Reference with Blocks</h4><p>__weak</p>
<p>在不支持weak的情况下<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__block <span class="keyword">id</span> tmp = <span class="keyword">self</span>;</span><br><span class="line">blk_ = ^&#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, tmp);</span><br><span class="line">  tmp = <span class="literal">nil</span>; </span><br><span class="line">&#125;;</span><br><span class="line">- (<span class="keyword">void</span>)execBlock &#123;</span><br><span class="line">  blk_();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>如果不执行execBlock, 还是存在循环引用, 要确保执行了execBlock</p>
<h2 id="GCD">GCD</h2><h3 id="befor_GCD">befor GCD</h3><h4 id="object_method">object method</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="typename">void</span>) <span class="string">performSelectorInBackground:</span> <span class="string">withObject:</span></span><br><span class="line">- (<span class="typename">void</span>) <span class="string">performSelectorOnMainThread:</span> <span class="string">withObject:</span> <span class="string">waitUntilDone:</span></span><br></pre></td></tr></table></figure>
<h3 id="多线程面临的问题">多线程面临的问题</h3><ol>
<li>race condition</li>
<li>dead lock</li>
<li>too much threads consumes two much memory</li>
</ol>
<h4 id="多线程的意义">多线程的意义</h4><p>高交互性， 界面编程中，将耗时的操作放入到其他线程执行，避免影响到主线程界面响应</p>
<h3 id="GCD_基础">GCD 基础</h3><h4 id="Dispatch_Queue_派发队列">Dispatch Queue 派发队列</h4><ol>
<li>serial dispath queue  顺序派发队列</li>
<li>concurrent dispath queue  并发派发队列</li>
</ol>
<p>和浏览器对同一域名可发起的同时连接数限制一样，可最多同时执行的线程数，也是由系统来决定的</p>
<h4 id="创建队列">创建队列</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispath_queue_t mySerialDispatchQueue = dispatch_queue_create<span class="list">(<span class="string">"com.example.gcd.MySerialDispatchQueue"</span>, NULL)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_queue_t myConcurrentDispathQueue = dispatch_queue_create<span class="list">(<span class="string">"com.ytlvy.gcd.MyConcurrentDispatchQueue"</span>, DISPATCH_QUEUE_CONCURRENT)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">myConcurrentQueue</span>, ^&#123;</span><br><span class="line">  //do staff</span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">mySerialDispatchQueue</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_retain<span class="list">(<span class="keyword">myConcurrentDispatchQueue</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>当并发队列添加任务后，队列被release，是没有问题的。因为block在添加到队列时，会触发dispatch_retain操作来持有队列，在block结束时，会自动触发dispatch_release来释放队列</p>
<h4 id="Main_Dispatch_Queue_/_Global_Dispatch_Queue">Main Dispatch Queue / Global Dispatch Queue</h4><p>可以采用系统方法来获取派发队列。<br> NAME                              | Type        | Description<br> ————————————          | ——————| ————————<br> Main dispatch queue               | Serial      | Executed on the main thread<br> Global dispatch queue(Hight)      | Concurrent  | Priority High<br> Global dispatch queue(default)    | Concurrent  | Priority Normal<br> Global dispatch queue(low)        | Concurrent  | Priority Low<br> Global dispatch queue(background) | Concurrent  | Priority Background</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mainDispatchQueue = dispatch_get_main_queue<span class="list">()</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueHight = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_HIGH</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueDefault =</span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueLow = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_LOW</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueBackground = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>dispatch_retain dispatch_release对系统分配的队列不生效。</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">dispatch_async</span>(<span class="function">dispatch_get_global_queue</span>(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>) ^&#123;</span><br><span class="line">   <span class="comment">//do staff</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">dispatch_async</span>(dispatch_get_main_queue, ^&#123;</span><br><span class="line">    <span class="comment">// update gui</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="Controlling_Dispatch_Queue">Controlling Dispatch Queue</h4><p><code>dispatch_set_target_queue</code>设置队列优先级</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t mySerialDispatchQueue = </span><br><span class="line">    dispatch_create<span class="list">(<span class="string">"com.ytlvy.gcd.MySerialDispatchQueue"</span>, NULL)</span><span class="comment">;</span></span><br><span class="line">dispatch_queue_t globalDispatchQueueBackGround = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_BACKGROUND</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_set_target_queue<span class="list">(<span class="keyword">mySerialDispatchQueue</span>, globalDispatchQueueBackground)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="dispatch_after">dispatch_after</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_time_t</span> time = <span class="keyword">dispatch_t</span>ime(DISPATCH_TIME_NOW, <span class="number">3u</span>ll * NSEC_PER_SEC);</span><br><span class="line"></span><br><span class="line">dispatch_after(time, dispatch_get_main_queue(), ^&#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>“ull” is for “unsigned long long type”</p>
<p>毫秒<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_time_t</span> time = <span class="keyword">dispatch_t</span>ime(DISPATCH_TIME_NOW, <span class="number">1u</span>ll * NSEC_PER_MSEC);</span><br></pre></td></tr></table></figure></p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t getDispatchTimeByDate(NSDate *<span class="type">date</span>)&#123;</span><br><span class="line">  NSTimeInterval interval;</span><br><span class="line">  double <span class="keyword">second</span>, subsecond;</span><br><span class="line">  struct timespec, <span class="property">time</span>;</span><br><span class="line">  dispatch_time_t milestone;</span><br><span class="line"></span><br><span class="line">  interval = [<span class="type">date</span> timeIntervalSince1970];</span><br><span class="line">  subsecond = modf(interval, &amp;<span class="keyword">second</span>);</span><br><span class="line">  <span class="property">time</span>.tv_sec = <span class="keyword">second</span>;</span><br><span class="line">  <span class="property">time</span>.tv_nsec = subsecond * NSEC_PER_SEC;</span><br><span class="line">  milestone = dispatch_wailltime(&amp;<span class="property">time</span>, <span class="number">0</span>);</span><br><span class="line"><span class="command"></span><br><span class="line">  return</span> milstone;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，dispatch第二个参数，应该使用<code>ull</code> 或者 <code>double</code>类型<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SDate <span class="built_in">*</span>start = [NSDate date];</span><br><span class="line">dispatch_time_t popTime = dispatch_time<span class="params">(DISPATCH_TIME_NOW, <span class="number">4</span> * NSEC_PER_SEC)</span>;</span><br><span class="line"></span><br><span class="line">dispatch_after<span class="params">(popTime, dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">  NSLog<span class="params">(@<span class="string">"seconds: %f"</span>, [start timeIntervalSinceNow])</span>;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"><span class="comment">// output: seconds: -0.0001</span></span><br><span class="line"></span><br><span class="line">NSDate <span class="built_in">*</span>start = [NSDate date];</span><br><span class="line">dispatch_time_t popTime = dispatch_time<span class="params">(DISPATCH_TIME_NOW, <span class="number">4.0</span> * NSEC_PER_SEC)</span>;</span><br><span class="line"></span><br><span class="line">dispatch_after<span class="params">(popTime, dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">  NSLog<span class="params">(@<span class="string">"seconds: %f"</span>, [start timeIntervalSinceNow])</span>;</span><br><span class="line">&#125;)</span>;</span><br><span class="line"><span class="comment">// output: seconds: -4.0001</span></span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch_group">dispatch group</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_group_t group = dispatch_group_create<span class="list">()</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123; NSLog<span class="list">(@<span class="string">"blk0"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123; NSLog<span class="list">(@<span class="string">"blk1"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123; NSLog<span class="list">(@<span class="string">"blk2"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line"></span><br><span class="line">dispatch_group_notify<span class="list">(<span class="keyword">group</span>, dispatch_get_main_queue<span class="list">()</span>, ^&#123; NSLog<span class="list">(@<span class="string">"done"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">group</span>)</span><span class="comment">;</span></span></span></span></span></span><br></pre></td></tr></table></figure>
<p>等所有任务结束，使用派发队列组。<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_group_t group = dispatch_group_create<span class="list">()</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123;NSLog<span class="list">(@<span class="string">"blk0"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123;NSLog<span class="list">(@<span class="string">"blk1"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line">dispatch_group_async<span class="list">(<span class="keyword">group</span>, queue, ^&#123;NSLog<span class="list">(@<span class="string">"blk2"</span>)</span><span class="comment">; &#125;);</span></span><br><span class="line"></span><br><span class="line">dispatch_group_wait<span class="list">(<span class="keyword">group</span>, DISPATCH_TIME_FOREVER)</span><span class="comment">;</span></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">group</span>)</span><span class="comment">;</span></span></span></span></span><br></pre></td></tr></table></figure></p>
<p>等待1秒<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t time = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="number">1</span>ull * <span class="type">NSEC_PER_SEC</span>);</span><br><span class="line">long <span class="literal">result</span> = dispatch_group_wait(group, time);</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">result</span> == <span class="number">0</span>)&#123;</span><br><span class="line">  //finished</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  //some task still running</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>检测任务是否完成<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">long <span class="literal">result</span> = dispatch_group_wait(group, <span class="type">DISPATCH_TIME_NOW</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="dispatch_barrier_async">dispatch_barrier_async</h3><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_queue_create<span class="list">(</span><br><span class="line">      <span class="string">"com.example.gcd.ForBarrier"</span>, DISPATCH_QUEUE_CONCURRENT)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk0_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk1_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk2_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk3_for_reading)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_barrier_async<span class="list">(<span class="keyword">queue</span>, blk_for_writing)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk4_for_reading)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, blk5_for_reading)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_release<span class="list">(<span class="keyword">queue</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="dispatch_sync">dispatch_sync</h3><p>dead lock<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = dispatch_get_main_queue<span class="list">()</span><span class="comment">;</span></span><br><span class="line">dispatch_sync<span class="list">(<span class="keyword">queue</span>, ^&#123;&#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//dead lock</span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line">  dispatch_sync<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">//serial queue  dead lock</span><br><span class="line">dispatch_queue_t queue = dispatch_queue_create<span class="list">(<span class="string">"com.example"</span>, NULL)</span><span class="comment">;</span></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line">  dispatch_sync<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch_apply">dispatch_apply</h4><p>与 <code>dispatch_sync</code> 和<code>dispatch_group</code>相关，可以多次添加同一任务, 并等待任务结束</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue =</span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_apply<span class="list">(<span class="number">10</span>, queue, ^<span class="list">(<span class="keyword">size_t</span> index)</span>&#123;</span><br><span class="line">  NSLog<span class="list">(<span class="string">"%zu"</span>, index)</span><span class="comment">;</span></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br><span class="line">NSLog<span class="list">(@<span class="string">"done"</span>)</span><span class="comment">; //last output</span></span><br></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t queue = </span><br><span class="line">    dispatch_get_global_queue<span class="list">(<span class="keyword">DISPATCH_QUEUE_PRIORITY_DEFAULT</span>, <span class="number">0</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_async<span class="list">(<span class="keyword">queue</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">  dispatch_apply<span class="list">([array count], queue, ^<span class="list">(<span class="keyword">size_t</span> idx)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">  //all tasks by dispatch_apply are finished</span><br><span class="line"></span><br><span class="line">  dispatch_async<span class="list">(<span class="keyword">dispatch_get_main_queue</span><span class="list">()</span>, ^&#123;</span><br><span class="line"></span><br><span class="line">    &#125;)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">  &#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="dispatch_suspend_&amp;&amp;_dispatch_resume">dispatch_suspend &amp;&amp; dispatch_resume</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dispatch_suspend<span class="list">(<span class="keyword">queue</span>)</span><span class="comment">;</span></span><br><span class="line">dispatch_resume<span class="list">(<span class="keyword">queue</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="dispatch_semaphore">dispatch semaphore</h4><p>NSMutableArray 是非线程安全的，当多个线程同时更改操作会导致程序崩溃.semaphore是一个更小粒度的多线程控制方法, 通过内部计数来控制线程的准入方式.<br>semaphore拥有一个内部计数器来模拟标志, 当计数器为0, 线程等待; 非0时,继续执行.<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_semaphore_t semaphore = dispatch_semaphore_create<span class="list">(<span class="number">1</span>)</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line">dispatch_remaphore_wait<span class="list">(<span class="keyword">semaphore</span>, DISPATCH_TIME_FOREVER)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dispatch_time_t time = dispatch_time(<span class="type">DISPATCH_TIME_NOW</span>, <span class="number">1</span>ull * <span class="type">NSEC_PER_SEC</span>);</span><br><span class="line">long <span class="literal">result</span> = dispatch_semaphore_wait(semaphore, time);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">result</span> == <span class="number">0</span>)&#123;</span><br><span class="line">  //<span class="keyword">do</span> staff, execute a task</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  //wait </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当dispatch_semaphore_wait 返回0时, 可以安全执行一个有并发控制的任务. 当任务执行完毕, 需要调用dispatch_semaphore_signal 增加计数</p>
<p>Adding data to NSMutableArray<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = </span><br><span class="line">    dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">dispatch_semaphore_t</span> semaphore = dispatch_semaphore_create(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">NSMutableArray *arr = [NSMutableArray <span class="keyword">new</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">  dispatch_async(<span class="built_in">queue</span>, ^&#123;</span><br><span class="line">      dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span><br><span class="line">       *  因为semaphore的计数大于1. 在disaptch_semaphore_wait返回后,</span><br><span class="line">       *  计数器被设置为0. 因为只有一个线程可以获准进入,所以此时更新</span><br><span class="line">       *  NSMutableArray是安全的.</span><br><span class="line">       */</span></span><br><span class="line">      [arr addObject:@(i)];</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span><br><span class="line">       * 需要并发控制的任务结束后, 需要调用signal来增加semaphore的计数器,</span><br><span class="line">       * 以便其他等待的线程可以通过dispatch_semaphore_wait, 获得执行权限</span><br><span class="line">       */</span></span><br><span class="line">      dispatch_semaphore_signal(semaphore);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dispatch_release(semaphore);</span><br></pre></td></tr></table></figure></p>
<h4 id="dispatch_once">dispatch_once</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> pred;</span><br><span class="line"><span class="built_in">dispatch_once</span>(&amp;pred, ^&#123;</span><br><span class="line"></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Dispatch_I/O">Dispatch I/O</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">dispatch_queue_t pipe_q =</span><br><span class="line">    dispatch_queue_create<span class="params">(<span class="string">"PipeQ"</span>, NULL)</span>;</span><br><span class="line">pipe_channel = dispatch_io_create<span class="params">(DISPATCH_IO_STREAM, fd, pipe_q, ^<span class="params">(int err)</span>&#123;</span><br><span class="line">  close<span class="params">(fd)</span>;</span><br><span class="line">  &#125;)</span>;</span><br><span class="line"></span><br><span class="line">  out_fd = fdpair[<span class="number">1</span>];</span><br><span class="line">  dispatch_io_set_low_water<span class="params">(pipe_channel, SIZE_MAX)</span>;</span><br><span class="line">  dispatch_io_read<span class="params">(pipe_channel, <span class="number">0</span>, SIZE_MAX, pipe_q, </span><br><span class="line">    ^<span class="params">(bool done, dispatch_data_t pipedata, int error)</span>&#123;</span><br><span class="line">      if<span class="params">(error == <span class="number">0</span>)</span>&#123;</span><br><span class="line">          size_t len = dispatch_data_get_size<span class="params">(pipedata)</span>;</span><br><span class="line">          if<span class="params">(len &gt; <span class="number">0</span>)</span>&#123;</span><br><span class="line">            const char *bytes = NULL;</span><br><span class="line">            char *encode;</span><br><span class="line"></span><br><span class="line">            dispatch_data_t md = dispatch_data_create_map<span class="params">(</span><br><span class="line">              pipedata, <span class="params">(const void **)</span>&amp;bytes, &amp;len)</span>;</span><br><span class="line">            encoded = asl_core_encode_buffer<span class="params">(bytes, len)</span>;</span><br><span class="line">            asl_set<span class="params">(<span class="params">(aslmsg)</span>merged_msg, ASL_KEY_AUX_DATA, encode)</span>;</span><br><span class="line">            free<span class="params">(encoded)</span>;</span><br><span class="line"></span><br><span class="line">            _asl_send_message<span class="params">(NULL, merged_msg, -<span class="number">1</span>, NULL)</span>;</span><br><span class="line">            asl_msg_release<span class="params">(merged_msg)</span>;</span><br><span class="line">            dispatch_release<span class="params">(md)</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      if<span class="params">(done)</span>&#123;</span><br><span class="line">        dispatch_semaphore_signal<span class="params">(semaphore)</span>;</span><br><span class="line">        dispatch_relase<span class="params">(pipe_channel)</span>;</span><br><span class="line">        dispatch_release<span class="params">(pipe_q)</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;)</span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[ios 多线程以及内存管理笔记]]>
    
    </summary>
    
      <category term="BLock" scheme="http://ytlvy.com/tags/BLock/"/>
    
      <category term="GCD" scheme="http://ytlvy.com/tags/GCD/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[冰之魔女]]></title>
    <link href="http://ytlvy.com/2015/06/07/ice-girl/"/>
    <id>http://ytlvy.com/2015/06/07/ice-girl/</id>
    <published>2015-06-06T17:41:14.000Z</published>
    <updated>2015-06-06T17:47:33.000Z</updated>
    <content type="html"><![CDATA[<h2 id="冰之魔女">冰之魔女</h2>]]></content>
    <summary type="html">
    <![CDATA[冰之魔女]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="default" scheme="http://ytlvy.com/categories/default/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS NSPredicate]]></title>
    <link href="http://ytlvy.com/2015/06/06/ios-nspredicate/"/>
    <id>http://ytlvy.com/2015/06/06/ios-nspredicate/</id>
    <published>2015-06-06T12:56:36.000Z</published>
    <updated>2015-06-06T16:04:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="NSPredicate">NSPredicate</h3><p>NSPredicate is a Foundation class that specifies how data should be fetched or filtered.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSPredicate</span> *bobPredicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"firstName = 'Bob'"</span>];</span><br><span class="line"><span class="built_in">NSPredicate</span> *thirtiesPredicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"age &gt;= 30"</span>];</span><br><span class="line"></span><br><span class="line">[people filterdArrayUsingPredicate:bobPredicate];</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="Predicate_Syntax">Predicate Syntax</h4><ol>
<li>%@ is a var arg substitution for an object value—often a string, number, or date</li>
<li>%K is a var arg substitution for a key path</li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSPredicate <span class="variable">*ageIs33Predicate</span> = [NSPredicate predicateWithFormat: <span class="variable">@"</span><span class="variable">%K</span> = <span class="variable">%@</span><span class="string">", @"</span>age<span class="string">", 33]</span></span><br></pre></td></tr></table></figure>
<ol>
<li>$VARIABLE_NAME is a value that can be substituted<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NSPredicate *namesBeginningWithLetterPredicate = </span><br><span class="line">    [NSPredicate <span class="string">predicateWithFormat:</span> @<span class="string">"(firstName BEGINSWITH[cd] $letter) OR (lastName BEGINWITH[cd] $letter)"</span>];</span><br><span class="line"></span><br><span class="line">NSLog(@<span class="string">"'A' Names: %@"</span>, </span><br><span class="line">            [people <span class="string">filterWithPredicate:</span></span><br><span class="line">                [namesBeginningWithLetterPredicate <span class="string">predicateWithSubstitutionVariables:</span>@&#123;@<span class="string">"letter"</span> : @<span class="string">"A"</span>&#125;]]);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Basic_Comparisons">Basic Comparisons</h4><ol>
<li>=, ==:   equal </li>
<li><blockquote>
<p>=, =&gt;:  greater than or equal</p>
</blockquote>
</li>
<li>&lt;=, =&lt;:  less than or equal</li>
<li><blockquote>
<p>: T     greater t.</p>
</blockquote>
</li>
<li>&lt;:       less than.</li>
<li>!=, &lt;&gt;:  not equal to</li>
<li>BETWEEN  eg: 1 BETWEEN { 0 , 33 }  $INPUT BETWEEN { $LOWER, $UPPER }</li>
</ol>
<h4 id="Basic_Compound_Predicates">Basic Compound Predicates</h4><ol>
<li>AND, &amp;&amp;</li>
<li>OR, ||</li>
<li>NOT, !</li>
</ol>
<h4 id="String_Comparisons">String Comparisons</h4><p>String comparisons are case and diacritic sensitive. by default. One can modify an operator using the key characters c and d within square braces to specify case and diacritic insensitivity respectively. eg: firstName BEGINSWITH[cd] $FIRST_NAME.</p>
<ol>
<li>BEGINSWITH</li>
<li>CONTAINS</li>
<li>ENDSWITH</li>
<li>LIKE         ? and * are allowed as wildcard characters</li>
<li>MATCHES      regex-style </li>
</ol>
<h3 id="Aggregate_Operations">Aggregate Operations</h3><h4 id="Relational_Operations">Relational Operations</h4><ol>
<li>ANY, SOME            eg: ANY children.age &lt; 18</li>
<li>ALL                  eg: ALL children.age &lt; 18</li>
<li>NONE                 eg: NONE children.age &lt; 18</li>
<li>IN                   eg: name IN {‘Ben’, ‘Melissa’, ‘Nick’ }</li>
</ol>
<h4 id="Array_Operations">Array Operations</h4><ol>
<li>array[index]         Specifies the element at the specified index in array</li>
<li>array[FIRST]</li>
<li>array[LAST]</li>
<li>array[SIZE]</li>
<li>Boolean</li>
<li>TRUEPREDICATE        A predicate that always evaluates to TRUE</li>
<li>FALSEPREDICATE       A predicate that always evaluates to FALSE</li>
</ol>
<h4 id="NSCompoundPredicate">NSCompoundPredicate</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="collection">[NSCompoundPredicate andPredicateWithSubpredicate:@<span class="collection">[</span><br><span class="line">    <span class="collection">[NSPredicate predicateWithFormat: @<span class="string">"age &gt; 25"</span>]</span>,</span><br><span class="line">    <span class="collection">[NSPredicate predicateWithFormat: @<span class="string">"firstName = %@"</span>, @<span class="string">"Quentin"</span>]</span></span><br><span class="line">    ]</span>]</span><span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="collection">[NSPredicate predicateWithFormat: @<span class="string">"(age &gt; 25) AND (firstName = %@)"</span>, @<span class="string">"Quentin"</span>]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h4 id="NSComparisonPredicate">NSComparisonPredicate</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSPredicate</span> *)predicateWithLeftExpression:</span><br><span class="line">(<span class="built_in">NSExpression</span> *)lhs</span><br><span class="line">rightExpression:(<span class="built_in">NSExpression</span> *)rhs</span><br><span class="line">       modifier:(<span class="built_in">NSComparisonPredicateModifier</span>)modifier</span><br><span class="line">           type:(<span class="built_in">NSPredicateOperatorType</span>)type</span><br><span class="line">        options:(<span class="built_in">NSUInteger</span>)options</span><br></pre></td></tr></table></figure>
<ul>
<li>lhs: The left hand expression.</li>
<li>rhs: The right hand expression.</li>
<li>modifier: The modifier to apply. (ANY or ALL)</li>
<li>type: The predicate operator type.</li>
<li>options: The options to apply. For no options, pass 0.</li>
</ul>
<h4 id="Block_Predicates">Block Predicates</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSPredicate</span> *shortNamePredicate = </span><br><span class="line">    [<span class="built_in">NSPredicate</span> predicateWithBlock: ^<span class="built_in">BOOL</span>(<span class="keyword">id</span> evaluatedObject, <span class="built_in">NSDictionary</span> *bindings)&#123;</span><br><span class="line">        <span class="keyword">return</span> [[evaluatedObject firstName] length] &lt;= <span class="number">5</span>;</span><br><span class="line">    &#125; ]</span><br></pre></td></tr></table></figure>
<p><strong><em>NSPredicates created with predicateWithBlock: cannot be used for Core Data fetch requests backed by a SQLite store</em></strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="NSPredicate">NSPredicate</h3><p>NSPredicate is a Foundation class that specifies how data should be fetched or filtered.<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSPredicate</span> *bobPredicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"firstName = 'Bob'"</span>];</span><br><span class="line"><span class="built_in">NSPredicate</span> *thirtiesPredicate = [<span class="built_in">NSPredicate</span> predicateWithFormat:<span class="string">@"age &gt;= 30"</span>];</span><br><span class="line"></span><br><span class="line">[people filterdArrayUsingPredicate:bobPredicate];</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS NSSortDescriptor]]></title>
    <link href="http://ytlvy.com/2015/06/06/ios-nssortdescriptor/"/>
    <id>http://ytlvy.com/2015/06/06/ios-nssortdescriptor/</id>
    <published>2015-06-06T12:54:35.000Z</published>
    <updated>2015-06-06T16:19:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="NSSortDescriptor">NSSortDescriptor</h2><p>NSSortDescriptor objects are constructed with the following parameters:</p>
<ol>
<li>key: for a given collection, the key for the corresponding value to be sorted on for each object in the collection</li>
<li>ascending: a boolean specifying whether the collection should be sorted in ascending (YES) or descending (NO) order</li>
<li>a selector (SEL) or comparator (NSComparator)</li>
</ol>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSArray</span> *firstNames = @[<span class="string">@"Alice"</span>, <span class="string">@"Bob"</span>, <span class="string">@"Charlie"</span>, <span class="string">@"Quentin"</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *lastNames = @[<span class="string">@"Smith"</span>, <span class="string">@"Jones"</span>, <span class="string">@"Smith"</span>, <span class="string">@"Alberts"</span>];</span><br><span class="line"><span class="built_in">NSArray</span> *ages = @[@<span class="number">24</span>, @<span class="number">27</span>, @<span class="number">33</span>, @<span class="number">31</span>];</span><br><span class="line"><span class="built_in">NSMutableArray</span> *people = [<span class="built_in">NSMutableArray</span> array];</span><br><span class="line"></span><br><span class="line">[firstNames enumerateObjectsUsingBlock: ^(<span class="keyword">id</span> obj, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</span><br><span class="line">    Person *person = [[Person alloc] init];</span><br><span class="line">    person<span class="variable">.firstName</span> = [firstNames objectAtIndex:idx];</span><br><span class="line">    person<span class="variable">.lastName</span> = [lastNames objectAtIndex:idx];</span><br><span class="line">    person<span class="variable">.age</span> = [ages objectAtIndex:idx];</span><br><span class="line">    [people addObject:person];</span><br><span class="line">&#125;];</span><br><span class="line"></span><br><span class="line"><span class="built_in">NSSortDescriptor</span> *firstNameSortDescriptor = </span><br><span class="line">    [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"firstName"</span></span><br><span class="line">                                        ascending: <span class="literal">YES</span></span><br><span class="line">                                        selector:<span class="keyword">@selector</span>(localizedStandardCompare:)];</span><br><span class="line"><span class="built_in">NSSortDescriptor</span> *lastNameSortDescriptor =</span><br><span class="line">    [<span class="built_in">NSSortDescriptor</span> sortDescriptorWithKey:<span class="string">@"lastName"</span></span><br><span class="line">                                    ascending: <span class="literal">YES</span></span><br><span class="line">                                    selector: <span class="keyword">@selector</span>(localizedStandardCompare:)];</span><br><span class="line">[people sortedArrayUsingDescriptor:@[firstNameSortDescriptor, lastNameSortDescriptor]];</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="NSSortDescriptor">NSSortDescriptor</h2><p>NSSortDescriptor objects are constructed with the following parameters:</p>
<ol>
<li>key: for a given collection, the key for the corresponding value to be sorted on for each object in the collection</li>
<li>ascending: a boolean specifying whether the collection should be sorted in ascending (YES) or descending (NO) order</li>
<li>a selector (SEL) or comparator (NSComparator)</li>
</ol>]]>
    
    </summary>
    
      <category term="ios" scheme="http://ytlvy.com/tags/ios/"/>
    
      <category term="sort" scheme="http://ytlvy.com/tags/sort/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IOS Key-Value Coding &amp;&amp; Collection Operators]]></title>
    <link href="http://ytlvy.com/2015/06/06/ios-key-value-coding-and-and-collection-operators/"/>
    <id>http://ytlvy.com/2015/06/06/ios-key-value-coding-and-and-collection-operators/</id>
    <published>2015-06-06T12:52:04.000Z</published>
    <updated>2015-06-06T16:05:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Key-Value_Coding_&amp;&amp;_Collection_Operators">Key-Value Coding &amp;&amp; Collection Operators</h2><blockquote>
<p>KVC Collection Operators allows actions to be performed on a collection using key path notation in valueForKeyPath:. @’s in a key path denote an aggregate function whose result can be returned or chained, just like any other key path.</p>
</blockquote>
<h3 id="Simple_Collection_Operators">Simple Collection Operators</h3><ol>
<li>@count: Returns the number of objects in the collection.</li>
<li>@sum: Converts each object in the collection to a double, computes the sum, and returns the sum.</li>
<li>@avg: Takes the double value of each object in the collection, and returns the average value.</li>
<li>@max: Determines the maximum value using compare:. Objects must support mutual comparison for this to work.</li>
<li>@min: Same as @max, but returns the minimum value.</li>
</ol>
<a id="more"></a>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[products <span class="string">valueForKeyPath:</span>@<span class="string">"@count"</span>]; <span class="comment">// 4</span></span><br><span class="line">[products <span class="string">valueForKeyPath:</span>@<span class="string">"@sum.price"</span>]; <span class="comment">// 3526.00</span></span><br><span class="line">[products <span class="string">valueForKeyPath:</span>@<span class="string">"@avg.price"</span>]; <span class="comment">// 881.50</span></span><br><span class="line">[products <span class="string">valueForKeyPath:</span>@<span class="string">"@max.price"</span>]; <span class="comment">// 1699.00</span></span><br><span class="line">[products <span class="string">valueForKeyPath:</span>@<span class="string">"@min.launchedOn"</span>];</span><br></pre></td></tr></table></figure>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">To <span class="built_in">get</span> <span class="operator">the</span> aggregate <span class="built_in">value</span> <span class="operator">of</span> <span class="operator">an</span> array <span class="operator">or</span> <span class="built_in">set</span> <span class="operator">of</span> NSNumbers, simply pass self <span class="keyword">as</span> <span class="operator">the</span> key path <span class="keyword">after</span> <span class="operator">the</span> operator,</span><br><span class="line">e.g. [@[@(<span class="number">1</span>), @(<span class="number">2</span>), @(<span class="number">3</span>)] valueForKeyPath:@<span class="string">"@max.self "</span>]</span><br></pre></td></tr></table></figure>
<h3 id="Object_Operators">Object Operators</h3><p>@unionOfObjects / @distinctUnionOfObjects</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">NSArray</span> *<span class="atom">inventory</span> = @[<span class="atom">iPhone5</span>, <span class="atom">iPhone5</span>, <span class="atom">iPhone5</span>, <span class="atom">iPadMini</span>, <span class="atom">macBookPro</span>, <span class="atom">macBookPro</span>];</span><br><span class="line">[<span class="atom">inventory</span> <span class="atom">valueForKeyPath</span>:@<span class="string">"@unionOfObjects.name"</span>];</span><br><span class="line"></span><br><span class="line">[<span class="atom">inventory</span> <span class="atom">valueForKeyPath</span>:@<span class="string">"@distinctUnionOfObjects.name"</span>];</span><br><span class="line">// <span class="string">"iPhone 5"</span>, <span class="string">"iPad mini"</span>, <span class="string">"MacBook Pro"</span></span><br></pre></td></tr></table></figure>
<h3 id="Array_and_Set_Operators">Array and Set Operators</h3><ol>
<li>@distinctUnionOfArrays / @unionOfArrays</li>
<li>@distinctUnionOfSets / </li>
</ol>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">telecomStoreInventory = <span class="variable">@[</span>iPhone5, iPhone5, iPadMini];</span><br><span class="line"></span><br><span class="line">[<span class="variable">@[</span>appleStoreInventory, telecomStoreInventory] valueForKeyPath:<span class="variable">@"</span><span class="variable">@distinctUnionOfArrays</span>.name<span class="string">"];</span></span><br></pre></td></tr></table></figure>
<p>KVC Collection Operators are a must-know for anyone wanting to save a few extra lines of code and look cool in the process.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Key-Value_Coding_&amp;&amp;_Collection_Operators">Key-Value Coding &amp;&amp; Collection Operators</h2><blockquote>
<p>KVC Collection Operators allows actions to be performed on a collection using key path notation in valueForKeyPath:. @’s in a key path denote an aggregate function whose result can be returned or chained, just like any other key path.</p>
</blockquote>
<h3 id="Simple_Collection_Operators">Simple Collection Operators</h3><ol>
<li>@count: Returns the number of objects in the collection.</li>
<li>@sum: Converts each object in the collection to a double, computes the sum, and returns the sum.</li>
<li>@avg: Takes the double value of each object in the collection, and returns the average value.</li>
<li>@max: Determines the maximum value using compare:. Objects must support mutual comparison for this to work.</li>
<li>@min: Same as @max, but returns the minimum value.</li>
</ol>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C Storage Classes]]></title>
    <link href="http://ytlvy.com/2015/06/06/c-storage-classes/"/>
    <id>http://ytlvy.com/2015/06/06/c-storage-classes/</id>
    <published>2015-06-06T12:49:35.000Z</published>
    <updated>2015-06-06T16:05:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="C_Storage_Classes">C Storage Classes</h2><p>There are 4 storage classes in C: auto, register, static &amp; extern.</p>
<h3 id="static">static</h3><p>When it comes to storage classes, static means one of two things.</p>
<ol>
<li>A static variable inside a method or function retains its value between invocations.</li>
<li>A static variable declared globally can called by any function or method, so long as those functions appear in the same file as the static variable. The same goes for static functions.</li>
</ol>
<h3 id="Static_Singletons">Static Singletons</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)sharedInstance&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">id</span> _sharedInstance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    dispath_once(&amp;onceToken, ^&#123;</span><br><span class="line">        _sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">        <span class="comment">//any config</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="extern">extern</h3><p>Whereas static makes functions and variables globally visible within a particular file, extern makes them visible globally to all files.</p>
<h4 id="Global_String_Constants">Global String Constants</h4><p>Any time your application uses a string constant in a public interface, it should be declared as an external string constant. This is especially true of NSNotification names, NSError domains, and keys in userInfo dictionaries.<br>Declare an extern NSString <em> const in a public header, and define that NSString </em> const in the implementation:</p>
<p>AppConstants.h<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> kAppErrorDomain;</span><br></pre></td></tr></table></figure></p>
<p>AppConstants.m<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> * <span class="keyword">const</span> kAppErrorDomain = <span class="string">@"com.example.yourapp.error"</span>;</span><br></pre></td></tr></table></figure></p>
<h4 id="Public_Functions">Public Functions</h4><p>TransactionStateMachine.h<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="built_in">NS_ENUM</span>(<span class="built_in">NSUInteger</span>, TransactionState) &#123;</span><br><span class="line">    TransactionOpened,</span><br><span class="line">    TransactionPending,</span><br><span class="line">    TransactionClosed,</span><br><span class="line">&#125;!;</span><br><span class="line"><span class="keyword">extern</span> <span class="built_in">NSString</span> * <span class="built_in">NSStringFromTransactionState</span>(TransactionState state);</span><br></pre></td></tr></table></figure></p>
<p>TransactionStateMachine.m<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSString</span> *</span><br><span class="line">  <span class="built_in">NSStringFromTransactionState</span>(TransactionState state) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> TransactionOpened: <span class="keyword">return</span> <span class="string">@"Opened"</span></span><br><span class="line">    <span class="keyword">case</span> TransactionPending: <span class="keyword">return</span> <span class="string">@"Pending"</span>;</span><br><span class="line">    <span class="keyword">case</span> TransactionClosed: <span class="keyword">return</span> <span class="string">@"Closed"</span>;</span><br><span class="line">    <span class="keyword">default</span>: <span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="C_Storage_Classes">C Storage Classes</h2><p>There are 4 storage classes in C: auto, register, static &amp; extern.</p>
<h3 id="static">static</h3><p>When it comes to storage classes, static means one of two things.</p>
<ol>
<li>A static variable inside a method or function retains its value between invocations.</li>
<li>A static variable declared globally can called by any function or method, so long as those functions appear in the same file as the static variable. The same goes for static functions.</li>
</ol>
<h3 id="Static_Singletons">Static Singletons</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)sharedInstance&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">id</span> _sharedInstance = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    dispath_once(&amp;onceToken, ^&#123;</span><br><span class="line">        _sharedInstance = [[<span class="keyword">self</span> alloc] init];</span><br><span class="line">        <span class="comment">//any config</span></span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="keyword">return</span> _sharedInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="C" scheme="http://ytlvy.com/categories/C/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios encodings]]></title>
    <link href="http://ytlvy.com/2015/06/06/ios-encodings/"/>
    <id>http://ytlvy.com/2015/06/06/ios-encodings/</id>
    <published>2015-06-06T12:48:05.000Z</published>
    <updated>2015-06-06T16:05:15.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Type_Encodings">Type Encodings</h2><table>
<thead>
<tr>
<th>Code</th>
<th>Meaning   </th>
</tr>
</thead>
<tbody>
<tr>
<td> c</td>
<td>A char                                           </td>
</tr>
<tr>
<td> i</td>
<td>An int                                           </td>
</tr>
<tr>
<td> s</td>
<td>A short                                          </td>
</tr>
<tr>
<td> l</td>
<td>A longl is treated as a 32-bit quantity on 64-bit programs.</td>
</tr>
<tr>
<td> q</td>
<td>A long long                                      </td>
</tr>
<tr>
<td> C</td>
<td>An unsigned char                                 </td>
</tr>
<tr>
<td> I</td>
<td>An unsigned int                                  </td>
</tr>
<tr>
<td> S</td>
<td>An unsigned short                                </td>
</tr>
<tr>
<td> L</td>
<td>An unsigned long                                 </td>
</tr>
<tr>
<td> Q</td>
<td>An unsigned long long                            </td>
</tr>
<tr>
<td> f</td>
<td>A float                                          </td>
</tr>
<tr>
<td> d</td>
<td>A double                                         </td>
</tr>
<tr>
<td> B</td>
<td>A C++ bool or a C99 _Bool                        </td>
</tr>
<tr>
<td> v</td>
<td>A void                                           </td>
</tr>
<tr>
<td> *</td>
<td>A character string (char *)                      </td>
</tr>
<tr>
<td> @</td>
<td>An object (whether statically typed or typed id) </td>
</tr>
<tr>
<td> #</td>
<td>A class object (Class)                           </td>
</tr>
<tr>
<td> :</td>
<td>A method selector (SEL)                          </td>
</tr>
<tr>
<td> [array type]</td>
<td>An array                                         </td>
</tr>
<tr>
<td> {name=type…}</td>
<td>A structure                                      </td>
</tr>
<tr>
<td> (name=type…)</td>
<td>A union                                          </td>
</tr>
<tr>
<td> bnum</td>
<td>A bit field of num bits                          </td>
</tr>
<tr>
<td> ^type</td>
<td>A pointer to type                                </td>
</tr>
<tr>
<td> ?</td>
<td>An unknown type (used for function pointers)     </td>
</tr>
</tbody>
</table>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"int         : %s"</span>, @encode(<span class="keyword">int</span>));                       <span class="comment">//i</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"float       : %s"</span>, @encode(<span class="keyword">float</span>));                     <span class="comment">//f</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"float *     : %s"</span>, @encode(<span class="keyword">float</span>*));                    <span class="comment">//^f</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"char        : %s"</span>, @encode(<span class="keyword">char</span>));                      <span class="comment">//c</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"char *      : %s"</span>, @encode(<span class="keyword">char</span> *));                    <span class="comment">//*</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"BOOL        : %s"</span>, @encode(<span class="built_in">BOOL</span>));                      <span class="comment">//c</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"void        : %s"</span>, @encode(<span class="keyword">void</span>));                      <span class="comment">//v</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"void *      : %s"</span>, @encode(<span class="keyword">void</span> *));                    <span class="comment">//^v</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"NSObject *  : %s"</span>, @encode(<span class="built_in">NSObject</span> *));                <span class="comment">//@</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"NSObject    : %s"</span>, @encode(<span class="built_in">NSObject</span>));                  <span class="comment">//#</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"[NSObject class]  : %s"</span>, @encode(<span class="keyword">typeof</span>([<span class="built_in">NSObject</span> class])));  <span class="comment">//&#123;NSObject=#&#125;</span></span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"NSError **  : %s"</span>, @encode(<span class="keyword">typeof</span>(<span class="built_in">NSError</span> **)));        <span class="comment">//^@</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> intArray[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"int[]       : %s"</span>, @encode(<span class="keyword">typeof</span>(intArray)));          <span class="comment">//[5i]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> floatArray[<span class="number">3</span>] = &#123;<span class="number">0.1</span>f, <span class="number">0.2</span>f, <span class="number">0.3</span>f&#125;; </span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"float[]     : %s"</span>, @encode(<span class="keyword">typeof</span>(floatArray)));        <span class="comment">//[3f]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _<span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">short</span> a;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> b;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> c;</span><br><span class="line">&#125; Struct;</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"struct     : %s"</span>, @encode(<span class="keyword">typeof</span>(Struct)));             <span class="comment">//&#123;_struct=sqQ&#125;</span></span><br></pre></td></tr></table></figure>
<p>There are some interesting takeaways from this:</p>
<ol>
<li><p>Whereas the standard encoding for pointers is a preceding ^, char <em> gets its own code: </em>. This makes sense conceptually, since C strings are thought to be entities in and of themselves, rather than a pointer to something else.</p>
</li>
<li><p>BOOL is c, rather than i, as one might expect. Reason being, char is smaller than an int, and when Objective-C was originally designed in the 80’s, bits (much like the US Dollar) were more valuable than they are today.</p>
</li>
<li><p>Passing NSObject directly yields #. However, passing [NSObject class] yields a struct named NSObject with a single class field. That is, of course, the isa field, which all NSObject instances have to signify their type.</p>
</li>
</ol>
<h2 id="Method_Encodings">Method Encodings</h2><p>type qualifiers for methods declared in a protocol<br> Code    | Meaning<br> ————|————<br> r       | const<br> n       | in<br> N       | inout<br> o       | out<br> O       | bycopy<br> R       | byref<br> V       | oneway   </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Type_Encodings">Type Encodings</h2><table>
<thead>
<tr>
<th>Code</th>
<th>Meaning   </th>
</tr>
</thead>
<tbody>
<tr>
<td> c</td>
<td>A char                                           </td>
</tr>
<tr>
<td> i</td>
<td>An int                                           </td>
</tr>
<tr>
<td> s</td>
<td>A short                                          </td>
</tr>
<tr>
<td> l</td>
<td>A longl is treated as a 32-bit quantity on 64-bit programs.</td>
</tr>
<tr>
<td> q</td>
<td>A long long                                      </td>
</tr>
<tr>
<td> C</td>
<td>An unsigned char                                 </td>
</tr>
<tr>
<td> I</td>
<td>An unsigned int                                  </td>
</tr>
<tr>
<td> S</td>
<td>An unsigned short                                </td>
</tr>
<tr>
<td> L</td>
<td>An unsigned long                                 </td>
</tr>
<tr>
<td> Q</td>
<td>An unsigned long long                            </td>
</tr>
<tr>
<td> f</td>
<td>A float                                          </td>
</tr>
<tr>
<td> d</td>
<td>A double                                         </td>
</tr>
<tr>
<td> B</td>
<td>A C++ bool or a C99 _Bool                        </td>
</tr>
<tr>
<td> v</td>
<td>A void                                           </td>
</tr>
<tr>
<td> *</td>
<td>A character string (char *)                      </td>
</tr>
<tr>
<td> @</td>
<td>An object (whether statically typed or typed id) </td>
</tr>
<tr>
<td> #</td>
<td>A class object (Class)                           </td>
</tr>
<tr>
<td> :</td>
<td>A method selector (SEL)                          </td>
</tr>
<tr>
<td> [array type]</td>
<td>An array                                         </td>
</tr>
<tr>
<td> {name=type…}</td>
<td>A structure                                      </td>
</tr>
<tr>
<td> (name=type…)</td>
<td>A union                                          </td>
</tr>
<tr>
<td> bnum</td>
<td>A bit field of num bits                          </td>
</tr>
<tr>
<td> ^type</td>
<td>A pointer to type                                </td>
</tr>
<tr>
<td> ?</td>
<td>An unknown type (used for function pointers)     </td>
</tr>
</tbody>
</table>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[octopress tutorials]]></title>
    <link href="http://ytlvy.com/2015/06/06/octopress-tutorials/"/>
    <id>http://ytlvy.com/2015/06/06/octopress-tutorials/</id>
    <published>2015-06-06T06:05:03.000Z</published>
    <updated>2015-06-06T16:17:50.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Octopress">Octopress</h2><h3 id="官方文档">官方文档</h3><p><a href="http://octopress.org/docs/setup/" target="_blank" rel="external">官方文档</a></p>
<h3 id="准备环境">准备环境</h3><p>需要ruby1.9以上,可以选择用rbenv来安装多版本ruby.</p>
<h4 id="安装rbenv">安装rbenv</h4> <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br><span class="line"><span class="keyword">brew </span>install rbenv</span><br><span class="line"><span class="keyword">brew </span>install ruby-<span class="keyword">build</span><br><span class="line"></span></span><br><span class="line"><span class="label">rbenv</span> install <span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span>-<span class="literal">p0</span></span><br><span class="line"><span class="label">rbenv</span> local <span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span>-<span class="literal">p0</span></span><br><span class="line"><span class="label">rbenv</span> rehash</span><br></pre></td></tr></table></figure>
<p>你有可能需要安装老版本的GCC编译器才能顺利安装Ruby 1.9.3:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>tap homebrew/dupes</span><br><span class="line"><span class="keyword">brew </span>install apple-gcc42</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="安装Octopress">安装Octopress</h3><h4 id="下载代码">下载代码</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">git:</span><span class="comment">//github.com/imathis/octopress.git octopress</span></span><br></pre></td></tr></table></figure>
<p>修改Gemfile源为:<a href="http://ruby.taobao.org" target="_blank" rel="external">http://ruby.taobao.org</a><br>修改系统gem源<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gem sources -l</span><br><span class="line">gem sources -r <span class="keyword">https</span>://rubygems.org    <span class="comment">#删除 http://rubygems.org</span></span><br><span class="line">gem sources -<span class="operator">a</span> <span class="keyword">http</span>://ruby.taobao.org  <span class="comment">#添加 http://ruby.taobao.org</span></span><br></pre></td></tr></table></figure></p>
<h4 id="安装依赖库">安装依赖库</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">cd</span> octopress</span><br><span class="line"><span class="label">gem</span> install <span class="keyword">bundler</span><br><span class="line"></span><span class="keyword">bundle </span>install</span><br></pre></td></tr></table></figure>
<p>如使用rbenv<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">gem</span> install <span class="keyword">bundler</span><br><span class="line"></span><span class="label">rbenv</span> rehash</span><br><span class="line"><span class="keyword">bundle </span>install</span><br></pre></td></tr></table></figure></p>
<h4 id="安装默认主题">安装默认主题</h4><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake <span class="keyword">install</span></span><br></pre></td></tr></table></figure>
<h4 id="新文章">新文章</h4><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rake <span class="keyword">new</span><span class="number">_p</span>ost[<span class="string">"Welcome"</span>]</span><br></pre></td></tr></table></figure>
<h4 id="编译预览">编译预览</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rake</span> generate </span><br><span class="line">rake preview</span><br></pre></td></tr></table></figure>
<h3 id="部署到github">部署到github</h3><h4 id="github_创建同名仓库">github 创建同名仓库</h4><h4 id="本地设置">本地设置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">rake</span> setup_github_pages</span><br></pre></td></tr></table></figure>
<p>根据提示, 输入项目路径: git@github.com:superman/super.github.io.git</p>
<h4 id="同步代码到github">同步代码到github</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">git</span> <span class="keyword">add </span>.</span><br><span class="line"><span class="label">git</span> commit -m <span class="string">"first commit"</span></span><br><span class="line"><span class="label">git</span> <span class="keyword">push </span>origin source   </span><br><span class="line"><span class="label">rake</span> deploy <span class="label">#rake</span> deploy 会直接 <span class="keyword">push </span>Octopress目录中 master 分支</span><br></pre></td></tr></table></figure>
<h3 id="写博流程">写博流程</h3><p>Octopress 博文必须存储在<code>source/_posts</code>目录下，并且需要按照Jekyll的命名规范对文章进行命名：<code>YYYY-MM-DD-post-title.markdown</code>。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。创建和部署博文的一个完整流程：<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>rake new_post[<span class="string">"New Post"</span>]</span><br><span class="line"><span class="variable">$ </span>rake generate</span><br><span class="line"><span class="variable">$ </span>git add .</span><br><span class="line"><span class="variable">$ </span>git commit -am <span class="string">"add comment here."</span> </span><br><span class="line"><span class="variable">$ </span>git push origin source</span><br><span class="line"><span class="variable">$ </span>rake deploy</span><br></pre></td></tr></table></figure></p>
<h3 id="Octopress_DIY_定制">Octopress DIY 定制</h3><h4 id="添加侧边栏文章分类">添加侧边栏文章分类</h4><ol>
<li>在 plugins 目录中创建<code>category_list_tag.rb</code>文件，文件内容如下：<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">module</span> <span class="title">Jekyll</span></span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CategoryListTag</span> <span class="inheritance">&lt; <span class="parent">Liquid::Tag</span></span></span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> </span>render(context)</span><br><span class="line">      html = <span class="string">""</span></span><br><span class="line">      categories = context.registers[<span class="symbol">:site</span>].categories.keys</span><br><span class="line">      categories.sort.each <span class="keyword">do</span> |category|</span><br><span class="line">        posts_in_category = context.registers[<span class="symbol">:site</span>].categories[category].size</span><br><span class="line">        category_dir = context.registers[<span class="symbol">:site</span>].config[<span class="string">'category_dir'</span>]</span><br><span class="line">        category_url = <span class="constant">File</span>.join(category_dir, category.gsub(<span class="regexp">/_|\P&#123;Word&#125;/</span>, <span class="string">'-'</span>).gsub(<span class="regexp">/-&#123;2,&#125;/</span>, <span class="string">'-'</span>).downcase)</span><br><span class="line">        html &lt;&lt; <span class="string">"&lt;li class='category'&gt;&lt;a href='/<span class="subst">#&#123;category_url&#125;</span>/'&gt;<span class="subst">#&#123;category&#125;</span> (<span class="subst">#&#123;posts_in_category&#125;</span>)&lt;/a&gt;&lt;/li&gt;\n"</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      html</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="constant">Liquid::Template</span>.register_tag(<span class="string">'category_list'</span>, <span class="constant">Jekyll::CategoryListTag</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>侧边栏的 DIY 定制一般都是新建一个 xxx.html 文件，放在source<code>\_includes\custom\asides</code>目录下，然后文件模板必须为：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">section</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="title">h1</span>&gt;</span>xxx<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--添加代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后在 <code>_config.yml</code>文件中，找到default_asides数组，添加<code>custom/asides/xxx.html</code> 。侧边栏的排序就根据数组的排序进行 DIY</p>
<ol>
<li><p>把下面内容添加到<code>source/_includes/asides/category_list.html</code>文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">section</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>文章分类<span class="tag">&lt;/<span class="title">h1</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"categories"</span>&gt;</span> </span><br><span class="line">    大括号%   category_list  %大括号 </span><br><span class="line">    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>修改<code>_config.yml</code>文件，用 command+f 找到<code>default_asides</code>，然后添加<code>asides/category_list.html</code>，值之间以逗号隔开。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">default_asides:</span> [asides<span class="regexp">/category_list.html, asides/</span>recent_posts.html]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="添加社会化评论">添加社会化评论</h4><h5 id="Disqus">Disqus</h5><ol>
<li><p>登录 Disqus，创建一个账号，然后点击 <code>Add Disqus to your site</code>，输入 <code>Site name</code> ，例如 boy，然后点击 Finish registration。这里页面会自动生成shortname，记起来，待会有用。</p>
</li>
<li><p>打开_config.yml文件，找到</p>
</li>
</ol>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Disqus Comments </span></span><br><span class="line"><span class="label">disqus_short_name:</span>  </span><br><span class="line"><span class="label">disqus_show_comment_count:</span> false</span><br></pre></td></tr></table></figure>
<p>设置 disqus_short_name 为刚刚创建的 Disqus 生成的 shortname，例如 boy，<br>把<code>false</code>改为<code>true</code>。特别注意，冒号后面要空出一个空格。</p>
<h5 id="多说">多说</h5><p>用微博登陆多说，然后创建个人站点<br>在 _config.yml 中添加</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># duoshuo comments</span></span><br><span class="line"><span class="label">duoshuo_comments:</span> true</span><br><span class="line"><span class="label">duoshuo_short_name:</span> yourshortname</span><br></pre></td></tr></table></figure>
<p>在 <code>source/_layouts/post.html</code> 中的 disqus代码<br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><span class="template_tag">&#123;% <span class="keyword">if</span> site.disqus_short_name and page.comments == true %&#125;</span><span class="xml"> </span><br><span class="line">     <span class="tag">&lt;<span class="title">section</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span> <span class="attribute">aria-live</span>=<span class="value">"polite"</span>&gt;</span></span><span class="template_tag">&#123;% <span class="keyword">include</span> post/disqus_thread.html %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br><span class="line">   </span><span class="template_tag">&#123;% <span class="keyword">endif</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure></p>
<p>下方添加多说评论模块</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">if</span> site.duoshuo_short_name and site.duoshuo_comments == true and page.comments == true %&#125;</span><span class="xml"></span><br><span class="line">  <span class="tag">&lt;<span class="title">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Comments<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"comments"</span> <span class="attribute">aria-live</span>=<span class="value">"polite"</span>&gt;</span></span><span class="template_tag">&#123;% <span class="keyword">include</span> post/duoshuo.html %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">section</span>&gt;</span></span><br><span class="line"></span><span class="template_tag">&#123;% <span class="keyword">endif</span> %&#125;</span><span class="xml"></span></span><br></pre></td></tr></table></figure>
<p>在<code>/source/_includes/post/</code>目录下创建<code>duoshuo.html</code>， 添加代码</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ds-thread"</span> <span class="attribute">data-title</span>=<span class="value">"</span></span></span><span class="template_tag">&#123;% <span class="keyword">if</span> site.titlecase %&#125;</span><span class="xml"><span class="tag"><span class="value"></span></span></span><span class="variable">&#123;&#123; page.title | titlecase &#125;&#125;</span><span class="xml"><span class="tag"><span class="value"></span></span></span><span class="template_tag">&#123;% <span class="keyword">else</span> %&#125;</span><span class="xml"><span class="tag"><span class="value"></span></span></span><span class="variable">&#123;&#123; page.title &#125;&#125;</span><span class="xml"><span class="tag"><span class="value"></span></span></span><span class="template_tag">&#123;% <span class="keyword">endif</span> %&#125;</span><span class="xml"><span class="tag"><span class="value">"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="kotlin"></span><br><span class="line">      <span class="variable"><span class="keyword">var</span> duoshuoQuery</span> = &#123;short_name:<span class="string">"</span></span></span><span class="variable">&#123;&#123; site.duoshuo_short_name &#125;&#125;</span><span class="xml"><span class="vim"><span class="string">"&#125;;</span><br><span class="line"></span>      (<span class="function"><span class="keyword">function</span><span class="params">()</span> &#123;</span></span><br><span class="line">        var <span class="keyword">ds</span> = document.createElement(<span class="string">'script'</span>);</span><br><span class="line">        <span class="keyword">ds</span>.<span class="built_in">type</span> = <span class="string">'text/javascript'</span>;<span class="keyword">ds</span>.async = true;</span><br><span class="line">        <span class="keyword">ds</span>.src = <span class="string">'http://static.duoshuo.com/embed.js'</span>;</span><br><span class="line">        <span class="keyword">ds</span>.charset = <span class="string">'UTF-8'</span>;</span><br><span class="line">        (document.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] </span><br><span class="line">        || document.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(<span class="keyword">ds</span>);</span><br><span class="line">      &#125;)();</span><br><span class="line">    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>修改_includes/article.html 文件，在</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> site.disqus_short_name and page.comments != <span class="literal">false</span> and post.comments != <span class="literal">false</span> and site.disqus_show_comment_count == <span class="literal">true</span> %&#125;</span><br><span class="line">        | <span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&#123;% if index %&#125;&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif %&#125;#disqus_thread"</span>&gt;</span>Comments<span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">       &#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>
<p>下面添加如下代码</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;% if site.duoshuo_short_name and page.comments != false and post.comments != false and site.duoshuo_comments == true %&#125;</span><br><span class="line">   &lt;a href="&#123;% if index %&#125;&#123;&#123; root_url &#125;&#125;&#123;&#123; post.url &#125;&#125;&#123;% endif %&#125;#comments"&gt;Comments&lt;/a&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<h4 id="首页样式修改">首页样式修改</h4><p>source/index.html</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- This loops through the paginated posts</span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> paginator.posts %&#125;</span><br><span class="line">  &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"&#123;&#123; post.url &#125;&#125;"</span>&gt;</span>&#123;&#123; post.title &#125;&#125;<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">class</span>=<span class="value">"author"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"date"</span>&gt;</span>&#123;&#123; post.date &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"content"</span>&gt;</span></span><br><span class="line">    &#123;&#123; post.content &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125; --&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改导航栏">修改导航栏</h4><p>导航栏的setting在<code>source\_includes\custom\navigation.html</code></p>
<p>我们可以将 Blog 和 Archives 修改为首页和归档，也可以在此添加一个标签页，此时应使用命令<code>rake new_page[&#39;about&#39;]</code>创建一个页面，页面路径为<code>source\about\index.markdown</code>;</p>
<p>修改后的文件如下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"main-navigation"</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>首页<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/blog/archives"</span>&gt;</span>归档<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"/about"</span>&gt;</span>关于<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="添加个人二维码">添加个人二维码</h4><p>在侧边栏显示二维码，下载<img src="https://github.com/sailor79/Octopress-dynamic-QR-Code-aside" alt="插件">， 将 <code>qrcode.html</code> 放入 <code>source/_includes/custom/asides/</code>中， 在 <code>_config.yml</code> 中<code>default_asides</code> 添加 <code>custom/asides/qrcode.html</code>。 然后打开<code>qrcode.html</code>，做<code>image src</code>的修改.或者将 <code>qrcode.html</code> 代码添加到你想展示的页面的HTML文件中亦可。</p>
<h4 id="添加社会化分享">添加社会化分享</h4><p>在www.addthis.com上获取分享按钮代码，粘贴到 <code>source/_includes/post/sharing.html</code> 中，例如我的代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"sharing"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- AddThis Button BEGIN --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"addthis_toolbox addthis_default_style addthis_32x32_style"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_button_sinaweibo"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_button_facebook"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_button_twitter"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_button_google_plusone_share"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_button_delicious"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_button_compact"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"addthis_counter addthis_bubble_style"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"//s7.addthis.com/js/300/addthis_widget.js#pubid=undefined"</span> <span class="attribute">async</span>=<span class="value">"async"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- AddThis Button END --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h4 id="文章只显示部分正文">文章只显示部分正文</h4><p>在markdown非代码段, 添加<!--more-->, 其后的内容将不会显示，只会显示<!--more-->以上部分，而且会在文章尾部添加 Read On超链接，如果要更改超链接内容，可以在 <code>_config.yml</code>中找到 <code>Read On</code>，然后修改为“<code>继续阅读</code>”。</p>
<h4 id="添加百度统计或CNZZ统计">添加百度统计或CNZZ统计</h4><p>到百度统计或CNZZ统计上注册账号，然后添加脚本文件到<code>source/_includes/after_footer.html</code>文件中</p>
<h4 id="安装第三方主题">安装第三方主题</h4><p>比较常见的有<code>slash</code>主题。Slash is a minimal theme for Octopress.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> octopress</span><br><span class="line">$ git <span class="built_in">clone</span> git://github.com/tommy351/Octopress-Theme-Slash.git .themes/slash</span><br><span class="line">$ rake install[<span class="string">'slash'</span>]</span><br><span class="line">$ rake generate</span><br></pre></td></tr></table></figure>
<p><img src="https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes" alt="第三方主题汇总"></p>
<h3 id="Octopress_优化">Octopress 优化</h3><h4 id="替换Google_JS公共库">替换Google JS公共库</h4><p>Octopress 默认使用的是 Google 的 JS 公共库地址，加载的过程特别的慢。所以我们要把它改为百度的 JS 公共库 ，需要把<code>/source/_includes/head.html</code> 文件中的 Google 公共库地址改为：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//libs.baidu.com/jquery/1.7.2/jquery.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="去掉Twitter">去掉Twitter</h4><p>把在根目录下的 <code>_config.yml</code>文件中 Twitter 内容给注释掉。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Twitter</span><br><span class="line">#twitter_user:</span><br><span class="line">#twitter_tweet_button: <span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<p>把 <code>\source\_includes\after_footer.html</code> 文件中的 Twitter 内容给注释掉：</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!--</span></span><span class="template_tag">&#123;% <span class="keyword">include</span> twitter_sharing.html %&#125;</span><span class="xml"><span class="comment">--&gt;</span></span></span><br></pre></td></tr></table></figure>
<h4 id="删除_Google_font">删除 Google font</h4><p>把在<code>\source\_includes\custom\head.html</code> 中的Google font样式给删除：</p>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;link <span class="variable">href=</span><span class="string">"//fonts.googleapis.com/css?family=PT+Serif:regular,italic,bold,bolditalic"</span> <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">type=</span><span class="string">"text/css"</span>&gt;</span><br><span class="line">&lt;link <span class="variable">href=</span><span class="string">"//fonts.googleapis.com/css?family=PT+Sans:regular,italic,bold,bolditalic"</span> <span class="variable">rel=</span><span class="string">"stylesheet"</span> <span class="variable">type=</span><span class="string">"text/css"</span>&gt;</span><br></pre></td></tr></table></figure>
<h4 id="搜索优化">搜索优化</h4><p>为了让自己搭建的博客更容易被搜索引擎搜到，最好将网站地址提交给各大搜索引擎，下面有两个连接搜集了各个搜索引擎的网站提交入口：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">http:</span><span class="comment">//urlc.cn/tool/addurl.html</span></span><br><span class="line"><span class="string">http:</span><span class="comment">//tool.lusongsong.com/addurl.html</span></span><br></pre></td></tr></table></figure></p>
<p>markdown添加SEO信息</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">tags</span>: <span class="string">[octopress,seo]</span></span><br><span class="line"><span class="attribute">keywords</span>: <span class="string"> octopress, analytics</span></span><br><span class="line"><span class="attribute">description</span>: <span class="string">如何搭建Octopress博客</span></span><br></pre></td></tr></table></figure>
<h3 id="GitCafe_备份">GitCafe 备份</h3><p><img src="https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki" alt="官方教程"></p>
<h4 id="在GitCafe上新建一个博客项目">在GitCafe上新建一个博客项目</h4><p>创建与用户名相同名称的项目</p>
<h4 id="提交到_gitcafe">提交到 gitcafe</h4><p>方法一 设置多个Git Remote源<br>对于Octopress，我们只需要每次提交网站内容时，执行完 rake deploy之后，再执行以下脚本即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> _deploy</span><br><span class="line">git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git &gt;&gt; /dev/null <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">git push -u gitcafe master:gitcafe-pages</span><br></pre></td></tr></table></figure>
<p>方法二 修改Rakefile<br>在Rakefile第269行后增加如下代码, <code>rake deploy</code>自动提交</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system <span class="string">"git remote add gitcafe git@gitcafe.com:tangqiaoboy/tangqiaoboy.git &gt;&gt; /dev/null 2&gt;&amp;1"</span></span><br><span class="line">system <span class="string">"git push -u gitcafe master:gitcafe-pages"</span></span><br></pre></td></tr></table></figure>
<h4 id="gitcafe_设置域名">gitcafe 设置域名</h4><p>GitCafe的自定义域名设置比github要友好得多，它不但提供了图形界面设置，并且支持同时设置多个域名。在<code>项目管理</code>–&gt;<code>域名管理</code>中，我们可以找到相应的设置项，如下所示：<br><img src="http://blog.devtang.com/images/gitcafe-set-domain.jpg" alt=""><br>在设置完之后，我们需要去域名解析的服务商那儿，将对应的域名用A记录类型，解析到117.79.146.98即可</p>
<h4 id="gitcafe">gitcafe</h4><p>270 line</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system <span class="string">"git remote add gitcafe git@gitcafe.com:ytlvy/ytlvy.git &gt;&gt; /dev/null 2&gt;&amp;1"</span></span><br><span class="line">system <span class="string">"git push -u gitcafe master:gitcafe-pages"</span></span><br></pre></td></tr></table></figure>
<h3 id="Bug">Bug</h3><h4 id="当文章有多个标签时候，执行_rake_generate会出现下面情况">当文章有多个标签时候，执行 rake generate会出现下面情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AppledeiMac:octopress apple$ rake generate</span><br><span class="line"><span class="comment">##Generating Site with Jekyll</span></span><br><span class="line">    write <span class="built_in">source</span>/stylesheets/screen.css</span><br><span class="line">Configuration file: /Users/apple/octopress/_config.yml</span><br><span class="line">            Source: <span class="built_in">source</span></span><br><span class="line">       Destination: public</span><br><span class="line">      Generating...</span><br><span class="line">  Liquid Exception: comparison of Array with Array failed <span class="keyword">in</span> _layouts/page.html</span><br></pre></td></tr></table></figure>
<p>解决办法是，在<code>source/_includes/custom/asides/tags.html</code>中把<code>limit</code>参数去掉。 </p>
<h4 id="另外，如果执行_rake_generate出现_Layout_&#39;nil&#39;">另外，如果执行 rake generate出现 <code>Layout &#39;nil&#39;</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Build Warning: Layout <span class="string">'nil'</span> requested <span class="keyword">in</span> tags/octopress/atom.xml does not exist.</span><br><span class="line">     Build Warning: Layout <span class="string">'nil'</span> requested <span class="keyword">in</span> tags/ios/atom.xml does not exist.</span><br></pre></td></tr></table></figure>
<p>修改以下文件中得 <code>layout: nil</code> 为 <code>layout: null</code></p>
<ul>
<li>source/atom.xml</li>
<li>source/robots.txt</li>
<li>source/_includes/custom/category_feed.xml</li>
</ul>
<h4 id="翻页bug">翻页bug</h4><p>修改<code>_config.yml</code> 中 <code>paginate_path</code> 由<code>\post\:num</code> 为 <code>:num</code></p>
<h4 id="typekit_加载403error">typekit 加载403error</h4><p>注册typekit账号, 在typekit中添加你自己域名信息<br><img src="http://help.typekit.com/customer/portal/attachments/62656" alt=""></p>
<p>获得自己的资源代码</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//use.typekit.net/ilg6roq.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="julia"><span class="keyword">try</span>&#123;Typekit.load();&#125;<span class="keyword">catch</span>(<span class="literal">e</span>)&#123;&#125;</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Octopress">Octopress</h2><h3 id="官方文档">官方文档</h3><p><a href="http://octopress.org/docs/setup/">官方文档</a></p>
<h3 id="准备环境">准备环境</h3><p>需要ruby1.9以上,可以选择用rbenv来安装多版本ruby.</p>
<h4 id="安装rbenv">安装rbenv</h4> <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br><span class="line"><span class="keyword">brew </span>install rbenv</span><br><span class="line"><span class="keyword">brew </span>install ruby-<span class="keyword">build</span><br><span class="line"></span></span><br><span class="line"><span class="label">rbenv</span> install <span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span>-<span class="literal">p0</span></span><br><span class="line"><span class="label">rbenv</span> local <span class="number">1</span>.<span class="number">9</span>.<span class="number">3</span>-<span class="literal">p0</span></span><br><span class="line"><span class="label">rbenv</span> rehash</span><br></pre></td></tr></table></figure>
<p>你有可能需要安装老版本的GCC编译器才能顺利安装Ruby 1.9.3:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>tap homebrew/dupes</span><br><span class="line"><span class="keyword">brew </span>install apple-gcc42</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="blog" scheme="http://ytlvy.com/tags/blog/"/>
    
      <category term="Other" scheme="http://ytlvy.com/categories/Other/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios BOOL / bool /   Boolean / NSCFBoolean]]></title>
    <link href="http://ytlvy.com/2015/06/05/ios-bool-slash-bool-slash-boolean-slash-nscfboolean/"/>
    <id>http://ytlvy.com/2015/06/05/ios-bool-slash-bool-slash-boolean-slash-nscfboolean/</id>
    <published>2015-06-05T08:14:34.000Z</published>
    <updated>2015-06-06T14:55:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="BOOL_bool_Boolean_NSCFBoolean">BOOL  bool   Boolean  NSCFBoolean</h2><h3 id="BOOL">BOOL</h3><blockquote>
<p>Objective-C defines BOOL to encode truth value. It is a typedef of a signed char, with the macros YES and NO to represent true and false, respectively.<br>On a 64-bit iOS, BOOL is defined as a bool, rather than signed char, which precludes the runtime from these type conversion errors.<br>0 is considered “false”, while any other value is considered “true”. Because NULL and nil have a value of 0, they are considered “false” as well.</p>
</blockquote>
<a id="more"></a>
<h3 id="The_Wrong_Answer_to_the_Wrong_Question">The Wrong Answer to the Wrong Question</h3><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="function">BOOL <span class="title">different</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>However, because BOOL is typedef ‘d as a signed char on 32- bit architectures, this will not behave as expected:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">different</span><span class="params">(<span class="number">11</span>, <span class="number">10</span>)</span></span> <span class="comment">// YES</span></span><br><span class="line"><span class="function"><span class="title">different</span><span class="params">(<span class="number">10</span>, <span class="number">11</span>)</span></span> <span class="comment">// NO (!)</span></span><br><span class="line"><span class="function"><span class="title">different</span><span class="params">(<span class="number">512</span>, <span class="number">256</span>)</span></span> <span class="comment">// NO (!)</span></span><br></pre></td></tr></table></figure>
<p><strong><em>Deriving truth value directly from an arithmetic operation is never a good idea</em></strong>. Use the == operator, or cast values into booleans with the ! (or !!) operator.</p>
<h3 id="The_Truth_About_NSNumber_and_BOOL">The Truth About NSNumber and BOOL</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NSLog(@<span class="string">"%@"</span>, [@(YES) <span class="class"><span class="keyword">class</span>]);</span></span><br><span class="line"><span class="comment">//__NSCFBoolean</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Name</th>
<th>Type</th>
<th>Header</th>
<th>True</th>
<th>False   </th>
</tr>
</thead>
<tbody>
<tr>
<td>BOOL</td>
<td>signed char / bool</td>
<td>objc.h</td>
<td>YES</td>
<td>NO      </td>
</tr>
<tr>
<td>bool</td>
<td>_Bool (int)</td>
<td>stdbool.h</td>
<td>TRUE</td>
<td>FALSE   </td>
</tr>
<tr>
<td>Boolean</td>
<td>unsigned char</td>
<td>MacTypes.h</td>
<td>TRUE</td>
<td>FALSE   </td>
</tr>
<tr>
<td>NSNumber</td>
<td>__NSCFBoolean</td>
<td>Foundation.h</td>
<td>@(YES)</td>
<td>@(NO)  </td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="BOOL_bool_Boolean_NSCFBoolean">BOOL  bool   Boolean  NSCFBoolean</h2><h3 id="BOOL">BOOL</h3><blockquote>
<p>Objective-C defines BOOL to encode truth value. It is a typedef of a signed char, with the macros YES and NO to represent true and false, respectively.<br>On a 64-bit iOS, BOOL is defined as a bool, rather than signed char, which precludes the runtime from these type conversion errors.<br>0 is considered “false”, while any other value is considered “true”. Because NULL and nil have a value of 0, they are considered “false” as well.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios nil  Nil NULL NSNull]]></title>
    <link href="http://ytlvy.com/2015/06/05/ios-nil-slash-nil-slash-null-slash-nsnull/"/>
    <id>http://ytlvy.com/2015/06/05/ios-nil-slash-nil-slash-null-slash-nsnull/</id>
    <published>2015-06-05T02:23:26.000Z</published>
    <updated>2015-06-06T16:05:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="nil_Nil_NULL_NSNull">nil Nil NULL NSNull</h2><blockquote>
<p>C represents nothing as 0 for primitive values, and NULL for pointers (which is equivalent to 0 in a pointer context)<br>Objective-C builds on C’s representation of nothing by adding nil. nil is an object pointer to nothing. Although semantically distinct from NULL, they are equivalent to one another.<br>On the framework level, Foundation defines the NSNull class, which defines a single class method, +null, which returns a singleton NSNull instance. NSNull is different from nil or NULL, in that it is an actual object, rather than a zero value.<br>Additionally, in Foundation/NSObjCRuntime.h, Nil is defined as a class pointer to nothing. This lesser-known title- case cousin of nil doesn’t show up much very often, but it’s at least worth noting.</p>
</blockquote>
<a id="more"></a>
<h3 id="NSNull_Something_for_Nothing">NSNull Something for Nothing</h3><p>NSNull is used throughout Foundation and other system frameworks to skirt around the limitations of collections like NSArray and NSDictionary, which cannot contain nil values. NSNull effectively boxes NULL or nil values, so that they can be stored in collections:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">NSMutableDictionary</span> *mutableDictionary = [<span class="built_in">NSMutableDictionary</span> dictionary];</span><br><span class="line">mutableDictionary[<span class="string">@"someKey"</span>] = [<span class="built_in">NSNull</span> null];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"Keys: %@"</span>, [mutableDictionary allKeys]);</span><br></pre></td></tr></table></figure>
<h3 id="representing_nothing">representing nothing</h3><table>
<thead>
<tr>
<th style="text-align:left">Symbol</th>
<th style="text-align:left">Value</th>
<th>Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">NULL</td>
<td style="text-align:left">(void *)0</td>
<td>literal null value for C pointers</td>
</tr>
<tr>
<td style="text-align:left">nil</td>
<td style="text-align:left">(id)0</td>
<td>literal null value for Objective-C objects</td>
</tr>
<tr>
<td style="text-align:left">Nil</td>
<td style="text-align:left">(Class)0</td>
<td>literal null value for Objective-C classes</td>
</tr>
<tr>
<td style="text-align:left">NSNull</td>
<td style="text-align:left">[NSNull null]</td>
<td>singleton object used to represent null</td>
</tr>
</tbody>
</table>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="nil_Nil_NULL_NSNull">nil Nil NULL NSNull</h2><blockquote>
<p>C represents nothing as 0 for primitive values, and NULL for pointers (which is equivalent to 0 in a pointer context)<br>Objective-C builds on C’s representation of nothing by adding nil. nil is an object pointer to nothing. Although semantically distinct from NULL, they are equivalent to one another.<br>On the framework level, Foundation defines the NSNull class, which defines a single class method, +null, which returns a singleton NSNull instance. NSNull is different from nil or NULL, in that it is an actual object, rather than a zero value.<br>Additionally, in Foundation/NSObjCRuntime.h, Nil is defined as a class pointer to nothing. This lesser-known title- case cousin of nil doesn’t show up much very often, but it’s at least worth noting.</p>
</blockquote>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios static formatter]]></title>
    <link href="http://ytlvy.com/2015/06/05/ios-static-formatter/"/>
    <id>http://ytlvy.com/2015/06/05/ios-static-formatter/</id>
    <published>2015-06-05T01:47:14.000Z</published>
    <updated>2015-06-06T16:05:28.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Re-Using_Formatter_Instances">Re-Using Formatter Instances</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)fooWithNumber: (<span class="built_in">NSNumber</span> *)num&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">NSNumberFormatter</span> *_formatter = <span class="literal">nil</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    _formatter = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</span><br><span class="line">    [_formatter setNumberStyle: <span class="built_in">NSNumberFormatterDecimalStyle</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *string = [_formatter stringFromNumber: number];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+ (<span class="built_in">NSNumberFormatter</span> *)numberFormatter &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">NSNumberFormatter</span> *_formatter = <span class="literal">nil</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">        _formatter = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</span><br><span class="line">        [_formatter setNumberStyle:</span><br><span class="line">          <span class="built_in">NSNumberFormatterDecimalStyle</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> _formatter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="Re-Using_Formatter_Instances">Re-Using Formatter Instances</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)fooWithNumber: (<span class="built_in">NSNumber</span> *)num&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">NSNumberFormatter</span> *_formatter = <span class="literal">nil</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    _formatter = [[<span class="built_in">NSNumberFormatter</span> alloc] init];</span><br><span class="line">    [_formatter setNumberStyle: <span class="built_in">NSNumberFormatterDecimalStyle</span>];</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSString</span> *string = [_formatter stringFromNumber: number];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios CFStringTransform]]></title>
    <link href="http://ytlvy.com/2015/06/05/ios-cfstringtransform/"/>
    <id>http://ytlvy.com/2015/06/05/ios-cfstringtransform/</id>
    <published>2015-06-05T01:31:29.000Z</published>
    <updated>2015-06-05T01:32:59.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var mutableString = <span class="built_in">NSMutableString</span>(string: <span class="string">"Hello! こんにちは! สวัสดี! مرحبا! 您好!"</span>) as <span class="built_in">CFMutableStringRef</span></span><br><span class="line"><span class="built_in">CFStringTransform</span>(mutableString, <span class="literal">nil</span>, k<span class="built_in">CFStringTransformToLatin</span>, Boolean(<span class="number">0</span>))</span><br><span class="line"><span class="comment">//Hello! こんにちは! สวัสดี! مرحبا! 您好! → Hello! kon'nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">CFStringTransform</span>(mutableString, <span class="literal">nil</span>, k<span class="built_in">CFStringTransformStripCombiningMarks</span>, Boolean(<span class="number">0</span>))</span><br><span class="line"><span class="comment">//Hello! kon'nichiha! s̄wạs̄dī! mrḥbạ! nín hǎo! → Hello! kon'nichiha! swasdi! mrhba! nin hao!</span></span><br><span class="line"></span><br><span class="line">let tokenizer = <span class="built_in">CFStringTokenizerCreate</span>(<span class="literal">nil</span>, mutableString, <span class="built_in">CFRangeMake</span>(<span class="number">0</span>, <span class="built_in">CFStringGetLength</span>(mutableString)), <span class="number">0</span>, <span class="built_in">CFLocaleCopyCurrent</span>())</span><br><span class="line"></span><br><span class="line">var mutableTokens: [String] = []</span><br><span class="line">var type: <span class="built_in">CFStringTokenizerTokenType</span></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    type = <span class="built_in">CFStringTokenizerAdvanceToNextToken</span>(tokenizer)</span><br><span class="line">    let range = <span class="built_in">CFStringTokenizerGetCurrentTokenRange</span>(tokenizer)</span><br><span class="line">    let token = <span class="built_in">CFStringCreateWithSubstring</span>(<span class="literal">nil</span>, mutableString, range) as <span class="built_in">NSString</span></span><br><span class="line">    mutableTokens<span class="variable">.append</span>(token)</span><br><span class="line">&#125; <span class="keyword">while</span> type != <span class="variable">.None</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//(hello, kon'nichiha, swasdi, mrhba, nin, hao)</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span ]]>
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
      <category term="Swift" scheme="http://ytlvy.com/categories/IOS/Swift/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Websocket Tunnel Over Cloud IDE]]></title>
    <link href="http://ytlvy.com/2015/05/31/websocket-tunnel-over-cloud-ide/"/>
    <id>http://ytlvy.com/2015/05/31/websocket-tunnel-over-cloud-ide/</id>
    <published>2015-05-31T01:29:57.000Z</published>
    <updated>2015-06-05T07:25:14.000Z</updated>
    <content type="html"><![CDATA[<h3 id="bbs">bbs</h3><blockquote>
<p><a href="https://groups.google.com/forum/#!forum/go-gost" target="_blank" rel="external">https://groups.google.com/forum/#!forum/go-gost</a></p>
</blockquote>
<h3 id="原理">原理</h3><blockquote>
<p>在平台中建立websocket服务器，将数据通过websocket传输给客户端实现一个tunnel</p>
</blockquote>
<h3 id="cloud_Ide">cloud Ide</h3><ul>
<li>Cloud 9：<a href="https://c9.io" target="_blank" rel="external">https://c9.io</a></li>
<li>Koding：<a href="https://koding.com/" target="_blank" rel="external">https://koding.com/</a></li>
<li>Nitrous：<a href="https://lite.nitrous.io/" target="_blank" rel="external">https://lite.nitrous.io/</a></li>
</ul>
<a id="more"></a>
<h3 id="server">server</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>wget <span class="symbol">https:</span>/<span class="regexp">/bintray.com/artifact</span><span class="regexp">/download/ginuerzh</span><span class="regexp">/gost/gost</span>_1.<span class="number">2_</span>linux_amd64.tar.gz</span><br><span class="line"><span class="variable">$ </span>tar zxf gost_1.<span class="number">2_</span>linux_amd64.tar.gz</span><br><span class="line"><span class="variable">$ </span>cd gost_1.<span class="number">2_</span>linux_amd64/</span><br><span class="line"><span class="variable">$ </span>./gost -ws /<span class="regexp">/no output</span></span><br></pre></td></tr></table></figure>
<h3 id="client">client</h3><blockquote>
<p>wget <a href="https://bintray.com/ginuerzh/gost/gost/" target="_blank" rel="external">https://bintray.com/ginuerzh/gost/gost/</a></p>
</blockquote>
<h4 id="c9">c9</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gost -L :<span class="number">8899</span> -S demo-project-gostwebsocket<span class="class">.c9</span><span class="class">.io</span> -ws</span><br></pre></td></tr></table></figure>
<!-- 
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gost -L :<span class="number">8899</span> -S ytlvy-ytlvy<span class="class">.c9</span><span class="class">.io</span> -ws</span><br><span class="line">./gost -L :<span class="number">8899</span> -S demo-project-ytlvy<span class="class">.c9</span><span class="class">.io</span> -ws  <span class="comment">//now</span></span><br></pre></td></tr></table></figure>
<p>—&gt;</p>
<h4 id="Koding">Koding</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">52<span class="class">.74</span><span class="class">.10</span><span class="class">.210</span><span class="pseudo">:8080</span></span><br></pre></td></tr></table></figure>
<h4 id="nitrousbox">nitrousbox</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gost -L :<span class="number">8899</span> -S appName-appid<span class="class">.apne1</span><span class="class">.nitrousbox</span><span class="class">.com</span>:<span class="number">8080</span> -<span class="tag">p</span> <span class="string">'password'</span> -m `encrypt type` -ws</span><br></pre></td></tr></table></figure>
<!-- 
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./gost -L :<span class="number">8899</span> -S ytlvy-<span class="number">228959</span><span class="class">.apne1</span><span class="class">.nitrousbox</span><span class="class">.com</span>:<span class="number">8080</span> -ws</span><br><span class="line">./gost -L :<span class="number">8899</span> -S ytlvy-<span class="number">228959</span><span class="class">.apne1</span><span class="class">.nitrousbox</span><span class="class">.com</span>:<span class="number">8080</span> -m=rc4-md5 -p=<span class="number">123456</span> -ws</span><br></pre></td></tr></table></figure>
<p>—&gt;</p>
<h3 id="behind_proxy">behind proxy</h3><p>如果处在http代理环境中(代理要支持websocket)，可增加上层代理(-P参数)：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gost -L :<span class="number">8899</span> -S demo-project-gostwebsocket<span class="class">.c9</span><span class="class">.io</span> -P your_proxy_ip:port -ws</span><br></pre></td></tr></table></figure></p>
<h3 id="安全处理">安全处理</h3><blockquote>
<p>更改gost文件名，防止自动重启</p>
</blockquote>
<h3 id="Android设置">Android设置</h3><blockquote>
<p>gost支持作为shadowsocks服务器运行(-ss参数)，这样就可以让android手机通过shadowsocks(影梭)使用代理了。</p>
</blockquote>
<h4 id="相关参数：">相关参数：</h4><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby">ss    开启shadowsocks模式</span><br><span class="line"></span>-<span class="ruby">sm   设置shadowsocks加密方式(默认为rc4-md5)</span><br><span class="line"></span>-<span class="ruby">sp    设置shadowsocks加密密码(默认为ginuerzh<span class="variable">@gmail</span>.com)</span></span><br></pre></td></tr></table></figure>
<p>当无-ss参数时，-sm, -sp参数无效。<br>以上三个参数对服务端无效。</p>
<h4 id="相关命令：">相关命令：</h4><h5 id="服务端：">服务端：</h5><blockquote>
<p>无需特殊设置<br>shadowsocks模式只与客户端有关，与服务端无关。</p>
</blockquote>
<h5 id="客户端：">客户端：</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./gost -L :<span class="number">8899</span> -S demo-project-gostwebsocket<span class="class">.c9</span><span class="class">.io</span> -ws -sm=rc4-md5 -sp=ginuerzh@gmail<span class="class">.com</span> -ss</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在手机的shadowsocks软件中设置好服务器(运行gost电脑的IP)，端口(8899)，加密方法和密码就可以使用了。<br>注：shadowsocks模式与正常模式是不兼容的，当作为shadowsocks模式使用时(有-ss参数)，浏览器不能使用</p>
</blockquote>
<h3 id="encryt_type">encryt type</h3><blockquote>
<p>websocket加密功能需要客户端和服务端gost版本都为1.2版及以上</p>
</blockquote>
<h4 id="目前支持的加密方法">目前支持的加密方法</h4><blockquote>
<p>tls, aes-128-cfb, aes-192-cfb, aes-256-cfb, des-cfb, bf-cfb, cast5-cfb, rc4-md5, rc4, table</p>
</blockquote>
<h4 id="Client端设置">Client端设置</h4><ol>
<li>Client端通过-m参数设置加密方式，默认为不加密(-m参数为空)。</li>
<li>如果设置的加密方式不被支持，则默认为不加密。</li>
<li>当设置的加密方式为tls时，-p参数无效。</li>
<li>当设置的加密方式为非tls时，通过-p参数设置加密密码，且不能为空，默认密码为ginuerzh@gmail.com；-p参数必须与Server端的-p参数相同。</li>
</ol>
<h4 id="Server端设置">Server端设置</h4><ol>
<li>Server端通过-m参数设置加密方式，默认为不加密(-m参数为空)。</li>
<li>如果设置的加密方式不被支持，默认为不处理 (此情形被视为错误，须用户自行改正)。</li>
<li>如果没有设置加密方式(-m参数为空)，则由client端控制加密方式，即client端可通过-m参数指定Server端使用哪种加密方式。</li>
<li>如果设置了加密方式(-m参数不为空)，client端必须使用与Server端相同的加密方式。</li>
<li>当设置的加密方式为tls时，-p参数无效；-key参数可手动指定公钥文件，-cert参数可手动指定私钥文件，如果未指定，则使用默认的公钥与私钥。</li>
<li>当设置的加密方式为非tls时，-key，-cert参数无效；通过-p参数设置加密密码，且不能为空，默认密码为ginuerzh@gmail.com</li>
</ol>
-->]]></content>
    <summary type="html">
    <![CDATA[<h3 id="bbs">bbs</h3><blockquote>
<p><a href="https://groups.google.com/forum/#!forum/go-gost">https://groups.google.com/forum/#!forum/go-gost</a></p>
</blockquote>
<h3 id="原理">原理</h3><blockquote>
<p>在平台中建立websocket服务器，将数据通过websocket传输给客户端实现一个tunnel</p>
</blockquote>
<h3 id="cloud_Ide">cloud Ide</h3><ul>
<li>Cloud 9：<a href="https://c9.io">https://c9.io</a></li>
<li>Koding：<a href="https://koding.com/">https://koding.com/</a></li>
<li>Nitrous：<a href="https://lite.nitrous.io/">https://lite.nitrous.io/</a></li>
</ul>]]>
    
    </summary>
    
      <category term="FQ" scheme="http://ytlvy.com/categories/FQ/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios send SMS]]></title>
    <link href="http://ytlvy.com/2015/05/30/ios-send-sms/"/>
    <id>http://ytlvy.com/2015/05/30/ios-send-sms/</id>
    <published>2015-05-30T14:27:02.000Z</published>
    <updated>2015-06-05T07:18:29.000Z</updated>
    <content type="html"><![CDATA[<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span>(<span class="title">UCS2Encoding</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)ucs2EncodingString&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *result = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> length]; i++) &#123;</span><br><span class="line">        <span class="keyword">unichar</span> unic = [<span class="keyword">self</span> characterAtIndex:i];</span><br><span class="line">        [result appendFormat:<span class="string">@"%04hX"</span>,unic];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithString:result];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (<span class="built_in">NSString</span>*)ucs2DecodingString&#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> length = [<span class="keyword">self</span> length]/<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unichar</span> *buf = malloc(<span class="keyword">sizeof</span>(<span class="keyword">unichar</span>)*length);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *scanString = [<span class="keyword">self</span> UTF8String];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        sscanf(scanString+i*<span class="number">4</span>, <span class="string">"%04hX"</span>, buf+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSString</span> alloc] initWithCharacters:buf length:length];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)hexSwipString&#123;</span><br><span class="line">    <span class="keyword">unichar</span> *oldBuf = malloc([<span class="keyword">self</span> length]*<span class="keyword">sizeof</span>(<span class="keyword">unichar</span>));</span><br><span class="line">    <span class="keyword">unichar</span> *newBuf = malloc([<span class="keyword">self</span> length]*<span class="keyword">sizeof</span>(<span class="keyword">unichar</span>));</span><br><span class="line">    [<span class="keyword">self</span> getCharacters:oldBuf range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [<span class="keyword">self</span> length])];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> length]; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        newBuf[i] = oldBuf[i+<span class="number">1</span>];</span><br><span class="line">        newBuf[i+<span class="number">1</span>] = oldBuf[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *result = [<span class="built_in">NSString</span> stringWithCharacters:newBuf length:[<span class="keyword">self</span> length]];</span><br><span class="line">    free(oldBuf);</span><br><span class="line">    free(newBuf);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NSString</span> *<span class="type">PDUEncodeSendingSMS</span>(<span class="type">NSString</span> *phone, <span class="type">NSString</span> *text)&#123;</span><br><span class="line">    <span class="type">NSMutableString</span> *<span class="type">string</span> = [<span class="type">NSMutableString</span> stringWithString:@<span class="string">"001100"</span>];</span><br><span class="line">    [<span class="type">string</span> appendFormat:@<span class="string">"%02X"</span>, (<span class="type">int</span>)[phone length]];</span><br><span class="line">    <span class="keyword">if</span> ([phone length]%<span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        phone = [phone stringByAppendingString:@<span class="string">"F"</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="type">string</span> appendFormat:@<span class="string">"81%@"</span>,[phone hexSwipString]];</span><br><span class="line">    [<span class="type">string</span> appendString:@<span class="string">"0008AA"</span>];</span><br><span class="line">    <span class="type">NSString</span> *ucs2Text = [text ucs2EncodingString];</span><br><span class="line">    [<span class="type">string</span> appendFormat:@<span class="string">"%02x%@"</span>, (<span class="type">int</span>)[ucs2Text length]/<span class="number">2</span>, ucs2Text];</span><br><span class="line">    <span class="keyword">return</span> [<span class="type">NSString</span> stringWithString:<span class="type">string</span>];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">NSString</span> *sendATCommand(<span class="type">NSFileHandle</span> *baseband, <span class="type">NSString</span> *atCommand)&#123;</span><br><span class="line">    <span class="type">NSLog</span>(@<span class="string">"SEND AT: %@"</span>, atCommand);</span><br><span class="line">    [baseband writeData:[atCommand dataUsingEncoding:<span class="type">NSASCIIStringEncoding</span>]];</span><br><span class="line">    <span class="type">NSMutableString</span> *<span class="literal">result</span> = [<span class="type">NSMutableString</span> <span class="type">string</span>];</span><br><span class="line">    <span class="type">NSData</span> *resultData = [baseband availableData];</span><br><span class="line">    <span class="keyword">while</span> ([resultData length]) &#123;</span><br><span class="line">        [<span class="literal">result</span> appendString:[[<span class="type">NSString</span> alloc] initWithData:resultData encoding:<span class="type">NSASCIIStringEncoding</span>]];</span><br><span class="line">        <span class="keyword">if</span> ([<span class="literal">result</span> hasSuffix:@<span class="string">"OK\r\n"</span>]||[<span class="literal">result</span> hasSuffix:@<span class="string">"ERROR\r\n"</span>]||[<span class="literal">result</span> rangeOfString:@<span class="string">"&gt;"</span>].location != <span class="type">NSNotFound</span>) &#123;</span><br><span class="line">            <span class="type">NSLog</span>(@<span class="string">"RESULT: %@"</span>, <span class="literal">result</span>);</span><br><span class="line">            <span class="keyword">return</span> [<span class="type">NSString</span> stringWithString:<span class="literal">result</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            resultData = [baseband availableData];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">nil</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">BOOL</span> addNewSIMContact(<span class="type">NSFileHandle</span> *baseband, <span class="type">NSString</span> *name, <span class="type">NSString</span> *phone)&#123;</span><br><span class="line">    <span class="type">NSString</span> *<span class="literal">result</span> = sendATCommand(baseband, [<span class="type">NSString</span> stringWithFormat:@<span class="string">"AT+CPBW=,\"%@\",,\"%@\"\r"</span>, phone, [name ucs2EncodingString]]);</span><br><span class="line">    <span class="keyword">if</span> ([<span class="literal">result</span> hasSuffix:@<span class="string">"OK\r\n"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">BOOL</span> sendSMSWithPDUMode(<span class="type">NSFileHandle</span> *baseband, <span class="type">NSString</span> *phone, <span class="type">NSString</span> *text)&#123;</span><br><span class="line">    <span class="type">NSString</span> *pduString = <span class="type">PDUEncodeSendingSMS</span>(phone, text);</span><br><span class="line">    <span class="type">NSString</span> *<span class="literal">result</span> = sendATCommand(baseband, [<span class="type">NSString</span> stringWithFormat:@<span class="string">"AT+CMGS=%d\r"</span>, (<span class="type">int</span>)[pduString length]/<span class="number">2</span>-<span class="number">1</span>]);</span><br><span class="line">    <span class="literal">result</span> = sendATCommand(baseband, [<span class="type">NSString</span> stringWithFormat:@<span class="string">"%@\x1A"</span>, pduString]);</span><br><span class="line">    <span class="keyword">if</span> ([<span class="literal">result</span> hasSuffix:@<span class="string">"OK\r\n"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">YES</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">NO</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">NSArray</span> *readAllSIMContacts(<span class="type">NSFileHandle</span> *baseband)&#123;</span><br><span class="line">    <span class="type">NSString</span> *<span class="literal">result</span> = sendATCommand(baseband, @<span class="string">"AT+CPBR=?\r"</span>);</span><br><span class="line">    <span class="keyword">if</span> (![<span class="literal">result</span> hasSuffix:@<span class="string">"OK\r\n"</span>]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">nil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max = <span class="number">0</span>;</span><br><span class="line">    sscanf([<span class="literal">result</span> <span class="type">UTF8String</span>], <span class="string">"%*[^+]+CPBR: (%*d-%d)"</span>, &amp;max);</span><br><span class="line">    <span class="literal">result</span> = sendATCommand(baseband, [<span class="type">NSString</span> stringWithFormat:@<span class="string">"AT+CPBR=1,%d\r"</span>,max]);</span><br><span class="line">    <span class="type">NSMutableArray</span> *records = [<span class="type">NSMutableArray</span> <span class="type">array</span>];</span><br><span class="line">    <span class="type">NSScanner</span> *scanner = [<span class="type">NSScanner</span> scannerWithString:<span class="literal">result</span>];</span><br><span class="line">    [scanner scanUpToString:@<span class="string">"+CPBR:"</span> intoString:<span class="type">NULL</span>];</span><br><span class="line">    <span class="keyword">while</span> ([scanner scanString:@<span class="string">"+CPBR:"</span> intoString:<span class="type">NULL</span>]) &#123;</span><br><span class="line">        <span class="type">NSString</span> *phone = <span class="keyword">nil</span>;</span><br><span class="line">        <span class="type">NSString</span> *name = <span class="keyword">nil</span>;</span><br><span class="line">        [scanner scanInt:<span class="type">NULL</span>];</span><br><span class="line">        [scanner scanString:@<span class="string">",\""</span> intoString:<span class="type">NULL</span>];</span><br><span class="line">        [scanner scanUpToString:@<span class="string">"\""</span> intoString:&amp;phone];</span><br><span class="line">        [scanner scanString:@<span class="string">"\","</span> intoString:<span class="type">NULL</span>];</span><br><span class="line">        [scanner scanInt:<span class="type">NULL</span>];</span><br><span class="line">        [scanner scanString:@<span class="string">",\""</span> intoString:<span class="type">NULL</span>];</span><br><span class="line">        [scanner scanUpToString:@<span class="string">"\""</span> intoString:&amp;name];</span><br><span class="line">        [scanner scanUpToString:@<span class="string">"+CPBR:"</span> intoString:<span class="type">NULL</span>];</span><br><span class="line">        <span class="keyword">if</span> ([phone length] &gt; <span class="number">0</span> &amp;&amp; [name length] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            [records addObject:@&#123;@<span class="string">"name"</span>:[name ucs2DecodingString], @<span class="string">"phone"</span>:phone&#125;];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="type">NSArray</span> arrayWithArray:records];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> main(<span class="type">int</span> argc, <span class="keyword">const</span> <span class="type">char</span> * argv[])</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">NSFileHandle</span> *baseband = [<span class="type">NSFileHandle</span> fileHandleForUpdatingAtPath:@<span class="string">"/dev/dlci.spi-baseband.extra_0"</span>];</span><br><span class="line">        <span class="keyword">if</span> (baseband == <span class="keyword">nil</span>) &#123;</span><br><span class="line">            <span class="type">NSLog</span>(@<span class="string">"Can't open baseband."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> fd = [baseband fileDescriptor];</span><br><span class="line">        </span><br><span class="line">        ioctl(fd, <span class="type">TIOCEXCL</span>);</span><br><span class="line">        fcntl(fd, <span class="type">F_SETFL</span>, <span class="number">0</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">static</span> struct termios term;</span><br><span class="line">        </span><br><span class="line">        tcgetattr(fd, &amp;term);</span><br><span class="line">        </span><br><span class="line">        cfmakeraw(&amp;term);</span><br><span class="line">        cfsetspeed(&amp;term, <span class="number">115200</span>);</span><br><span class="line">        term.c_cflag = <span class="type">CS8</span> | <span class="type">CLOCAL</span> | <span class="type">CREAD</span>;</span><br><span class="line">        term.c_iflag = <span class="number">0</span>;</span><br><span class="line">        term.c_oflag = <span class="number">0</span>;</span><br><span class="line">        term.c_lflag = <span class="number">0</span>;</span><br><span class="line">        term.c_cc[<span class="type">VMIN</span>] = <span class="number">0</span>;</span><br><span class="line">        term.c_cc[<span class="type">VTIME</span>] = <span class="number">0</span>;</span><br><span class="line">        tcsetattr(fd, <span class="type">TCSANOW</span>, &amp;term);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="type">NSString</span> *<span class="literal">result</span> = sendATCommand(baseband, @<span class="string">"AT+CSCS=\"UCS2\"\r"</span>);</span><br><span class="line">        <span class="literal">result</span> = sendATCommand(baseband, @<span class="string">"ATE0\r"</span>);</span><br><span class="line">        <span class="literal">result</span> = sendATCommand(baseband, @<span class="string">"AT+CMGF=0\r"</span>);</span><br><span class="line"> </span><br><span class="line">        </span><br><span class="line">        sendSMSWithPDUMode(baseband, @<span class="string">"10010"</span>, @<span class="string">"测试"</span>);</span><br><span class="line">        </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;termios.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSString</span>(<span class="title">UCS2Encoding</span>)</span></span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)ucs2EncodingString&#123;</span><br><span class="line">    <span class="built_in">NSMutableString</span> *result = [<span class="built_in">NSMutableString</span> string];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> length]; i++) &#123;</span><br><span class="line">        <span class="keyword">unichar</span> unic = [<span class="keyword">self</span> characterAtIndex:i];</span><br><span class="line">        [result appendFormat:<span class="string">@"%04hX"</span>,unic];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithString:result];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">- (<span class="built_in">NSString</span>*)ucs2DecodingString&#123;</span><br><span class="line">    <span class="built_in">NSUInteger</span> length = [<span class="keyword">self</span> length]/<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">unichar</span> *buf = malloc(<span class="keyword">sizeof</span>(<span class="keyword">unichar</span>)*length);</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *scanString = [<span class="keyword">self</span> UTF8String];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        sscanf(scanString+i*<span class="number">4</span>, <span class="string">"%04hX"</span>, buf+i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [[<span class="built_in">NSString</span> alloc] initWithCharacters:buf length:length];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSString</span>*)hexSwipString&#123;</span><br><span class="line">    <span class="keyword">unichar</span> *oldBuf = malloc([<span class="keyword">self</span> length]*<span class="keyword">sizeof</span>(<span class="keyword">unichar</span>));</span><br><span class="line">    <span class="keyword">unichar</span> *newBuf = malloc([<span class="keyword">self</span> length]*<span class="keyword">sizeof</span>(<span class="keyword">unichar</span>));</span><br><span class="line">    [<span class="keyword">self</span> getCharacters:oldBuf range:<span class="built_in">NSMakeRange</span>(<span class="number">0</span>, [<span class="keyword">self</span> length])];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; [<span class="keyword">self</span> length]; i+=<span class="number">2</span>) &#123;</span><br><span class="line">        newBuf[i] = oldBuf[i+<span class="number">1</span>];</span><br><span class="line">        newBuf[i+<span class="number">1</span>] = oldBuf[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">NSString</span> *result = [<span class="built_in">NSString</span> stringWithCharacters:newBuf length:[<span class="keyword">self</span> length]];</span><br><span class="line">    free(oldBuf);</span><br><span class="line">    free(newBuf);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[ios reverse myapp]]></title>
    <link href="http://ytlvy.com/2015/05/30/ios-reverse-myapp/"/>
    <id>http://ytlvy.com/2015/05/30/ios-reverse-myapp/</id>
    <published>2015-05-30T14:26:50.000Z</published>
    <updated>2015-06-05T07:33:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="reverseMyApp">reverseMyApp</h2><h3 id="download_tools_and_install">download tools and install</h3><p><a href="https://code.google.com/p/networkpx/wiki/class_dump_z" target="_blank" rel="external">class-dump-z</a><br><a href="http://www.charlesproxy.com/download/" target="_blank" rel="external">Charles</a></p>
<h3 id="Edit_Scheme">Edit Scheme</h3><p>Select <code>Run</code> panel, then in <code>info</code> tab, select <code>Release</code> under <code>Build Configuration</code>;</p>
<h3 id="enter_Simulator_App_directory">enter Simulator App directory</h3><p>you can use <code>SimPholders2</code></p>
<a id="more"></a>
<h3 id="dump_classes">dump classes</h3><ol>
<li>check out what Frameworks the bundle links to<br> <code>otool -L app</code></li>
<li>class dump<br> <code>class-dump-z app &gt; app.txt</code></li>
<li>find “manager, “shared” or “store”</li>
</ol>
<h3 id="print_plist">print plist</h3><pre><code>plutil -<span class="tag">p</span> Info.plist
</code></pre><h3 id="NSUserDefaults_directory">NSUserDefaults directory</h3><pre><code><span class="list">{App Directory}</span>/Library/Preferences/<span class="list">{Bundle Identifier}</span>.plist
open Library/Preferences/<span class="list">{Bundle Identifier}</span>.plist
</code></pre><h3 id="open_finder_in_current_directory">open finder in current directory</h3><pre><code>open .
</code></pre><h3 id="Keychain_Access">Keychain Access</h3><pre><code>Keychain  is encrypted with the <span class="operator"><span class="keyword">help</span> <span class="keyword">of</span> the <span class="keyword">user</span>’s <span class="keyword">password</span>, which generally <span class="keyword">is</span> the simple <span class="number">4</span>-digit <span class="built_in">numeric</span> passcode.

<span class="number">1.</span> <span class="keyword">Encrypt</span> the <span class="keyword">data</span>
    encrypting the <span class="keyword">data</span> <span class="keyword">using</span> Apple’s Common Crypto APIs <span class="keyword">found</span> <span class="keyword">in</span> the Security Framework
<span class="number">2.</span> <span class="keyword">Do</span> <span class="keyword">NOT</span> hardcode your encryption <span class="keyword">key</span> <span class="keyword">to</span> the app
    You need <span class="keyword">to</span> make a <span class="keyword">unique</span> encryption <span class="keyword">key</span> <span class="keyword">for</span> the device
<span class="number">3.</span> Be aware <span class="keyword">of</span> your methods <span class="keyword">and</span> how an attacker can <span class="keyword">use</span> them
<span class="number">4.</span> Question yourself: <span class="keyword">Do</span> you need <span class="keyword">to</span> store it?</span>
</code></pre><h2 id="Network_Penetration_Testing_and_Mapping">Network Penetration Testing and Mapping</h2><h3 id="strings">strings</h3><pre><code>strings app <span class="string">| grep http</span>
</code></pre><p><a href="http://version1.api.memegenerator.net/Generator_Select_ByUrlNameOrGeneratorID" target="_blank" rel="external">http://version1.api.memegenerator.net/Generator_Select_ByUrlNameOrGeneratorID</a></p>
<h2 id="LLDB">LLDB</h2><pre><code>gdb -q  
<span class="list">(<span class="keyword">lldb</span>)</span> process attach --name <span class="string">"Meme Collector"</span> --waitfor

//make breakpoints
<span class="list">(<span class="keyword">lldb</span>)</span>b viewDidLoad

//show breakpoints address
<span class="list">(<span class="keyword">lldb</span>)</span>br l

//continue
<span class="list">(<span class="keyword">lldb</span>)</span>c
</code></pre><p><img src="http://cdn5.raywenderlich.com/wp-content/uploads/2013/07/Terminal-GDB.png" alt=""></p>
<pre><code>call <span class="comment">[<span class="comment">[MoneyManager sharedManager]</span> purchaseCurrency]</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="reverseMyApp">reverseMyApp</h2><h3 id="download_tools_and_install">download tools and install</h3><p><a href="https://code.google.com/p/networkpx/wiki/class_dump_z">class-dump-z</a><br><a href="http://www.charlesproxy.com/download/">Charles</a></p>
<h3 id="Edit_Scheme">Edit Scheme</h3><p>Select <code>Run</code> panel, then in <code>info</code> tab, select <code>Release</code> under <code>Build Configuration</code>;</p>
<h3 id="enter_Simulator_App_directory">enter Simulator App directory</h3><p>you can use <code>SimPholders2</code></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
      <category term="reverse" scheme="http://ytlvy.com/categories/IOS/reverse/"/>
    
  </entry>
  
</feed>