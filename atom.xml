<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Yt's Blog]]></title>
  <subtitle><![CDATA[Valar Morghulis]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ytlvy.com//"/>
  <updated>2015-09-01T13:59:44.000Z</updated>
  <id>http://ytlvy.com//</id>
  
  <author>
    <name><![CDATA[Yt]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[QQ LRC]]></title>
    <link href="http://ytlvy.com/2015/09/01/QQ-LRC/"/>
    <id>http://ytlvy.com/2015/09/01/QQ-LRC/</id>
    <published>2015-09-01T13:59:14.000Z</published>
    <updated>2015-09-01T13:59:44.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-23 09:22:47</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="https://blog.0xbbc.com/2015/03/qq%E9%9F%B3%E4%B9%90%E7%9A%84qrc%E6%AD%8C%E8%AF%8D%E5%88%86%E6%9E%90/" target="_blank" rel="external">reference</a></p>
<h2 id="QQ音乐的QRC歌词分析">QQ音乐的QRC歌词分析</h2><h3 id="QRC_Sample">QRC Sample</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;QrcInfos&gt;</span><br><span class="line">&lt;QrcHeadInfo SaveTime="<span class="number">1400298876</span>" Version="100"/&gt;</span><br><span class="line">&lt;LyricInfo LyricCount="1"&gt;</span><br><span class="line">&lt;Lyric_1 LyricType="1" LyricContent="[ti:<span class="keyword">A</span> Sky Full of Stars]</span><br><span class="line">[ar:Coldplay]</span><br><span class="line">[al:Ghost Stories]</span><br><span class="line">[by:]</span><br><span class="line">[offset:0]</span><br><span class="line">[<span class="number">750,1330</span>]<span class="keyword">A</span> (<span class="number">750,180</span>)Sky (<span class="number">930,180</span>)Full (<span class="number">1110,150</span>)of (<span class="number">1260,180</span>)Stars (<span class="number">1440,140</span>)- (<span class="number">1580,160</span>)Coldplay(<span class="number">1740,340</span>)</span><br><span class="line">[<span class="number">17598,1070</span>]Cause (<span class="number">17598,230</span>)you're (<span class="number">17828,210</span>)a (<span class="number">18038,250</span>)sky,(<span class="number">18288,380</span>)</span><br><span class="line">[<span class="number">19488,2660</span>]cause (<span class="number">19488,210</span>)you're (<span class="number">19698,260</span>)a (<span class="number">19958,200</span>)sky (<span class="number">20158,1130</span>)full (<span class="number">21288,220</span>)of (<span class="number">21508,260</span>)stars(<span class="number">21768,380</span>)</span><br><span class="line">[<span class="number">25128,2850</span>]I'm (<span class="number">25128,270</span>)gonna (<span class="number">25398,350</span>)give (<span class="number">25748,550</span>)you (<span class="number">27028,220</span>)my (<span class="number">27248,350</span>)heart(<span class="number">27598,380</span>)</span><br><span class="line">[<span class="number">33028,1180</span>]Cause (<span class="number">33028,180</span>)you're (<span class="number">33208,210</span>)a (<span class="number">33418,230</span>)sky,(<span class="number">33648,560</span>)</span><br><span class="line">[<span class="number">34808,2710</span>]cause (<span class="number">34808,430</span>)you're (<span class="number">35238,190</span>)a (<span class="number">35428,460</span>)sky (<span class="number">35888,820</span>)full (<span class="number">36708,190</span>)of (<span class="number">36898,230</span>)stars(<span class="number">37128,390</span>)</span><br><span class="line">[<span class="number">40858,2499</span>]Cause (<span class="number">40858,180</span>)you (<span class="number">41038,190</span>)light (<span class="number">41228,1270</span>)up (<span class="number">42498,200</span>)the (<span class="number">42698,200</span>)path(<span class="number">42898,459</span>)</span><br><span class="line">[<span class="number">48257,4709</span>]I (<span class="number">48257,260</span>)don't (<span class="number">48517,260</span>)care, (<span class="number">48777,460</span>)go (<span class="number">50017,240</span>)on (<span class="number">50257,360</span>)and (<span class="number">50617,220</span>)tear (<span class="number">50837,950</span>)me (<span class="number">51787,520</span>)apart(<span class="number">52307,659</span>)</span><br><span class="line">[<span class="number">55896,2909</span>]I (<span class="number">55896,300</span>)don't (<span class="number">56196,250</span>)care (<span class="number">56446,899</span>)if (<span class="number">57345,390</span>)you (<span class="number">57735,270</span>)do(<span class="number">58005,800</span>)</span><br><span class="line">[<span class="number">63625,1020</span>]Cause (<span class="number">63625,200</span>)in (<span class="number">63825,220</span>)a (<span class="number">64045,210</span>)sky,(<span class="number">64255,390</span>)</span><br><span class="line">[<span class="number">65585,2580</span>]cause (<span class="number">65585,200</span>)in (<span class="number">65785,190</span>)a (<span class="number">65975,180</span>)sky (<span class="number">66155,630</span>)full (<span class="number">67405,190</span>)of (<span class="number">67595,200</span>)stars(<span class="number">67795,370</span>)</span><br><span class="line">[<span class="number">69215,1130</span>]I (<span class="number">69215,200</span>)think (<span class="number">69415,160</span>)I (<span class="number">69575,170</span>)saw (<span class="number">69745,260</span>)you(<span class="number">70005,340</span>)</span><br><span class="line">[<span class="number">102247,1010</span>]Cause (<span class="number">102247,240</span>)you're (<span class="number">102487,210</span>)a (<span class="number">102697,220</span>)sky,(<span class="number">102917,340</span>)</span><br><span class="line">[<span class="number">103967,2550</span>]cause (<span class="number">103967,260</span>)you're (<span class="number">104227,190</span>)a (<span class="number">104417,210</span>)sky (<span class="number">104627,330</span>)full (<span class="number">105677,230</span>)of (<span class="number">105907,230</span>)stars(<span class="number">106137,380</span>)</span><br><span class="line">[<span class="number">109717,3710</span>]I (<span class="number">109717,210</span>)want (<span class="number">109927,210</span>)to (<span class="number">110137,200</span>)die (<span class="number">110337,360</span>)in (<span class="number">111527,210</span>)your (<span class="number">111737,220</span>)arms, (<span class="number">111957,440</span>)arms(<span class="number">113107,320</span>)</span><br><span class="line">[<span class="number">117507,4609</span>]Cause (<span class="number">117507,220</span>)you (<span class="number">117727,190</span>)get (<span class="number">117917,190</span>)lighter (<span class="number">118107,350</span>)the (<span class="number">119307,220</span>)more (<span class="number">119527,1090</span>)it (<span class="number">120617,510</span>)gets (<span class="number">121127,390</span>)dark(<span class="number">121517,599</span>)</span><br><span class="line">[<span class="number">125096,2730</span>]I'm (<span class="number">125096,200</span>)going (<span class="number">125296,240</span>)to (<span class="number">125536,340</span>)give (<span class="number">125876,1000</span>)you (<span class="number">126876,200</span>)my (<span class="number">127076,250</span>)heart(<span class="number">127326,500</span>)</span><br><span class="line">[<span class="number">131126,2840</span>]And (<span class="number">131126,450</span>)I (<span class="number">131576,1180</span>)don't (<span class="number">132756,470</span>)care,(<span class="number">133226,740</span>)</span><br><span class="line">[<span class="number">134666,2600</span>]go (<span class="number">134666,210</span>)on (<span class="number">134876,260</span>)and (<span class="number">135136,190</span>)tear (<span class="number">135326,1150</span>)me (<span class="number">136476,370</span>)apart(<span class="number">136846,420</span>)</span><br><span class="line">[<span class="number">140456,2580</span>]And (<span class="number">140456,210</span>)I (<span class="number">140666,290</span>)don't (<span class="number">140956,200</span>)care (<span class="number">141156,690</span>)if (<span class="number">141846,450</span>)you (<span class="number">142296,210</span>)do(<span class="number">142506,530</span>)</span><br><span class="line">[<span class="number">148266,960</span>]Cause (<span class="number">148266,190</span>)in (<span class="number">148456,210</span>)a (<span class="number">148666,190</span>)sky,(<span class="number">148856,370</span>)</span><br><span class="line">[<span class="number">150026,2890</span>]cause (<span class="number">150026,220</span>)in (<span class="number">150246,180</span>)a (<span class="number">150426,200</span>)sky (<span class="number">150626,1220</span>)full (<span class="number">151846,210</span>)of (<span class="number">152056,220</span>)stars(<span class="number">152276,640</span>)</span><br><span class="line">[<span class="number">153956,3280</span>]I (<span class="number">153956,190</span>)think (<span class="number">154146,200</span>)I (<span class="number">154346,340</span>)see (<span class="number">154686,290</span>)you(<span class="number">154976,2260</span>)</span><br><span class="line">[<span class="number">161426,1989</span>]I (<span class="number">161426,210</span>)think (<span class="number">161636,170</span>)I (<span class="number">161806,570</span>)see (<span class="number">162376,460</span>)you(<span class="number">162836,579</span>)</span><br><span class="line">[<span class="number">217294,1340</span>]Because (<span class="number">217294,300</span>)you're (<span class="number">217594,250</span>)a (<span class="number">217844,330</span>)sky,(<span class="number">218174,460</span>)</span><br><span class="line">[<span class="number">219324,2580</span>]you're (<span class="number">219324,240</span>)a (<span class="number">219564,240</span>)sky (<span class="number">219804,1130</span>)full (<span class="number">220934,220</span>)of (<span class="number">221154,280</span>)stars(<span class="number">221434,470</span>)</span><br><span class="line">[<span class="number">222474,1740</span>]Such (<span class="number">222474,260</span>)a (<span class="number">222734,260</span>)Heavenly (<span class="number">222994,570</span>)view(<span class="number">223564,650</span>)</span><br><span class="line">[<span class="number">229794,3499</span>]You're (<span class="number">229794,210</span>)such (<span class="number">230004,200</span>)a (<span class="number">230204,220</span>)Heavenly (<span class="number">230424,709</span>)view(<span class="number">231133,2160</span>)</span><br><span class="line">"/&gt;</span><br><span class="line">&lt;/LyricInfo&gt;</span><br><span class="line">&lt;/QrcInfos&gt;</span><br></pre></td></tr></table></figure>
<p>简单来说就是一份XML文档，</p>
<ol>
<li>根节点是<code>&lt;QrcInfos&gt;</code>。</li>
<li>子节点<code>&lt;QrcHeadInfo SaveTime=&quot;1400298876&quot; Version=&quot;100&quot;/&gt;</code>记录了这份QRC歌词的保存时间和版本号，这里的版本应该是指当前QRC的版本，而非歌词内容的版本。</li>
<li>接下来的<lyricinfo lyriccount="1">记录了这份QRC里面保存的歌词数量。</lyricinfo></li>
<li>然后根据歌词数量，从1开始，对应歌词的节点名为&lt;Lyric_$i<br>其中$i为对应的index。</li>
</ol>
<p>比如，第一个歌词就应该是：</p>
<lyric_1 lyrictype="1" lyriccontent="Lyric Content ... ">

<ol>
<li>LyricContent 前面部分和普通的LRC一样，但是在时间轴部分用了新的格式。</li>
</ol>
<a id="more"></a>
<p>以第一句为例，<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">750</span>,<span class="number">1330</span>]A <span class="list">(<span class="keyword">750</span>,<span class="number">180</span>)</span>Sky <span class="list">(<span class="keyword">930</span>,<span class="number">180</span>)</span>Full <span class="list">(<span class="keyword">1110</span>,<span class="number">150</span>)</span>of <span class="list">(<span class="keyword">1260</span>,<span class="number">180</span>)</span>Stars <span class="list">(<span class="keyword">1440</span>,<span class="number">140</span>)</span>- <span class="list">(<span class="keyword">1580</span>,<span class="number">160</span>)</span>Coldplay<span class="list">(<span class="keyword">1740</span>,<span class="number">340</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>即形如：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">time_1</span>,duration_1] Word <span class="number">1</span> <span class="list">(<span class="keyword">time_2</span>, duration_2)</span> Word <span class="number">2</span> <span class="list">(<span class="keyword">time_3</span>, duration_3)</span> Word <span class="number">3</span> ...</span></span><br></pre></td></tr></table></figure></p>
<p>那么这里的<code>time_1</code>是以微秒为单位的，从音乐开始(00:00.00)到这一句的时间</p>
<p><code>duration_1</code>是这一整句歌词的持续时间, <code>1330 = 180 + 180 + 150 + 180 + 140 + 160 + 340</code>;</p>
<p>剩余的time_2, time_3 … 也是从音乐开始(00:00.00)到这一句的时间，不过只有以[]开头的才是一句歌词的开始。 duration_2, duration_3 … 都是紧跟在后面的Word的持续时间。</p>
<p>通过解析这些标记，QQ音乐便可以实现高亮进度准确地跟着歌词。</p>
<h3 id="QRC格式歌词转LRC格式">QRC格式歌词转LRC格式</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;regex.h&gt;</span></span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief      把微秒时间转为LRC中的时间</span><br><span class="line"> *</span><br><span class="line"> *  @discussion 并未考虑超过99:59.99的时间</span><br><span class="line"> *</span><br><span class="line"> *  @return     [dd:dd.dd]</span><br><span class="line"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * microseconds_to_LRC_time(<span class="keyword">long</span> <span class="keyword">long</span> microsecond)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> seconds = microsecond / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="keyword">int</span> min = seconds / <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">double</span> sec = seconds - <span class="number">60</span> * min;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02d:%05.2lf"</span>,min,sec]<span class="variable">.UTF8String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">QRC</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief  解析QRC到LRC</span><br><span class="line"> *</span><br><span class="line"> *  @param QRCPath QRC文件路径</span><br><span class="line"> *  @param error   出错时返回错误码和原因</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)ParserQRCDoc:(<span class="built_in">NSString</span> *)QRCPath Error:(<span class="built_in">NSError</span> **)error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">QRC</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)ParserQRCDoc:(<span class="built_in">NSString</span> *)QRCPath</span><br><span class="line">               Error:(<span class="built_in">NSError</span> **)error</span><br><span class="line">&#123;</span><br><span class="line">    ifstream QRC_file(QRCPath<span class="variable">.UTF8String</span>);</span><br><span class="line">    <span class="keyword">if</span>(!QRC_file)</span><br><span class="line">    &#123;</span><br><span class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@"com.0xBBC.QRC"</span> code:-<span class="number">1</span> userInfo:@&#123;<span class="string">@"Error"</span>:<span class="string">@"No such file"</span>&#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line">    regex_t reg;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\[([0-9]+)"</span>;</span><br><span class="line">    <span class="comment">// 匹配以'['开头, 并且后面跟着数字的就行了</span></span><br><span class="line">    <span class="comment">// 因为是转为LRC, 故提取出每句开始的时间就行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> z = regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (z != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">        regerror(z, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@"com.0xBBC.QRC"</span> code:-<span class="number">2</span> userInfo:@&#123;<span class="string">@"Error"</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%s"</span>,ebuf]&#125;];</span><br><span class="line">        regfree(&amp;reg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regmatch_t pm[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">const</span> size_t nmatch = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(getline(QRC_file, str))</span><br><span class="line">    &#123;</span><br><span class="line">        z = regexec(&amp;reg, str<span class="variable">.c_str</span>(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (z == REG_NOMATCH)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">            regerror(z, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">            *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@"com.0xBBC.QRC"</span> code:-<span class="number">3</span> userInfo:@&#123;<span class="string">@"Error"</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%s"</span>,ebuf]&#125;];</span><br><span class="line">            regfree(&amp;reg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> * line = str<span class="variable">.c_str</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x]<span class="variable">.rm_so</span> != -<span class="number">1</span>; ++ x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> *mstr = strndup(line + pm[x]<span class="variable">.rm_so</span>, pm[x]<span class="variable">.rm_eo</span> - pm[x]<span class="variable">.rm_so</span>);</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> microseconds = atoll(mstr);</span><br><span class="line">                free(mstr);</span><br><span class="line">                printf(<span class="string">"[%s]"</span>,microseconds_to_LRC_time(microseconds));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">BOOL</span> print = <span class="literal">YES</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strlen(line); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (line[i] == <span class="string">'['</span> || line[i] == <span class="string">'('</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    print = <span class="literal">NO</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">']'</span> || line[i] == <span class="string">')'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    print = <span class="literal">YES</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (print) printf(<span class="string">"%c"</span>,line[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(<span class="string">"n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="built_in">NSError</span> *error;</span><br><span class="line">            [QRC ParserQRCDoc:[<span class="built_in">NSString</span> stringWithUTF8String:argv[i]] Error:&amp;error];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/03/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-03-24-%E4%B8%8B%E5%8D%881.23.31.png" alt=""></p>
<h3 id="QRC与LRC合并">QRC与LRC合并</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;string&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;iostream&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;fstream&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;regex.h&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief      把微秒时间转为LRC中的时间</span><br><span class="line"> *</span><br><span class="line"> *  @discussion 并未考虑超过99:59.99的时间</span><br><span class="line"> *</span><br><span class="line"> *  @return     [dd:dd.dd]</span><br><span class="line"> */</span></span><br><span class="line"> </span><br><span class="line">const <span class="typename">char</span> * microseconds_to_LRC_time(<span class="typename">long</span> <span class="typename">long</span> microsecond) &#123;</span><br><span class="line">    <span class="typename">double</span> seconds = microsecond / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="typename">int</span> min = seconds / <span class="number">60</span>;</span><br><span class="line">    <span class="typename">double</span> sec = seconds - <span class="number">60</span> * min;</span><br><span class="line">    <span class="keyword">return</span> [NSString <span class="string">stringWithFormat:</span>@<span class="string">"%02d:%05.2lf"</span>,min,sec].UTF8String;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="annotation">@interface</span> <span class="string">QRC :</span> NSObject</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief  合并QRC与LRC</span><br><span class="line"> *</span><br><span class="line"> *  @param QRCPath QRC文件路径</span><br><span class="line"> *  @param LRCPath LRC文件路径</span><br><span class="line"> *  @param error   出错时返回错误码和原因</span><br><span class="line"> */</span></span><br><span class="line">+ (<span class="typename">void</span>)<span class="string">ParserQRCDoc:</span>(NSString *)QRCPath <span class="string">CombineLRC:</span>(NSString *)LRCPath <span class="string">Error:</span>(NSError **)error;</span><br><span class="line"><span class="annotation">@end</span></span><br><span class="line"></span><br><span class="line"><span class="annotation">@implementation</span> QRC</span><br><span class="line"></span><br><span class="line">+ (<span class="typename">void</span>)<span class="string">ParserQRCDoc:</span>(NSString *)QRCPath <span class="string">CombineLRC:</span>(NSString *)LRCPath <span class="string">Error:</span>(NSError **)error &#123;</span><br><span class="line">    NSMutableArray * array = [NSMutableArray <span class="keyword">new</span>];</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Handle QRC</span><br><span class="line"></span><br><span class="line">    ifstream QRC_in(QRCPath.UTF8String);</span><br><span class="line">    <span class="keyword">if</span>(!QRC_in) &#123;</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">1</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:@<span class="string">"No such QRC file"</span>&#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line">    <span class="typename">int</span> cflags = REG_EXTENDED;</span><br><span class="line">    regex_t reg;</span><br><span class="line">    const <span class="typename">char</span> * pattern = <span class="string">"^\[([0-9]+)"</span>;</span><br><span class="line">    <span class="comment">// 匹配以'['开头, 并且后面跟着数字的就行了</span></span><br><span class="line">    <span class="comment">// 因为是转为LRC, 故提取出每句开始的时间就行</span></span><br><span class="line"></span><br><span class="line">    <span class="typename">int</span> z = regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">        regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">2</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">        regfree(&amp;reg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regmatch_t pm[<span class="number">10</span>];</span><br><span class="line">    const size_t nmatch = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(QRC_in, str)) &#123;</span><br><span class="line">        z = regexec(&amp;reg, str.c_str(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (z == REG_NOMATCH) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">            regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">            *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">3</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">            regfree(&amp;reg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            const <span class="typename">char</span> * line = str.c_str();</span><br><span class="line">            <span class="typename">long</span> <span class="typename">long</span> microseconds = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="typename">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x].rm_so != -<span class="number">1</span>; ++ x) &#123;</span><br><span class="line">                <span class="typename">char</span> *mstr = strndup(line + pm[x].rm_so, pm[x].rm_eo-pm[x].rm_so);</span><br><span class="line">                microseconds = atoll(mstr);</span><br><span class="line">                free(mstr);</span><br><span class="line">            &#125;</span><br><span class="line">            BOOL print = YES;</span><br><span class="line">            <span class="typename">char</span> * lrc = (<span class="typename">char</span> *)malloc(sizeof(<span class="typename">char</span>) * <span class="number">512</span>);</span><br><span class="line">            <span class="typename">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="typename">int</span> i = <span class="number">0</span>; i &lt; strlen(line); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (line[i] == <span class="string">'['</span> || line[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">                    print = NO;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">']'</span> || line[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">                    print = YES;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (print) &#123;</span><br><span class="line">                        lrc[index] = line[i];</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            lrc[index] = <span class="string">''</span>;</span><br><span class="line">            [array <span class="string">addObject:</span>@&#123;@<span class="string">"Time"</span>:[[NSString alloc] <span class="string">initWithFormat:</span>@<span class="string">"%lld"</span>,microseconds],@<span class="string">"Type"</span>:@<span class="string">"QRC"</span>,@<span class="string">"LRC"</span>:[[NSString alloc] <span class="string">initWithCString:</span>lrc <span class="string">encoding:</span>NSUTF8StringEncoding]&#125;];</span><br><span class="line">            free(lrc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Handle LRC</span><br><span class="line"></span><br><span class="line">    ifstream LRC_in(LRCPath.UTF8String);</span><br><span class="line">    <span class="keyword">if</span>(!LRC_in) &#123;</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">4</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:@<span class="string">"No such LRC file"</span>&#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    const <span class="typename">char</span> * LRC_pattern = <span class="string">"^\[([0-9]+):([0-9]+).([0-9]+)"</span>;</span><br><span class="line">    z = regcomp(&amp;reg, LRC_pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">        regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">5</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">        regfree(&amp;reg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getline(LRC_in, str)) &#123;</span><br><span class="line">        z = regexec(&amp;reg, str.c_str(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (z == REG_NOMATCH) printf(<span class="string">"%sn"</span>,str.c_str());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">            regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">            *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">6</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">            regfree(&amp;reg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            const <span class="typename">char</span> * line = str.c_str();</span><br><span class="line">            <span class="typename">long</span> <span class="typename">long</span> microseconds = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="typename">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x].rm_so != -<span class="number">1</span>; ++ x)&#123;</span><br><span class="line">                <span class="typename">char</span> *mstr = strndup(line + pm[x].rm_so, pm[x].rm_eo-pm[x].rm_so);</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">1</span>) microseconds += atoll(mstr) * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) microseconds += atoll(mstr) * <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>) microseconds += atoll(mstr) * <span class="number">10</span>;</span><br><span class="line">                free(mstr);</span><br><span class="line">            &#125;</span><br><span class="line">            BOOL print = YES;</span><br><span class="line">            <span class="typename">char</span> * lrc = (<span class="typename">char</span> *)malloc(sizeof(<span class="typename">char</span>) * <span class="number">512</span>);</span><br><span class="line">            <span class="typename">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="typename">int</span> i = <span class="number">0</span>; i &lt; strlen(line); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (line[i] == <span class="string">'['</span> || line[i] == <span class="string">'('</span>)&#123;</span><br><span class="line">                    print = NO;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">']'</span> || line[i] == <span class="string">')'</span>)&#123;</span><br><span class="line">                    print = YES;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (print)&#123;</span><br><span class="line">                        lrc[index] = line[i];</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            lrc[index] = <span class="string">''</span>;</span><br><span class="line">            NSString * LRC_Content = [[NSString alloc] <span class="string">initWithCString:</span>lrc <span class="string">encoding:</span>NSUTF8StringEncoding];</span><br><span class="line">            <span class="keyword">if</span> (LRC_Content.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                [array <span class="string">addObject:</span>@&#123;@<span class="string">"Time"</span>:[[NSString alloc] <span class="string">initWithFormat:</span>@<span class="string">"%lld"</span>, microseconds], @<span class="string">"Type"</span> : @<span class="string">"LRC"</span>, @<span class="string">"LRC"</span> : LRC_Content&#125;];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Sort LRC &amp; QRC</span><br><span class="line"></span><br><span class="line">    [array <span class="string">sortUsingComparator:</span>^NSComparisonResult(NSDictionary * obj1, NSDictionary * obj2) &#123;</span><br><span class="line">        <span class="typename">long</span> <span class="typename">long</span> t1 = [[obj1 <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue];</span><br><span class="line">        <span class="typename">long</span> <span class="typename">long</span> t2 = [[obj2 <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue];</span><br><span class="line">        <span class="keyword">if</span> (t1 &gt; t2) <span class="keyword">return</span> NSOrderedDescending;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t1 == t2) <span class="keyword">return</span> NSOrderedSame;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> NSOrderedAscending;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Combine</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="typename">int</span> i = <span class="number">1</span>; i &lt; array.count; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (abs([[[array <span class="string">objectAtIndex:</span>i - <span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue] - [[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]) &lt; <span class="number">600</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Type"</span>] <span class="string">isEqualToString:</span>@<span class="string">"QRC"</span>]) &#123;</span><br><span class="line">                printf(<span class="string">"[%s] %s %sn"</span>,microseconds_to_LRC_time([[[array <span class="string">objectAtIndex:</span>i-<span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]),[(NSString *)[[array <span class="string">objectAtIndex:</span>i-<span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String],[(NSString *)[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                printf(<span class="string">"[%s] %s %sn"</span>,microseconds_to_LRC_time([[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]),[(NSString *)[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String],[(NSString *)[[array <span class="string">objectAtIndex:</span>i-<span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String]);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printf(<span class="string">"[%s] %sn"</span>,microseconds_to_LRC_time([[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]),[(NSString *)[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@end</span></span><br><span class="line"></span><br><span class="line"><span class="typename">int</span> main(<span class="typename">int</span> argc, const <span class="typename">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="annotation">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="typename">int</span> limition = argc;</span><br><span class="line">        <span class="keyword">if</span> (argc % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            limition -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="typename">int</span> i = <span class="number">1</span>; i &lt; limition; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            NSError *error;</span><br><span class="line">            [QRC <span class="string">ParserQRCDoc:</span>[NSString <span class="string">stringWithUTF8String:</span>argv[i]] <span class="string">CombineLRC:</span>[NSString <span class="string">stringWithUTF8String:</span>argv[i+<span class="number">1</span>]] <span class="string">Error:</span>&amp;error];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并多个LRC文件">合并多个LRC文件</h3><p>参数就是LRC文件的路径，非时间标签为处理。默认误差范围是600ms，以第一个LRC文件为准。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  LRCCombiner</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by BlueCocoa on 15/4/27.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015年 0xBBC. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;regex.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; lyrics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">1</span>; index &lt; argc; index++) &#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">LRC_in</span><span class="params">(argv[index])</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!LRC_in) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[ERROR] Can't open file at %s\n"</span>,argv[index]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line">        <span class="keyword">regex_t</span> reg;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\\[([0-9]+).([0-9]+).([0-9]+)"</span>;</span><br><span class="line">        <span class="comment">// 匹配以'['开头, 并且后面跟着数字的就行了</span></span><br><span class="line"></span><br><span class="line">        regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">        <span class="keyword">regmatch_t</span> pm[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">while</span>(getline(LRC_in, str)) &#123;</span><br><span class="line">            result = regexec(&amp;reg, str.c_str(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (result == REG_NOMATCH) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">                regerror(result, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[ERROR] Error on regexec: %s\n"</span>,ebuf);</span><br><span class="line">                regfree(&amp;reg);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">char</span> * line = str.c_str();</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> microseconds = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x].rm_so != -<span class="number">1</span>; x++) &#123;</span><br><span class="line">                    <span class="keyword">char</span> * mstr = strndup(line + pm[x].rm_so, pm[x].rm_eo-pm[x].rm_so);</span><br><span class="line">                    <span class="keyword">if</span> (pos % <span class="number">3</span> == <span class="number">0</span>) microseconds += atoll(mstr) * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pos % <span class="number">3</span> == <span class="number">1</span>) microseconds += atoll(mstr) * <span class="number">1000</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        microseconds += atoll(mstr) * <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">char</span> * lrc = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">512</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="built_in">strlen</span>(line); i++)</span><br><span class="line">                            lrc[i - <span class="number">10</span>] = line[i];</span><br><span class="line">                        <span class="keyword">if</span> (index != <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator lyric = lyrics.begin(); lyric != lyrics.end(); lyric++) &#123;</span><br><span class="line">                                <span class="keyword">long</span> <span class="keyword">long</span> microsecondInRecord = lyric-&gt;first;</span><br><span class="line">                                <span class="keyword">if</span> (microseconds &gt;= microsecondInRecord - <span class="number">300</span> &amp;&amp; microseconds &lt;= microsecondInRecord + <span class="number">300</span>) &#123;</span><br><span class="line">                                    lyrics[microsecondInRecord].push_back(<span class="built_in">string</span>(lrc));</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> lyrics[microseconds].push_back(<span class="built_in">string</span>(lrc));</span><br><span class="line">                        <span class="built_in">memset</span>(lrc, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">512</span>);</span><br><span class="line">                        <span class="built_in">free</span>(lrc);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">free</span>(mstr);</span><br><span class="line">                    pos++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator lyric = lyrics.begin(); lyric != lyrics.end(); lyric++) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> microseconds = lyric-&gt;first;</span><br><span class="line">        <span class="keyword">double</span> seconds = microseconds / <span class="number">1000.0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = seconds / <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">double</span> sec = seconds - <span class="number">60</span> * min;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%02d:%05.2lf] "</span>,min,sec);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; t = lyrics[microseconds];</span><br><span class="line">        t.reserve(argc - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (! t.empty()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s "</span>,t.back().c_str());</span><br><span class="line">            t.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</lyric_1>]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-23 09:22:47</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="https://blog.0xbbc.com/2015/03/qq%E9%9F%B3%E4%B9%90%E7%9A%84qrc%E6%AD%8C%E8%AF%8D%E5%88%86%E6%9E%90/">reference</a></p>
<h2 id="QQ音乐的QRC歌词分析">QQ音乐的QRC歌词分析</h2><h3 id="QRC_Sample">QRC Sample</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;QrcInfos&gt;</span><br><span class="line">&lt;QrcHeadInfo SaveTime="<span class="number">1400298876</span>" Version="100"/&gt;</span><br><span class="line">&lt;LyricInfo LyricCount="1"&gt;</span><br><span class="line">&lt;Lyric_1 LyricType="1" LyricContent="[ti:<span class="keyword">A</span> Sky Full of Stars]</span><br><span class="line">[ar:Coldplay]</span><br><span class="line">[al:Ghost Stories]</span><br><span class="line">[by:]</span><br><span class="line">[offset:0]</span><br><span class="line">[<span class="number">750,1330</span>]<span class="keyword">A</span> (<span class="number">750,180</span>)Sky (<span class="number">930,180</span>)Full (<span class="number">1110,150</span>)of (<span class="number">1260,180</span>)Stars (<span class="number">1440,140</span>)- (<span class="number">1580,160</span>)Coldplay(<span class="number">1740,340</span>)</span><br><span class="line">[<span class="number">17598,1070</span>]Cause (<span class="number">17598,230</span>)you're (<span class="number">17828,210</span>)a (<span class="number">18038,250</span>)sky,(<span class="number">18288,380</span>)</span><br><span class="line">[<span class="number">19488,2660</span>]cause (<span class="number">19488,210</span>)you're (<span class="number">19698,260</span>)a (<span class="number">19958,200</span>)sky (<span class="number">20158,1130</span>)full (<span class="number">21288,220</span>)of (<span class="number">21508,260</span>)stars(<span class="number">21768,380</span>)</span><br><span class="line">[<span class="number">25128,2850</span>]I'm (<span class="number">25128,270</span>)gonna (<span class="number">25398,350</span>)give (<span class="number">25748,550</span>)you (<span class="number">27028,220</span>)my (<span class="number">27248,350</span>)heart(<span class="number">27598,380</span>)</span><br><span class="line">[<span class="number">33028,1180</span>]Cause (<span class="number">33028,180</span>)you're (<span class="number">33208,210</span>)a (<span class="number">33418,230</span>)sky,(<span class="number">33648,560</span>)</span><br><span class="line">[<span class="number">34808,2710</span>]cause (<span class="number">34808,430</span>)you're (<span class="number">35238,190</span>)a (<span class="number">35428,460</span>)sky (<span class="number">35888,820</span>)full (<span class="number">36708,190</span>)of (<span class="number">36898,230</span>)stars(<span class="number">37128,390</span>)</span><br><span class="line">[<span class="number">40858,2499</span>]Cause (<span class="number">40858,180</span>)you (<span class="number">41038,190</span>)light (<span class="number">41228,1270</span>)up (<span class="number">42498,200</span>)the (<span class="number">42698,200</span>)path(<span class="number">42898,459</span>)</span><br><span class="line">[<span class="number">48257,4709</span>]I (<span class="number">48257,260</span>)don't (<span class="number">48517,260</span>)care, (<span class="number">48777,460</span>)go (<span class="number">50017,240</span>)on (<span class="number">50257,360</span>)and (<span class="number">50617,220</span>)tear (<span class="number">50837,950</span>)me (<span class="number">51787,520</span>)apart(<span class="number">52307,659</span>)</span><br><span class="line">[<span class="number">55896,2909</span>]I (<span class="number">55896,300</span>)don't (<span class="number">56196,250</span>)care (<span class="number">56446,899</span>)if (<span class="number">57345,390</span>)you (<span class="number">57735,270</span>)do(<span class="number">58005,800</span>)</span><br><span class="line">[<span class="number">63625,1020</span>]Cause (<span class="number">63625,200</span>)in (<span class="number">63825,220</span>)a (<span class="number">64045,210</span>)sky,(<span class="number">64255,390</span>)</span><br><span class="line">[<span class="number">65585,2580</span>]cause (<span class="number">65585,200</span>)in (<span class="number">65785,190</span>)a (<span class="number">65975,180</span>)sky (<span class="number">66155,630</span>)full (<span class="number">67405,190</span>)of (<span class="number">67595,200</span>)stars(<span class="number">67795,370</span>)</span><br><span class="line">[<span class="number">69215,1130</span>]I (<span class="number">69215,200</span>)think (<span class="number">69415,160</span>)I (<span class="number">69575,170</span>)saw (<span class="number">69745,260</span>)you(<span class="number">70005,340</span>)</span><br><span class="line">[<span class="number">102247,1010</span>]Cause (<span class="number">102247,240</span>)you're (<span class="number">102487,210</span>)a (<span class="number">102697,220</span>)sky,(<span class="number">102917,340</span>)</span><br><span class="line">[<span class="number">103967,2550</span>]cause (<span class="number">103967,260</span>)you're (<span class="number">104227,190</span>)a (<span class="number">104417,210</span>)sky (<span class="number">104627,330</span>)full (<span class="number">105677,230</span>)of (<span class="number">105907,230</span>)stars(<span class="number">106137,380</span>)</span><br><span class="line">[<span class="number">109717,3710</span>]I (<span class="number">109717,210</span>)want (<span class="number">109927,210</span>)to (<span class="number">110137,200</span>)die (<span class="number">110337,360</span>)in (<span class="number">111527,210</span>)your (<span class="number">111737,220</span>)arms, (<span class="number">111957,440</span>)arms(<span class="number">113107,320</span>)</span><br><span class="line">[<span class="number">117507,4609</span>]Cause (<span class="number">117507,220</span>)you (<span class="number">117727,190</span>)get (<span class="number">117917,190</span>)lighter (<span class="number">118107,350</span>)the (<span class="number">119307,220</span>)more (<span class="number">119527,1090</span>)it (<span class="number">120617,510</span>)gets (<span class="number">121127,390</span>)dark(<span class="number">121517,599</span>)</span><br><span class="line">[<span class="number">125096,2730</span>]I'm (<span class="number">125096,200</span>)going (<span class="number">125296,240</span>)to (<span class="number">125536,340</span>)give (<span class="number">125876,1000</span>)you (<span class="number">126876,200</span>)my (<span class="number">127076,250</span>)heart(<span class="number">127326,500</span>)</span><br><span class="line">[<span class="number">131126,2840</span>]And (<span class="number">131126,450</span>)I (<span class="number">131576,1180</span>)don't (<span class="number">132756,470</span>)care,(<span class="number">133226,740</span>)</span><br><span class="line">[<span class="number">134666,2600</span>]go (<span class="number">134666,210</span>)on (<span class="number">134876,260</span>)and (<span class="number">135136,190</span>)tear (<span class="number">135326,1150</span>)me (<span class="number">136476,370</span>)apart(<span class="number">136846,420</span>)</span><br><span class="line">[<span class="number">140456,2580</span>]And (<span class="number">140456,210</span>)I (<span class="number">140666,290</span>)don't (<span class="number">140956,200</span>)care (<span class="number">141156,690</span>)if (<span class="number">141846,450</span>)you (<span class="number">142296,210</span>)do(<span class="number">142506,530</span>)</span><br><span class="line">[<span class="number">148266,960</span>]Cause (<span class="number">148266,190</span>)in (<span class="number">148456,210</span>)a (<span class="number">148666,190</span>)sky,(<span class="number">148856,370</span>)</span><br><span class="line">[<span class="number">150026,2890</span>]cause (<span class="number">150026,220</span>)in (<span class="number">150246,180</span>)a (<span class="number">150426,200</span>)sky (<span class="number">150626,1220</span>)full (<span class="number">151846,210</span>)of (<span class="number">152056,220</span>)stars(<span class="number">152276,640</span>)</span><br><span class="line">[<span class="number">153956,3280</span>]I (<span class="number">153956,190</span>)think (<span class="number">154146,200</span>)I (<span class="number">154346,340</span>)see (<span class="number">154686,290</span>)you(<span class="number">154976,2260</span>)</span><br><span class="line">[<span class="number">161426,1989</span>]I (<span class="number">161426,210</span>)think (<span class="number">161636,170</span>)I (<span class="number">161806,570</span>)see (<span class="number">162376,460</span>)you(<span class="number">162836,579</span>)</span><br><span class="line">[<span class="number">217294,1340</span>]Because (<span class="number">217294,300</span>)you're (<span class="number">217594,250</span>)a (<span class="number">217844,330</span>)sky,(<span class="number">218174,460</span>)</span><br><span class="line">[<span class="number">219324,2580</span>]you're (<span class="number">219324,240</span>)a (<span class="number">219564,240</span>)sky (<span class="number">219804,1130</span>)full (<span class="number">220934,220</span>)of (<span class="number">221154,280</span>)stars(<span class="number">221434,470</span>)</span><br><span class="line">[<span class="number">222474,1740</span>]Such (<span class="number">222474,260</span>)a (<span class="number">222734,260</span>)Heavenly (<span class="number">222994,570</span>)view(<span class="number">223564,650</span>)</span><br><span class="line">[<span class="number">229794,3499</span>]You're (<span class="number">229794,210</span>)such (<span class="number">230004,200</span>)a (<span class="number">230204,220</span>)Heavenly (<span class="number">230424,709</span>)view(<span class="number">231133,2160</span>)</span><br><span class="line">"/&gt;</span><br><span class="line">&lt;/LyricInfo&gt;</span><br><span class="line">&lt;/QrcInfos&gt;</span><br></pre></td></tr></table></figure>
<p>简单来说就是一份XML文档，</p>
<ol>
<li>根节点是<code>&lt;QrcInfos&gt;</code>。</li>
<li>子节点<code>&lt;QrcHeadInfo SaveTime=&quot;1400298876&quot; Version=&quot;100&quot;/&gt;</code>记录了这份QRC歌词的保存时间和版本号，这里的版本应该是指当前QRC的版本，而非歌词内容的版本。</li>
<li>接下来的<LyricInfo LyricCount="1">记录了这份QRC里面保存的歌词数量。</li>
<li>然后根据歌词数量，从1开始，对应歌词的节点名为&lt;Lyric_$i<br>其中$i为对应的index。</li>
</ol>
<p>比如，第一个歌词就应该是：</p>
<Lyric_1 LyricType="1" LyricContent="Lyric Content ... "/>

<ol>
<li>LyricContent 前面部分和普通的LRC一样，但是在时间轴部分用了新的格式。</li>
</ol>]]>
    
    </summary>
    
      <category term="Media" scheme="http://ytlvy.com/tags/Media/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Microsoft Office 2016 crack]]></title>
    <link href="http://ytlvy.com/2015/09/01/Microsoft-Office-2016-crack/"/>
    <id>http://ytlvy.com/2015/09/01/Microsoft-Office-2016-crack/</id>
    <published>2015-09-01T13:58:26.000Z</published>
    <updated>2015-09-01T13:58:44.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 15:17:41</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://bbs.feng.com/read-htm-tid-9789140.html" target="_blank" rel="external">reference</a></p>
<h2 id="Microsoft_Office_2016_(15-13-1)_破解步骤">Microsoft Office 2016 (15.13.1) 破解步骤</h2><h3 id=""> </h3><ol>
<li>制作自签名证书，并将其命名为Codesign；制作自签名证书的方法参见：[url=<a href="http://hiderefer.com/?http://bd808.com/blog/2013/10/21" target="_blank" rel="external">http://hiderefer.com/?http://bd808.com/blog/2013/10/21</a> … tificate-for-xcode/]<a href="http://bd808.com/blog/2013/10/21/creati" target="_blank" rel="external">http://bd808.com/blog/2013/10/21/creati</a> … for-xcode/[/url]。</li>
<li>确保Microsoft Office 2016 15.13.1为干净安装的版本，如果希望测试某个App是否可行，可以单独下载该更新，安装一遍。下载位置参见：<a href="https://support.microsoft.com/zh-cn/kb/3082420。" target="_blank" rel="external">https://support.microsoft.com/zh-cn/kb/3082420。</a></li>
<li>执行下面的脚本，一个一个来，不宜一次全部执行。</li>
<li>在执行过程中，会询问要替换现有证书，是否允许，同意替换。</li>
<li>如果在启动过程中出现要联机验证，拒绝就是了。</li>
</ol>
<h3 id="-1"> </h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">read -s -n1 -p  "Patching Microsoft Office Outlook (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>Outlook.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Outlook.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Outlook.app</span><br><span class="line"></span><br><span class="line">read -s -n1 -p  "Patching Microsoft Office Word (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>Word.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Word.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Word.app</span><br><span class="line"></span><br><span class="line">read -s -n1 -p  "Patching Microsoft Office Excel (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>Excel.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Excel.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Excel.app</span><br><span class="line"></span><br><span class="line">read -s -n1 -p  "Patching Microsoft Office PowerPoint (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>PowerPoint.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>PowerPoint.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>PowerPoint.app</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 15:17:41</li>
<li>]]>
    </summary>
    
      <category term="work" scheme="http://ytlvy.com/tags/work/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Inter-Process Communication]]></title>
    <link href="http://ytlvy.com/2015/09/01/Inter-Process-Communication/"/>
    <id>http://ytlvy.com/2015/09/01/Inter-Process-Communication/</id>
    <published>2015-09-01T13:55:28.000Z</published>
    <updated>2015-09-01T13:55:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Inter-Process_Communication">Inter-Process Communication</h2><h3 id="Mach_Ports">Mach Ports</h3><p>Sending a message<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">natural_t</span> data;</span><br><span class="line"><span class="keyword">mach_port_t</span> port;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">    <span class="keyword">mach_msg_body_t</span> body;</span><br><span class="line">    <span class="keyword">mach_msg_type_descriptor_t</span> type;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line">message.header = (<span class="keyword">mach_msg_header_t</span>) &#123;</span><br><span class="line">    .msgh_remote_port = port,</span><br><span class="line">    .msgh_local_port = MACH_PORT_NULL,</span><br><span class="line">    .msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, <span class="number">0</span>),</span><br><span class="line">    .msgh_size = <span class="keyword">sizeof</span>(message)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.body = (<span class="keyword">mach_msg_body_t</span>) &#123;</span><br><span class="line">    .msgh_descriptor_count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.type = (<span class="keyword">mach_msg_type_descriptor_t</span>) &#123;</span><br><span class="line">    .pad1 = data,</span><br><span class="line">    .pad2 = <span class="keyword">sizeof</span>(data)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mach_msg_return_t</span> error = mach_msg_send(&amp;message.header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>receiving<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mach_port_t</span> port;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">    <span class="keyword">mach_msg_body_t</span> body;</span><br><span class="line">    <span class="keyword">mach_msg_type_descriptor_t</span> type;</span><br><span class="line">    <span class="keyword">mach_msg_trailer_t</span> trailer;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mach_msg_return_t</span> error = mach_msg_receive(&amp;message.header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    <span class="keyword">natural_t</span> data = message.type.pad1;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="CFMachPort_&amp;&amp;_NSMachPort">CFMachPort &amp;&amp; NSMachPort</h3><p>Fortunately, higher-level APIs for Mach ports are provided by Core Foundation and Foundation. CFMachPort / NSMachPort are wrappers on top of the kernel APIs that can be used as a runloop source, while CFMessagePort / NSMessagePort facilitate synchronous communication between two ports.</p>
<p>CFMessagePort is actually quite nice for simple one-to-one communication. In just a few lines of code, a local named port can be attached as a runloop source to have a callback run each time a message is received:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">CFDataRef</span> Callback(<span class="built_in">CFMessagePortRef</span> port,</span><br><span class="line">                          SInt32 messageID,</span><br><span class="line">                          <span class="built_in">CFDataRef</span> data,</span><br><span class="line">                          <span class="keyword">void</span> *info)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFMessagePortRef</span> localPort =</span><br><span class="line">    <span class="built_in">CFMessagePortCreateLocal</span>(<span class="literal">nil</span>,</span><br><span class="line">                             <span class="built_in">CFSTR</span>(<span class="string">"com.example.app.port.server"</span>),</span><br><span class="line">                             Callback,</span><br><span class="line">                             <span class="literal">nil</span>,</span><br><span class="line">                             <span class="literal">nil</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFRunLoopSourceRef</span> runLoopSource =</span><br><span class="line">    <span class="built_in">CFMessagePortCreateRunLoopSource</span>(<span class="literal">nil</span>, localPort, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFRunLoopAddSource</span>(<span class="built_in">CFRunLoopGetCurrent</span>(),</span><br><span class="line">                   runLoopSource,</span><br><span class="line">                   k<span class="built_in">CFRunLoopCommonModes</span>);</span><br></pre></td></tr></table></figure>
<p>Sending data<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFDataRef</span> data;</span><br><span class="line">SInt32 messageID = <span class="number">0x1111</span>; <span class="comment">// Arbitrary</span></span><br><span class="line"><span class="built_in">CFTimeInterval</span> timeout = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFMessagePortRef</span> remotePort =</span><br><span class="line">    <span class="built_in">CFMessagePortCreateRemote</span>(<span class="literal">nil</span>,</span><br><span class="line">                              <span class="built_in">CFSTR</span>(<span class="string">"com.example.app.port.client"</span>));</span><br><span class="line"></span><br><span class="line">SInt32 status =</span><br><span class="line">    <span class="built_in">CFMessagePortSendRequest</span>(remotePort,</span><br><span class="line">                             messageID,</span><br><span class="line">                             data,</span><br><span class="line">                             timeout,</span><br><span class="line">                             timeout,</span><br><span class="line">                             <span class="literal">NULL</span>,</span><br><span class="line">                             <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (status == k<span class="built_in">CFMessagePortSuccess</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Distributed_Notifications">Distributed Notifications</h3><p>there is also a lesser-known Core Foundation API, CFNotificationCenterGetDistributedCenter that allows notifications to be communicated system-wide as well.</p>
<p>listen for notifications<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Callback(<span class="built_in">CFNotificationCenterRef</span> center,</span><br><span class="line">                     <span class="keyword">void</span> *observer,</span><br><span class="line">                     <span class="built_in">CFStringRef</span> name,</span><br><span class="line">                     <span class="keyword">const</span> <span class="keyword">void</span> *object,</span><br><span class="line">                     <span class="built_in">CFDictionaryRef</span> userInfo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterRef</span> distributedCenter =</span><br><span class="line">    <span class="built_in">CFNotificationCenterGetDistributedCenter</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationSuspensionBehavior</span> behavior =</span><br><span class="line">        <span class="built_in">CFNotificationSuspensionBehaviorDeliverImmediately</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterAddObserver</span>(distributedCenter,</span><br><span class="line">                                <span class="literal">NULL</span>,</span><br><span class="line">                                Callback,</span><br><span class="line">                                <span class="built_in">CFSTR</span>(<span class="string">"notification.identifier"</span>),</span><br><span class="line">                                <span class="literal">NULL</span>,</span><br><span class="line">                                behavior);</span><br></pre></td></tr></table></figure></p>
<p>Sending a distributed notification<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *object;</span><br><span class="line"><span class="built_in">CFDictionaryRef</span> userInfo;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterRef</span> distributedCenter =</span><br><span class="line">    <span class="built_in">CFNotificationCenterGetDistributedCenter</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterPostNotification</span>(distributedCenter,</span><br><span class="line">                                     <span class="built_in">CFSTR</span>(<span class="string">"notification.identifier"</span>),</span><br><span class="line">                                     object,</span><br><span class="line">                                     userInfo,</span><br><span class="line">                                     <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>
<p>Of all of the ways to link up two applications, distributed notifications are by far the easiest. It wouldn’t be a great idea to use them to send large payloads, but for simple tasks like synchronizing preferences or triggering a data fetch, distributed notifications are perfect.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Inter-Process_Communication">Inter-Process Communication</h2><h3 id="Mach_Ports">Mach Ports</h3><p>Sending a message<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">natural_t</span> data;</span><br><span class="line"><span class="keyword">mach_port_t</span> port;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">    <span class="keyword">mach_msg_body_t</span> body;</span><br><span class="line">    <span class="keyword">mach_msg_type_descriptor_t</span> type;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line">message.header = (<span class="keyword">mach_msg_header_t</span>) &#123;</span><br><span class="line">    .msgh_remote_port = port,</span><br><span class="line">    .msgh_local_port = MACH_PORT_NULL,</span><br><span class="line">    .msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, <span class="number">0</span>),</span><br><span class="line">    .msgh_size = <span class="keyword">sizeof</span>(message)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.body = (<span class="keyword">mach_msg_body_t</span>) &#123;</span><br><span class="line">    .msgh_descriptor_count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.type = (<span class="keyword">mach_msg_type_descriptor_t</span>) &#123;</span><br><span class="line">    .pad1 = data,</span><br><span class="line">    .pad2 = <span class="keyword">sizeof</span>(data)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mach_msg_return_t</span> error = mach_msg_send(&amp;message.header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How Not to Crash]]></title>
    <link href="http://ytlvy.com/2015/09/01/How-Not-to-Crash/"/>
    <id>http://ytlvy.com/2015/09/01/How-Not-to-Crash/</id>
    <published>2015-09-01T13:54:16.000Z</published>
    <updated>2015-09-01T13:54:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="How_Not_to_Crash">How Not to Crash</h1><h2 id="KVO_and_Manual_Bindings">KVO and Manual Bindings</h2><h3 id="Bindings_循环引用">Bindings 循环引用</h3><p>假定按钮有 <code>title</code> 属性, 此属性和 controller 的 kTitleKey 绑定.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> NSString *kTitleKey = @<span class="string">"title"</span>;</span><br><span class="line">[self.button <span class="string">bind:</span>kTitleKey <span class="string">toObject:</span>self <span class="string">withKeyPath:</span>kTitleKey <span class="string">options:</span>nil];</span><br></pre></td></tr></table></figure>
<p>以上代码会造成 crash.</p>
<p>原因: 绑定 retain 了 <code>toObject</code>, 也就是说 <code>button</code> 持有了 <code>controller</code>, 同时 <code>controller</code> 又持有 <code>button</code><br>从而造成<strong>循环引用</strong>。</p>
<p>第二种可能, 当 controller 被释放后, 如果监听未取消, 也会造成崩溃</p>
<h3 id="KVO_意味着完美">KVO 意味着完美</h3><p>假设我们有个 model 模块, model.title 的改变会更新 controller.title, 然后更新 button.title.</p>
<p>在 controller 中:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.modelObject</span>.​title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)keyPaths​ForValues​AffectingTitle &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:​<span class="string">@"modelObject.title"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>以下情况会造成崩溃: 当 modelObject 被释放后, 因为他还还有 observer.<br>而如果 controller 持有 modelObject 的话, 又多了一个废弃的对象.</p>
<h3 id="不完美解决方案">不完美解决方案</h3><p>controller 有一个方法 <code>invalidate</code> 来打破循环持有. 一旦破坏后, dealloc 方法将被顺利执行.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)invalidate &#123;</span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.button</span> unbind:kTitleKey];</span><br><span class="line">  <span class="keyword">self</span><span class="variable">.modelObject</span> = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不完美的原因: 引用计数是一个很好的方案, 它保证了在没有扔和强引用的情况下, dealloc 被调用. 这也使得 dealloc 方法成为一个很好的地方来处理 observer 的删除和其他一些事情.</p>
<p>然而当你使用 invalidate 方法时, 等于你手动来解决引用计数的问题. 你需要在适当正确的时间来调用该方法.然而这是很难保证永远不犯错的.</p>
<h3 id="比较好的解决方案">比较好的解决方案</h3><p>在 controller 中放弃使用 <code>keyPaths​ForValues​AffectingTitle</code> 和 <code>bind:​toObject:​withKeyPath:​options:</code>, 采用自定义 setter.</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)setTitle:(NSString *)<span class="built_in">title</span> &#123;</span><br><span class="line">  _title = <span class="built_in">title</span>;</span><br><span class="line">  self.button.<span class="built_in">title</span> = <span class="built_in">title</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这解决了一半的问题, 当 controller.title 更新时, button.title 也会随之更新</p>
<p>我们不能对 modelObject 做同样的操作, 因为 modelObject 不知道 controller. 所以, 我们采用 controller 来监控 modelObject.title</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.modelObject <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>​kTitleKey <span class="string">options:</span><span class="number">0</span> <span class="string">context:</span>​kTitleContext];</span><br></pre></td></tr></table></figure>
<p>然后再 KVO 方法中 监听 kTitleContext, 然后 <code>self.title = self.modelObject.title</code>. 这样就没有引用循环, 但是需要在 controller 的 <code>dealloc</code> 方法中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_modelObject <span class="string">removeObserver:</span>​self <span class="string">forKeyPath:</span>kTitleKey <span class="string">context:</span>​kTitleContext];</span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4><p>此方案修复了循环引用的问题, 同时也不需要你在特定的时候来手动调用 <code>invalidate</code> 方法, 很安全.</p>
<p>一些建议:</p>
<ol>
<li>不要在任何情况下使用 <code>bind:​toObject:​withKeyPath:​options:</code>. </li>
<li>采用自定义 setter 比采用自定义的 getter 要好, 当处理变化传递的时候</li>
<li>避免采用手动的方式来干预引用计数, 因为我们总会犯错.</li>
</ol>
<h2 id="Mutation_Exceptions">Mutation Exceptions</h2><p>当你遍历一个可变集合时, 突然收到一个遍历过程中,集合被改变的<code>error</code>, 然后程序崩溃.你可以通过一个简单的技巧来避免此类问题: 不要遍历一个可变的集合.</p>
<h3 id="不同意">不同意</h3><p>也许你认为只要不在集合变化的情况下遍历即可, 你也许有足够的认知在你的代码中,可以安全的遍历一个可变的集合.当然,你可以这样想, 你也应该这样想.</p>
<p>然而, 写出不崩溃的代码就是要排除一切可能的情况. 这是关于最小化犯错的机会, 同时最小化在未来的更新中出现错误.</p>
<h3 id="可变集合不应该作为公共接口">可变集合不应该作为公共接口</h3><p>一个对象, 极少乃至不应该出现有可变集合作为公共接口的情况, 可变集合应该在对象的内部.(即使不可避免, 这样的集合也应该被声明为只读状态)</p>
<p>示例如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *operations;</span><br></pre></td></tr></table></figure></p>
<p>内部:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *mutableOperations;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)operations &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.mutableOperations</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这完全合法, 因为 mutableOperations 是一个 NSMutableArray, 同时也是一个 NSArray.</p>
<h3 id="被声明为不可变集合,_实际上就应该是不可变集合">被声明为不可变集合, 实际上就应该是不可变集合</h3><p>在上面的例子中, 你声明了 <code>operations</code> 作为一个 NSArray (可以安全的遍历), 另外一个人, 也可能是你自己, 在六个月后不会意识到实际上, 返回的是一个可变的集合, 其是不能保证被安全遍历的.</p>
<p>正确的做法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)operations &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">self</span><span class="variable">.mutableOperations</span> <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也许会考虑到效率或者内存问题, 然而我能够确认: 我是一个效率极客, 我经过大量<code>Instruments</code>的测试来确认事情反而会更快, 并使用了很少的内存. 同时我也从未发现这会造成任何问题.如果你的应用存在内存问题, 可定不是这个引起的, 你应该关注其他的方面.(也许你认为应该采用 @autoreleasepool 来尽早释放这样备份)</p>
<h3 id="奖励:_不要信任任何人">奖励: 不要信任任何人</h3><p>我曾经修复过一个可变造成的错误, 当遍历 <code>NSTextStorage layoutManagers</code>的时候:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span> *layoutManagers;</span><br></pre></td></tr></table></figure>
<p>这个属性是 NSArray, 可以安全的遍历, 真好. 然而这是个谎言, 在 debugger 中我发现, 它实际上是一个 NSMutableArray(__NSArrayM). </p>
<p>通常的建议, 当你从其他地方获得一个集合时, 直接遍历他的 copy.</p>
<h2 id="NSNotification">NSNotification</h2><p>通常我更喜欢 NSNotification (比起 KVO 绑定来说). 因为 NSNotification 可以更容易不犯错</p>
<h3 id="造成崩溃仅有的情况">造成崩溃仅有的情况</h3><p>当一个对象注册了一个监听, 然后在没有取消注册的情况下, 此对象被释放了, 然后 app 会在 notification 被 post 的时候崩溃. 这是你应该避免的, 下面是来介绍如何避免的.</p>
<h3 id="The_Big_Rule">The Big Rule</h3><p>我有一个简单, 粗暴的规则: NSNotifications 应该在主线程被 post. 没有例外, 如果一段代码在一个线程中执行, 然后他需要发起通知, 则应该在主线程来发起.</p>
<p>这避免了所有NSNotification在子线程中发起的神奇的 bug, 同时也避免了由取消注册引起的资源竞争.</p>
<p>其实一个应用的所有代码都应该在主线程中被执行的. 在其他线程中执行的代码应该和其他一切隔绝, 同时在多个对象协同工作时, 应该采用 <code>delegate</code> 方式.</p>
<p><strong>确保所有的消息都在主线程被发起(post)</strong>.</p>
<h3 id="Blanket_Unregistering">Blanket Unregistering</h3><p>不应该采用单独释放的方式</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[[NSNotificationCenter defaultCenter]</span> <span class="tag">removeObserver</span><span class="pseudo">:self</span> <span class="tag">name</span><span class="pseudo">:kSomeNotificationName</span> <span class="tag">object</span><span class="pseudo">:someObject</span>];</span><br><span class="line"><span class="attr_selector">[[NSNotificationCenter defaultCenter]</span> <span class="tag">removeObserver</span><span class="pseudo">:self</span> <span class="tag">name</span><span class="pseudo">:kSomeOtherNotificationName</span> <span class="tag">object</span><span class="pseudo">:someOtherObject</span>];</span><br></pre></td></tr></table></figure>
<p>应该采用 <code>[[NSNotificationCenter defaultCenter] removeObserver:self];</code> 的方式来取消注册, 以此来避免, 他人由于大意而忘记取消的问题.</p>
<h3 id="Beware_Double_Registrations_小心多次注册">Beware Double Registrations 小心多次注册</h3><p>多次注册会导致被调用多次, 系统没有自动合并的操作.(这种情况在早先的代码中经常出现, 那时人们认为注册应该被写在 viewDidLoad中, 然而记住一件事情, 视图是可能被 unload 和 reloaded, 这也就意味着多次注册)</p>
<p>你的通知回调中应该有防止多次调用的相关逻辑, 同时一个对象也不应该被多次注册同一个消息监听</p>
<h3 id="Register_in_init,_unregister_in_dealloc">Register in init, unregister in dealloc</h3><p>在 init 方法中注册, 在 dealloc 中取消监听.因为一个对象的 init 方法只能被调用一次, 同理 dealloc 也是.我们可以通过这个特点来平衡 注册和取消.</p>
<h3 id="Avoid_addObserverForName">Avoid addObserverForName</h3><p>一些人喜欢 <code>-[NSNotificationCenter addObserverForName:​object:​queue:​usingBlock:]</code>, 因为这看来很时尚, 因为他是基于 block 的.</p>
<p>但这是个坏主意, 你可能确实少写了一个函数, 但是却多持有了一个对象, 同时还需要在合适的时间来调用 <code>removeObserver:</code>. 这意味着空取消是不生效的, 你需要自己来保证其正确性.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> observer = [[<span class="built_in">NSNotificationCenter</span> defaultCenter] </span><br><span class="line">                        addObserverForName:<span class="string">@"com.app.livedata.jsonupdated"</span></span><br><span class="line">                          object:<span class="literal">nil</span> </span><br><span class="line">                          queue:[<span class="built_in">NSOperationQueue</span> mainQueue] </span><br><span class="line">                          usingBlock:^(<span class="built_in">NSNotification</span> *notif) &#123;</span><br><span class="line">                              <span class="built_in">NSLog</span>(<span class="string">@"JSONUPDATED"</span>);</span><br><span class="line">                          &#125;];</span><br></pre></td></tr></table></figure>
<p>在 dealloc 中:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] removeObserver:observer]<span class="comment">;</span></span><br><span class="line">observer = nil<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Threading">Threading</h2><p>简单的规则, 尽量在主线程中操作, 因为现在的设备足够出色. </p>
<h3 id="主线程规则">主线程规则</h3><p>出特殊情况外, 将所有代码在主线程运行, 且仅在主线程运行. </p>
<p>这可以解决很多问题, 例如在主线程 发送通知和取消通知, 在主线程操作 KVO.</p>
<h3 id="Objects_That_Live_in_Their_Own_Little_World">Objects That Live in Their Own Little World</h3><p>如果你发现, 某些操作会造成主线程的阻塞, 必须放到其他线程执行时, 一定要保证这些对象的隔离.例如 JSON 的处理.</p>
<ol>
<li>我不希望 model 层了解 JSON 的存在</li>
<li>我要处理 NSNull, 时间转换, 以及其他一切需要转换的事情</li>
</ol>
<p>我采用 NSOperationQueue 或 GCD queue 来执行 NSData 的转换. (总是采用队列, 不要使用 detachThreadSelector 或者 performSelecotrInBackground)</p>
<p>这些对象被隔离在自己单独的线程中, 他们除了自己和初始化时传入的参数外, 不知道任何的其他外界事物. 一旦在队列中创建, 他们就是不可变的状态, 他们不应该监控任何东西, 也不应该被监听. 这保证了他们是线程安全的.</p>
<h3 id="同时在多个对象协同">同时在多个对象协同</h3><p>某些时候多个对象间需要协同合作, 比如 RSS 分析器. 在这个例子中, 有三个主要对象: <code>SAX praser wrapper</code>, <code>delegate</code>, <code>the intermediate objects the delegate creates</code>(例如返回的对象)</p>
<ol>
<li>The SAX parser wrapper knows about the NSData it was initialized with, and it knows it has a delegate.</li>
<li>The SAX parser delegate knows about the intermediate objects it’s creating.</li>
<li>The intermediate objects don’t know about anything.</li>
</ol>
<p>这时候应该采用 <code>delegate</code> 模式来解决. 以保证对象的隔离以及松散度.</p>
<h3 id="Worst-Case_Scenario">Worst-Case Scenario</h3><p>You really don’t want to update model objects on background threads. It’s a crash-making machine. But testing and profiling may tell you that you need to.</p>
<p>Try to break down the problem. If updating the model is okay except for this one thing — something that involves turning NSData into a UIImage or NSImage, for instance — then move just that slow part to a background task. (Creating an image from data or a file is a perfectly good thing to move off the main thread. It’s easily isolatable.)</p>
<p>It could be that the problem is the database: perhaps you find that it’s otherwise fast to create objects and update properties in memory, even a whole bunch of them. In that case, you might do what I do, which is de-couple the database calls from the main thread. (It’s not that hard: the database code needs to run on a serial background queue, and it should do everything in the exact some order that things happen in the main thread.)</p>
<p>Which is to say: there are options.</p>
<p>But if you still find that you have to update the model on a background thread, then you just have to do it. Remember that the rest of your app is on the main thread, so when posting notifications and so on, do so on the main thread.</p>
<h3 id="Summary">Summary</h3><p>Do everything on the main thread. Don’t even think about queues and background threads. Enjoy paradise!</p>
<p>If, after testing and profiling, you find you do have to move some things to a background queue, pick things that can be perfectly isolated, and make sure they’re perfectly isolated. Use delegates; do not use KVO or notifications.</p>
<p>If, in the end, you still need to do some tricky things — like updating your model on a background queue — remember that the rest of your app is either running on the main thread or is little isolated things that you don’t need to think about while writing this tricky code. Then: be careful, and don’t be optimistic. (Optimists write crashes.)</p>
<h2 id="Threading,_part_2">Threading, part 2</h2><p>The object creating the background task handles the result of the task. This is a hard rule.</p>
<p>Usually the object creating the task is an object that lasts for the lifetime of the app. An example might be an image cache — the cache may get emptied during the lifetime of the app, but the cache object lasts for the duration.</p>
<p>Another example is something like Vesper’s VSAccount object. There’s always a single VSAccount instance. The user may or may not have a server account. The user may change which server account they’re using. But there’s a single VSAccount object which lasts for the lifetime of the app.</p>
<p>(Note: obviously, an app that manages multiple accounts would do things differently. But Vesper manages at most one server account, so this works perfectly well. In Vesper’s case, multiple accounts falls under the YAGNI rule.)</p>
<p>The VSAccount object is responsible for sending http requests to the server and handling the result. It turns JSON into intermediate objects on a background queue.</p>
<p>It calls the JSON processor with NSData-to-process and a callback block. When the processor is finished, it calls that block on the main thread:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(callback)</span> &#123;</span><br><span class="line">  dispatch_async<span class="params">(dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">    callback<span class="params">(parsedObjects)</span></span><br><span class="line">  &#125;)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is such a common pattern for me — calling a block that takes one parameter on the main queue — that I have a common function for it. The JSON processor really just does something like this:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSCallBlockWithParameter<span class="list">(<span class="keyword">callback</span>, parsedObjects)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><code>BSCallBlockWithParameter</code> looks something like this:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(!callback)</span></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line">dispatch_async<span class="params">(dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">  callback<span class="params">(parsedObjects)</span>;</span><br><span class="line">&#125;)</span>;</span><br></pre></td></tr></table></figure>
<p>I use this all the time. Super handy.</p>
<h3 id="The_key_to_making_this_work">The key to making this work</h3><p>I don’t ever want to worry that the object that created the background task might go away, so I create background tasks only from objects that last the lifetime of the app.</p>
<p>You don’t want to get into the situation where an object that creates a background task goes away (or is torn-down partly or completely) before that task is finished and calls back. It’s a potentially complex subject, and I don’t even want to think about it. (I hate the weak-self dance, for starters.)</p>
<p>And that’s exactly the mindset you need when writing code that doesn’t crash: if something is complex, then it’s error-prone. Find a way to make it drop-dead simple.</p>
<p>(You could figure out a complex thing and prove that it’s correct — but will you have doubts later and feel the need to audit that code? Will it break if you breathe on it wrong? Or if someone else touches it?)</p>
<p><strong><em>So I do the simple thing: use objects that won’t get deallocated.</em></strong></p>
<p>But there’s an escape hatch worth remembering: <strong>a callback block can call class methods and C functions safely</strong>. Instance methods are unsafe if the instance disappears — but class methods and C functions are conceptually safe to call.</p>
<p>I don’t use this knowledge very often, but I have found it useful from time to time. Use sparingly if at all.</p>
<h2 id="Properties_and_Accessors">Properties and Accessors</h2><p>This gives me the willies:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)someRandomMethod &#123;</span><br><span class="line">  some stuff…</span><br><span class="line">  <span class="keyword">_t</span>hing = otherThing;</span><br><span class="line">  other stuff…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You could prove that it’s correct. You’re using ARC, so the proper retains and releases are added. And nobody is observing _thing.</p>
<p>Fine. It’s legal and it works.</p>
<p>Say you realize that thing should be observable. So every place you set thing, you bracket the call:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self willChangeValueForKey:kThingKey]</span><span class="comment">;</span></span><br><span class="line"><span class="setting">_thing = <span class="value">otherThing;</span></span></span><br><span class="line"><span class="title">[self didChangeValueForKey:kThingKey]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>Also legal, also works.</p>
<p>The problem is the future: later today, tomorrow, or in six months, you or somebody else writes a custom setter for thing — maybe because you need something like self.needsDisplay = YES when thing is set — and now you have a bug where the view doesn’t redraw whenever thing changes.</p>
<p>Or worse: perhaps that future custom setter tears down an observer and sets up a new one whenever thing changes. Since you’re setting _thing directly, the observations won’t be maintained properly, and you’ll get crashes.</p>
<p>The answer is a simple rule: use the accessor when getting and setting properties.</p>
<p>In other words, do this:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)someRandomMethod &#123;</span><br><span class="line">  some stuff…</span><br><span class="line">  self.<span class="keyword">thing</span> = otherThing;</span><br><span class="line">  other stuff…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This works whether or not you have a custom setter. When setting thing, you don’t have to care one way or the other.</p>
<p>(Here’s the simple test of a programming rule: if you can’t go wrong by following it, but you can go wrong by not following it, then you should follow it.)</p>
<p>(Don’t worry about the performance issue of going through accessors. I’m a performance junkie, and I’ve never seen this become a problem. If your app develops performance issues, profile it and find out the real cause.)</p>
<h3 id="Exceptions">Exceptions</h3><p>You should not go through the accessor in four places: <strong><em>init methods, dealloc, custom getter, and custom setter</em></strong>. This avoids side effects.</p>
<p>If you need a side effect — removing an observer, for instance, in dealloc — that you’d normally place in the setter, make it a separate method and call it from the setter and from dealloc. (Also consider that adding and removing observers outside of init and dealloc is a possible sign that your code needs refactoring.)</p>
<h3 id="Auto-synthesize">Auto-synthesize</h3><p>Don’t create instance variables, ever. Declare properties instead.</p>
<p>Properties auto-synthesize instance variables. Use @synthesize only when Xcode tells you you need to.</p>
<h3 id="Use_ARC">Use ARC</h3><p>And if you have non-ARC code, upgrade it to use ARC. Manual memory management is error-prone. Even someone with years of experience will make mistakes from time to time, and mistakes can cause crashes (or memory leaks or abandoned memory, at best).</p>
<p>Normally I don’t advocate editing working code that’s running fine — but if you have code that needs maintaining, do yourself and your co-workers a favor and convert it to ARC. (Everybody is going to get worse at manual memory management over time. And there are no points added for being a hero.)</p>
<p>(It is possible to run into performance issues with ARC, particularly if you’re dealing with lots of objects in a loop. Remember to use autorelease pools. And don’t jump to conclusions: use the profiler.)</p>
<p>(Also: the ARC converter may not always do what you want. If you use it, check the changes it makes. Remember that you can convert one file at a time. Targets can have both ARC and non-ARC files.)</p>
<h3 id="Don’t_do-&gt;this">Don’t do-&gt;this</h3><p>This gives me the screaming meemies: thing-&gt;property. No.</p>
<h3 id="dealloc">dealloc</h3><p>If you don’t need dealloc (since you’re using ARC), then don’t create it. There’s no need to set properties to nil in dealloc.</p>
<p>A big exception is delegates: nil out the delegates.</p>
<h3 id="Use_weak">Use weak</h3><p>Weak is awesome. Delegates, for instance, should be weak.</p>
<p>Parents should retain their children, but children should have a weak reference to their parents (if they have a reference at all). Weak gets you out of those invalidate methods where you break retain cycles.</p>
<p>Do not, under any circumstances whatsoever, use unsafe_unretained. It’s a trap. You might as well do this:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#def</span>ine CRASHING_BUG unsafe_unretained</span><br></pre></td></tr></table></figure></p>
<p>It’s literally called unsafe.</p>
<p>Don’t run with scissors. Heck — don’t even touch these scissors. They have a bunch of poison on them.</p>
<h2 id="Dealing_with_Nothing">Dealing with Nothing</h2><p>Consider this line of code:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[thing doStuff]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>If <code>thing</code> is nil, it’s no problem. No crash. Nothing at all happens.</p>
<p>But you can’t generalize from that that nil is okay in all cases:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self doStuff:thing]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>If <code>thing</code> is nil, then what happens? If depends on the implementation of <code>doStuff:</code> — <strong>it might crash</strong>. Consider this code:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menuItem.title = <span class="keyword">thing</span>;</span><br></pre></td></tr></table></figure>
<p>If <code>menuItem</code> is an NSMenuItem, then it crashes when thing is nil. The header for NSMenuItem doesn’t say that, and the documentation only hints at it (“If you do not want a title, use an empty string (@””), not nil.”)</p>
<p>This means you need to make sure thing is non-nil. You may be quite certain that it’s non-nil. But consider a case I once fixed, where thing was the name of a font. There was no reason for me to expect that the system API for getting a font name would ever return nil — except that it did, sometimes (rarely, of course, and never on my machine, no matter what I did).</p>
<p>Things to know:</p>
<ol>
<li><p>Nil receivers are okay — as long as your code is okay with nothing happening.</p>
</li>
<li><p>Nil parameters may or may not be okay. When calling system APIs, the headers and documentation don’t always tell you what could happen. (This may change when they make greater use of nullability annotations.)</p>
</li>
<li><p>Trust no one.</p>
</li>
</ol>
<h3 id="Assertions">Assertions</h3><p>Assertions are a great way of documenting assumptions and requirements, and of making sure those assumptions are true. Assertions should not run in the release build (see the ENABLE_NS_ASSERTIONS Xcode setting).</p>
<p>One of my favorites is NSParameterAssert, which I use almost exclusively as a nil check for parameters that must not be nil.</p>
<p>It’s super-easy to use:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">-</span> (<span class="tag">void</span>)<span class="rule"><span class="attribute">someMethod</span>:<span class="value">(id)someParameter &#123;</span><br><span class="line">  <span class="function">NSParameterAssert</span>(someParameter)</span></span>;</span><br><span class="line">  …<span class="tag">do</span> <span class="tag">whatever</span>…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the future I’ll probably start using nullability annotations and NSParameterAssert. Both. (I’ll also write some Swift code in the future, which is a whole other thing when it comes to nil. But I’m not talking about that today, partly because I’m not yet enough of an expert in Swift to have good advice.)</p>
<p>I also use NSAssert fairly often. NSAssert takes an expression, and a comment — but I’m lazy, and I make the comment nil. (Which is fine in this case.)</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSAssert<span class="list">(<span class="keyword">something</span> == somethingElse, <span class="literal">nil</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>(A note about laziness: the lazy programmer doesn’t write crash bugs, because they don’t want to fix them later.)</p>
<h3 id="My_favorite_crashing_bug">My favorite crashing bug</h3><p>Years ago, my app NetNewsWire had a crash-log catcher. At launch it would grab the latest crash log from disk and offer to send it to me.</p>
<p>With some OS X release (10.5, I think) Apple changed the format for crash logs on disk. I think they had been one file per app, and Apple switched to one file per crash. I had to write new code to handle the new format.</p>
<p>I made the change. It went to beta testers, who used the app extensively. Weeks passed. All good.</p>
<p>Then, on the day I released this version, I got a ton of reports from people who said, “It’s crashing on launch! But it works fine after launching it again.”</p>
<p>Here’s the deal: the new code crashed when there were no crash logs at all. And then, on the next launch — now that there’s a crash log — it would not crash. (Yes, a self-healing crashing bug. In the crash log catcher. Such meta.)</p>
<p>Of course this meant that it crashed immediately for all new users, not just for people who’d been lucky enough never to get a crash.</p>
<p>This was a big reminder to me: always consider the case where there’s nothing. Nothing happens all the time. Nothing is pretty normal. But it might take special handling, and it should always be considered.</p>
<h3 id="A_less_cool_crashing_bug">A less cool crashing bug</h3><p>I don’t think this shipped — I think it was just in beta code.</p>
<p>Vesper syncing talks to a server. The server returns JSON data. The Cocoa JSON deserializer turns JSON nulls into NSNull objects.</p>
<p>Vesper was expecting an NSString, and got an NSNull. Vesper tried to call a string method on that NSNull, and it crashed.</p>
<p>On the surface this seems like a tough case, because you can’t be sure that the type of a given object in JSON text will be what you expect. You’re looking for a string and you get an NSNull.</p>
<p>Well, NSNull is one of those things you want to keep as isolated as possible. It’s a walking code smell (though I don’t know what an alternative would be in the case of JSON nulls). (And you should never deliberately use it outside of JSON. Almost never. Super-duper-rare. Like once every few years, and only if you really, really have to. Maybe not even then.)</p>
<p>This is part of why, as I mentioned previously, I like to turn JSON into intermediate objects. A big part of this is centralizing the handling of NSNull objects — I don’t want them to leak out into other parts of the app, where anything they touch turns stinky.</p>
<p>But there’s another point, which is this: whoever wrote the server side is your sworn enemy. He or she hates you very, very much.</p>
<p>Now, in the case of Vesper, that was me. But I still have to code as if the server author has my personal and professional destruction as their sole motivation. (Even though I know the guy, and he’s cool. He likes kittens.) And that doesn’t mean just checking for NSNull — which is normal in JSON anyway — but being careful with the types of every single piece of data.</p>
<p>Anything could be anything, at any time.</p>
<p>(It’s not turtles all the way down. You’re expecting turtles — but that would be too easy. It might be nothing all the way down.)</p>
<h3 id="Total_other_thing">Total other thing</h3><p><strong><em>Initialize your variables</em></strong>. Just do it. If I had a nickel for every crashing bug I’ve fixed just by initializing a variable to nil — well, I’d have some nickels. You want zero nickels.</p>
<p>Not initializing your variables is like playing with gasoline and saying it’s okay because the matches are in your pocket.</p>
<h2 id="Infrastructure">Infrastructure</h2><p>Even if you think your app is crash-free, you need to collect crash logs — because there’s no such thing as crash-free: it can only be free of known crashing bugs.</p>
<p>There are a few different services for this, and the ones I’ve tried are pretty good, so I’m not going to make a specific recommendation.</p>
<p>But there are a few things it should do:</p>
<p>Crash logs should be collected without a user having to find them and send them to you. It should be automatic-ish (users should probably be prompted, if on OS X; on iOS nobody seems to expect a prompt).</p>
<p>There should be a way to group crash logs, and you should get a total for each group, so you know which ones are frequent and which aren’t.</p>
<p>You should be able to mark a group as resolved.</p>
<p>It’s not enough, of course, just to collect crash logs. You should look at them regularly. (I look at crash logs every morning.)</p>
<h3 id="Bug_tracker">Bug tracker</h3><p>Have one.</p>
<p>For my personal projects I use a combination of Lighthouse, OmniOutliner, and pen-and-paper — but you should use whatever works for you, as long as your crashes get into your bug tracker and don’t get lost.</p>
<p>(Lighthouse is a good bug tracker. For mapping out big new features or entire apps I like OmniOutliner, where I can build a tree of things-to-do. For short-term things — for the 10 steps needed to complete a single task — I like pen and paper, since it’s tiring to rely on short-term memory, since pen and paper doesn’t disturb the on-screen context.)</p>
<h3 id="Errors_and_warnings">Errors and warnings</h3><p>Xcode by default doesn’t turn on enough errors and warnings. I strongly recommend Peter Hosey’s set.</p>
<p>The point is to remove doubt from your code.</p>
<p>I go a step further, which I also recommend: I turn on treat warnings as errors. This means that, yes, I can’t even debug locally if there’s a warning — but the discipline is worth it. It means that whenever my app is actually running, there are not even any warnings.</p>
<h3 id="Instruments">Instruments</h3><p>Instruments is wonderful. It’s a very good idea to check how much memory your app allocates, and it’s super-important to check for leaks.</p>
<p>And if you’re getting crashes, it’s a good idea to use the Zombies tool. Your problem might not be related to zombies, but, when in doubt, it’s worth ruling out.</p>
<h2 id="Mindset">Mindset</h2><p>You know the old line about not writing code that’s as clever as you are, because it will take someone even smarter than you to debug it?</p>
<p>I used to think that means I should write code that’s about 80% as clever as I am. Save a little bit for debugging.</p>
<p>But over the years I’ve come to think that I should write code that’s about 10% as clever as I am. And I’ve come to believe that true cleverness is in making code so clear and obvious that it looks like nothing at all.</p>
<p>And that’s why I have rules like do everything on the main thread except for perfectly isolatable things and avoid unsafe_unretained always and so on.</p>
<p>This means I don’t get bonus points for being a code magician. I don’t pull rabbits out of hats and I certainly don’t walk tightropes. I won’t even look at tightropes.</p>
<p>I do difficult things as needed, but the goal even with the difficult things is to write the simplest and most-readable code that I can. If, in the end, the code looks easy — unimpressive, even, as if a middle-school kid could have written it — then good.</p>
<p>In the small, this means that methods tend to be small and focused with little nesting. In the large, architecture and naming is iterated-over until it feels inevitable, as if no thought went into it because it all must have been obvious.</p>
<p>It means not getting too abstract. Explicitness is obviousness. But it also means not getting too non-general, either — there are times when two or three things are really the same thing, and they can be generalized without harming maintainability. (And there are times when they can’t.)</p>
<p>I avoid tight coupling and large structures — except for when the best solution really is for x to know about y.</p>
<p>And I keep learning and getting better.</p>
<h3 id="Time">Time</h3><p>The thing that separates programming from painting, writing, architecture, and composing music is that there is no finished product. There are released versions, yes, but there’s no finishing, there’s only abandoning.</p>
<p>Code exists in time, and maybe across many people — and you don’t even know how long or who. This should never be out of your mind.</p>
<h3 id="Cape,_mask">Cape, mask</h3><p>When I was younger I wanted to be a code magician — or, really, a hero. But I learned that actual software quality is more important than what I imagine other people think of me.</p>
<p>And, more: quality is a reward that’s almost spiritual. It’s an act of devotion, both selfish and unselfish, to something more important than ego.</p>
<p>Selfish because the process of striving for quality makes you a better person. And unselfish because better code and better software is better for other people.</p>
<p>And the first thing other people ask of your software is that, if they launch it, it stays launched. Any programmer who can’t bring themselves to care about that — or who rationalizes away crashing as a fact of life these days — isn’t taking this great fun we are privileged to have seriously enough.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="How_Not_to_Crash">How Not to Crash</h1><h2 id="KVO_and_Manual_Bindings">KVO and Manual Bindings</h2><h3 id="Bindings_循环引用">Bindings 循环引用</h3><p>假定按钮有 <code>title</code> 属性, 此属性和 controller 的 kTitleKey 绑定.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> NSString *kTitleKey = @<span class="string">"title"</span>;</span><br><span class="line">[self.button <span class="string">bind:</span>kTitleKey <span class="string">toObject:</span>self <span class="string">withKeyPath:</span>kTitleKey <span class="string">options:</span>nil];</span><br></pre></td></tr></table></figure>
<p>以上代码会造成 crash.</p>
<p>原因: 绑定 retain 了 <code>toObject</code>, 也就是说 <code>button</code> 持有了 <code>controller</code>, 同时 <code>controller</code> 又持有 <code>button</code><br>从而造成<strong>循环引用</strong>。</p>
<p>第二种可能, 当 controller 被释放后, 如果监听未取消, 也会造成崩溃</p>
<h3 id="KVO_意味着完美">KVO 意味着完美</h3><p>假设我们有个 model 模块, model.title 的改变会更新 controller.title, 然后更新 button.title.</p>
<p>在 controller 中:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.modelObject</span>.​title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)keyPaths​ForValues​AffectingTitle &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:​<span class="string">@"modelObject.title"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Deep study]]></title>
    <link href="http://ytlvy.com/2015/09/01/iOS-Deep-study/"/>
    <id>http://ytlvy.com/2015/09/01/iOS-Deep-study/</id>
    <published>2015-09-01T13:52:55.000Z</published>
    <updated>2015-09-01T13:53:31.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-23 10:35:14</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="https://blog.0xbbc.com/2015/04/ios-dep%E7%A0%94%E7%A9%B61-%E5%88%9B%E5%BB%BAsection/" target="_blank" rel="external">reference</a></p>
<h1 id="iOS_DEP_研究">iOS DEP 研究</h1><h2 id="创建Section">创建Section</h2><p>将加密的程序放在一个Section中，外壳运行时解密该Section，并执行解密后的程序</p>
<h3 id="通过other_linker_flags创建">通过other linker flags创建</h3><p><a href="http://bbs.iosre.com/t/tweak-app-app-tweak/438" target="_blank" rel="external">这篇文章</a>提到过如何通过创建Section来防止dylib依附。其具体方法是在other linker flags中填入如下内容：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,__RESTRICT,__restrict,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>那么我们要创建自己的Section的话，就可以修改为如下格式：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,SEGMENT_NAME,SECTION_NAME,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<p>这样就可以创建一个size为1，段名字为SEGMENT_NAME，Section名为SECTION_NAME的Section了。</p>
<p>那么因为我们要把加密数据放进去，所以最后一个参数改为我们的加密文件的路径即可。</p>
<p>你可以在ld(1)中的Options that control additional content找到这部分内容。</p>
<a id="more"></a>
<h3 id="通过代码创建">通过代码创建</h3><p>下面来说说怎么用代码创建一个Section。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">__declspec</span>(<span class="function">allocate</span>(<span class="string">"__0xBBC,__code"</span>))</span><br><span class="line"><span class="tag">void</span> <span class="tag">func</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>随后找个地方用一下func()就行，如果func()没有被调用的话，默认不会编译进可执行文件。</p>
<p>之后都将使用第一种方式创建Section。</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.22.44.png" alt=""></p>
<h2 id="获取vmaddr与ASLR">获取vmaddr与ASLR</h2><p>在创建Section之后，我们需要获取该Section的vmaddr和这个外壳程序运行时的ASLR，然后才能正确跳转。</p>
<h3 id="获取vmaddr">获取vmaddr</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import &lt;mach-o/getsect.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;mach-o/loader.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __arm64__ || __x86_64__</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SEGMENT_COMMAND segment_command_64</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SECTION section_64</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SEGMENT_COMMAND segment_command</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SECTION section</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> SEGMENT_COMMAND * myseg = getsegbyname(<span class="string">"__0xBBC"</span>);</span><br><span class="line">        <span class="keyword">if</span> (myseg) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Segment __0xBBC Init Prot: %d\n"</span>,myseg-&gt;initprot);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Segment __0xBBC Max Prot: %d\n"</span>,myseg-&gt;maxprot);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Segment __0xBBC vmaddr: 0x%llX\n"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)myseg-&gt;vmaddr);</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">struct</span> SECTION * mysect = getsectbyname(<span class="string">"__0xBBC"</span>, <span class="string">"__code"</span>);</span><br><span class="line">            <span class="keyword">if</span> (mysect) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Section __code flags: %X\n"</span>,mysect-&gt;flags);</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Section __code size: "</span>&lt;&lt;mysect-&gt;size&lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Section __code addr: 0x%llX\n"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)mysect-&gt;addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>iPod touch 5下的运行结果，64位下会有所不同。</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.37.22.png" alt=""></p>
<p>在MachOView中验证的确是拿到了正确的数据。</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.42.11.png" alt=""></p>
<h3 id="获取ASLR">获取ASLR</h3><p>先引入头文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#import</span> &lt;<span class="tag">dlfcn</span><span class="class">.h</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后同样的，针对32位和64位处理一下。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __arm64__ || __x86_64__</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FILE_BASE_ADDR 0x100000000</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FILE_BASE_ADDR 0x4000</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>最后在适当的地方加上：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dl_info info;</span><br><span class="line"><span class="keyword">if</span> (dladdr((<span class="keyword">const</span> <span class="keyword">void</span> *)main, &amp;info))&#123;</span><br><span class="line">    <span class="keyword">int</span> * fbase = (<span class="keyword">int</span>*)info.dli_fbase;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ASLR: 0x%lX\n"</span>, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;(fbase) - FILE_BASE_ADDR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以通过在lldb里执行：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image <span class="keyword">list</span> -o -<span class="literal">f</span></span><br></pre></td></tr></table></figure></p>
<p>来验证我们所取得的地址的正确性。如下图</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.54.56.png" alt=""></p>
<h2 id="写入Section">写入Section</h2><p>拿到vmaddr和ASLR之后，就可以正确计算出Section的内存地址，然后重新写入数据。不过这里为了演示简便，我们直接把解密之后的数据放在了壳程序的代码中，其实这样调试起来也更方便。</p>
<p>解密之后的数据：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unsignedint sectionData[] = &#123;<span class="number">0xA0E1000E</span>,<span class="number">0xE0800001</span>,<span class="number">0xE12FFF30</span>&#125;<span class="comment">;</span></span><br><span class="line">// Encrypt      Decrypt      ASM</span><br><span class="line">// <span class="number">0xCB927360</span>   <span class="number">0xA0E1000E</span>   <span class="keyword">mov</span>  <span class="literal">r0</span>, lr</span><br><span class="line">// <span class="number">0x8BF3736F</span>   <span class="number">0xE0800001</span>   <span class="keyword">add</span>  <span class="literal">r0</span>, <span class="literal">r0</span>, <span class="literal">r1</span></span><br><span class="line">// <span class="number">0x8A5C8C5E</span>   <span class="number">0xE12FFF30</span>   blx  <span class="literal">r0</span></span><br></pre></td></tr></table></figure></p>
<p>计算正确的内存地址，更改段属性，写入解密数据，最后跳转执行。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vm_address_t</span> addr = myseg-&gt;vmaddr + <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;(info.dli_fbase) - FILE_BASE_ADDR;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __arm64__ || __x86_64__</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"__0xBBC,__code at 0x%lX\n"</span>,addr);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"__0xBBC,__code at 0x%X\n"</span>,addr);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">kern_return_t</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改段属性为RWE</span></span><br><span class="line">err = vm_protect(<span class="keyword">mach_t</span>ask_self_, addr, myseg-&gt;vmsize, <span class="number">0</span>, VM_PROT_ALL);</span><br><span class="line"><span class="keyword">if</span> (err == KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_protect] KERN_SUCCESS![0]\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_protect] KERN_ERROR![%d]\n"</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入数据</span></span><br><span class="line">err = vm_write(<span class="keyword">mach_t</span>ask_self_, addr, (<span class="keyword">vm_offset_t</span>)&amp;sectionData, <span class="keyword">sizeof</span>(sectionData));</span><br><span class="line"><span class="keyword">if</span> (err == KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_write]   KERN_SUCCESS![0]\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_write] KERN_ERROR![%d]\n"</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转执行</span></span><br><span class="line">(*((<span class="keyword">void</span> (*)())(addr)))();</span><br></pre></td></tr></table></figure>
<p>编译好了之后记得用MachOView改段属性的Max Protect：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.14.06.png" alt=""></p>
<p>执行结果：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.12.59.png" alt=""></p>
<h3 id="更改指令集">更改指令集</h3><p>刚才写入Section之后，虽然是成功运行，没有任何报错，但是我还没有解释清楚那个谜之数据是怎么来的。</p>
<p>虽然在注释里写出了ASM，但是里面其实是有坑的。</p>
<p>解密之后的数据：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unsignedint sectionData[] = &#123;<span class="number">0xA0E1000E</span>,<span class="number">0xE0800001</span>,<span class="number">0xE12FFF30</span>&#125;<span class="comment">;</span></span><br><span class="line">// Encrypt      Decrypt      ASM</span><br><span class="line">// <span class="number">0xCB927360</span>   <span class="number">0xA0E1000E</span>   <span class="keyword">mov</span>  <span class="literal">r0</span>, lr</span><br><span class="line">// <span class="number">0x8BF3736F</span>   <span class="number">0xE0800001</span>   <span class="keyword">add</span>  <span class="literal">r0</span>, <span class="literal">r0</span>, <span class="literal">r1</span></span><br><span class="line">// <span class="number">0x8A5C8C5E</span>   <span class="number">0xE12FFF30</span>   blx  <span class="literal">r0</span></span><br></pre></td></tr></table></figure></p>
<p>让我们用之前所讲的第一种创建Section的方法写一下吧：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__declspec(allocate(<span class="string">"__0xBBC,__code"</span>))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * agrv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 确保func()被编译</span></span><br><span class="line">    <span class="keyword">if</span> (ULLONG_MAX == argc) func();</span><br><span class="line">    Dl_info info;</span><br><span class="line">    <span class="keyword">if</span> (dladdr((<span class="keyword">const</span> <span class="keyword">void</span> *)main, &amp;info))&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> SEGMENT_COMMAND * myseg = getsegbyname(<span class="string">"__0xBBC"</span>);</span><br><span class="line">        <span class="keyword">vm_address_t</span> addr = myseg-&gt;vmaddr + <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;(info.dli_fbase) - FILE_BASE_ADDR;</span><br><span class="line">        (*((<span class="keyword">void</span> (*)())(addr)))();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在MachOView中设置好段属性之后，通过debugserver调试：（在设备上）</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">debugserver</span> -x <span class="keyword">backboard </span>*:<span class="number">1234</span> /segment</span><br></pre></td></tr></table></figure>
<p>在lldb里下一个断点在dladdr上，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">b</span> dladdr</span><br></pre></td></tr></table></figure></p>
<p>之后一路按’n’，等执行到<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span><span class="list">(<span class="list">(<span class="keyword">void</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span>)</span><span class="list">()</span>)</span><span class="list">(<span class="keyword">addr</span>)</span>)</span>)</span><span class="list">()</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>如图：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.39.31.png" alt=""></p>
<p>按’si’单步跟进，直到lldb显示：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.39.49.png" alt=""></p>
<p>此时在lldb中使用’dis’，可以看到</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.39.53.png" alt=""></p>
<p>教练，这和Hopper里看到的不一样啊！！！</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.51.03.png" alt=""></p>
<p>其实用’dis -A thumb’就和Hopper里看见的一样了：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.40.44.png" alt=""></p>
<p>但是！请注意！</p>
<p>lldb之所以默认从thumb变到ARM的反汇编模式，是因为设备上的CPU模式发生了变化，不信你可以在单步跟进func()之前输入’dis’和’dis -A thumb’，你看到的反汇编结果会是一样的！</p>
<p>于是这就要求我们嵌入在Section的指令必须是ARM的！</p>
<p>那么要怎么生成ARM指令的程序呢，在Xcode上还没找到。。。</p>
<p>thumb指令被当成ARM指令之后，不是可能正常执行的：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%882.23.58.png" alt=""></p>
<h4 id="生成ARM指令的程序">生成ARM指令的程序</h4><p>不过借助LLVM框架还是可以完成的：</p>
<p>nico.m文件：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nico</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Nico~Nico~Ni\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ llc -march arm -mcpu generic nico<span class="class">.ll</span> -o nico<span class="class">.s</span></span><br><span class="line">$ clang nico<span class="class">.s</span> -x assembler -arch armv7 -e _nico -isysroot $(xcrun --sdk iphoneos --show-sdk-path) -o nico</span><br></pre></td></tr></table></figure></p>
<p>这样编译出来的就是ARM指令的程序：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%882.18.12.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-23 10:35:14</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="https://blog.0xbbc.com/2015/04/ios-dep%E7%A0%94%E7%A9%B61-%E5%88%9B%E5%BB%BAsection/">reference</a></p>
<h1 id="iOS_DEP_研究">iOS DEP 研究</h1><h2 id="创建Section">创建Section</h2><p>将加密的程序放在一个Section中，外壳运行时解密该Section，并执行解密后的程序</p>
<h3 id="通过other_linker_flags创建">通过other linker flags创建</h3><p><a href="http://bbs.iosre.com/t/tweak-app-app-tweak/438">这篇文章</a>提到过如何通过创建Section来防止dylib依附。其具体方法是在other linker flags中填入如下内容：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,__RESTRICT,__restrict,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>那么我们要创建自己的Section的话，就可以修改为如下格式：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,SEGMENT_NAME,SECTION_NAME,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<p>这样就可以创建一个size为1，段名字为SEGMENT_NAME，Section名为SECTION_NAME的Section了。</p>
<p>那么因为我们要把加密数据放进去，所以最后一个参数改为我们的加密文件的路径即可。</p>
<p>你可以在ld(1)中的Options that control additional content找到这部分内容。</p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS optimization]]></title>
    <link href="http://ytlvy.com/2015/09/01/iOS-optimization/"/>
    <id>http://ytlvy.com/2015/09/01/iOS-optimization/</id>
    <published>2015-09-01T13:51:44.000Z</published>
    <updated>2015-09-01T13:52:10.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-29 08:45:39</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.hrchen.com/2013/05/performance-with-instruments/" target="_blank" rel="external">reference</a></p>
<h2 id="iOS_App性能优化">iOS App性能优化</h2><h3 id="iOS_App的性能关注点">iOS App的性能关注点</h3><p>虽然iPhone的机能越来越好，但是app的功能也越来越复杂，性能从来都是移动开发的核心关注点之一。我们说一个app性能好，不是简单指感觉运行速度快，而应该是指应用启动快速、UI反馈响应及时、列表滚动操作流畅、内存使用合理，当然更不能随随便便Crash啦。工程师开发应用时除了在设计上要避免性能“坑”的出现，在实际遇到“坑”时也要能很快定位原因所在。定位性能问题原因当然不能靠猜，合理的方法是使用工具测量评估出投资回报最高的问题点，然后再加以优化。</p>
<p>本文会从以下几点介绍如何分析和优化iOS app的性能：启动时间、用户响应、内存、图形动画、文件和网络I/O。其中会用到Apple出品的性能分析神器“Instruments”。</p>
<h3 id="启动时间">启动时间</h3><p>应用启动时间长短对用户第一次体验至关重要，同时系统对应用的启动、恢复等状态的运行时间也有严格的要求，在应用超时的情况下系统会直接关闭应用。以下是几个常见场景下系统对app运行时间的要求：</p>
<ul>
<li>Launch 20秒</li>
<li>Resume 10秒</li>
<li>Suspend 10秒</li>
<li>Quit 6秒</li>
<li>Background Task 10分钟</li>
</ul>
<a id="more"></a>
<p>要获取准确的app启动所需时间，最简单的方法时首先在main.c中添加如下代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFAbsoluteTime</span> StartTime;  </span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv) &#123;  </span><br><span class="line">    StartTime = <span class="built_in">CFAbsoluteTimeGetCurrent</span>();</span><br></pre></td></tr></table></figure>
<p>然后在AppDelegate的回调方法application:didFinishLaunchingWithOptions中添加：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async<span class="list">(<span class="keyword">dispatch_get_main_queue</span><span class="list">()</span>, ^&#123;</span><br><span class="line">    NSLog<span class="list">(@”Lauched in %f seconds.”,  <span class="list">(<span class="keyword">CFAbsoluteTimeGetCurrent</span><span class="list">()</span> – StartTime)</span>)</span><span class="comment">;</span></span><br><span class="line">&#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>可能你会觉得为什么这样可拿到系统启动的时间，因为这个dispatch_async中提交的工作会在app主线程启动后的下一个run lopp中运行，此时app已经完成了载入并且将要显示第一帧画面，也就是系统会运行到-[UIApplication _reportAppLaunchFinished]之前。下图是用Instruments工具Time Profiler跑的调用栈，Instruments的使用方法建议看WWDC中与performance相关的session录像，文字写起来太单薄不够直观哈。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/loading_app-1.png" alt=""></p>
<p>从图中我们可以看到在系统调用<code>[UIApplication _reportAppLaunchFinished]</code>之前完成了系统回调<code>application:didFinishLaunchingWithOptions</code>。</p>
<p>App的启动会包括以下几个部分（来自WWDC 2012 Session 235）:</p>
<ol>
<li><p>链接和载入：可以在Time Profile中显示dyld载入库函数，库会被映射到地址空间，同时完成绑定以及静态初始化。</p>
</li>
<li><p>UIKit初始化：如果应用的Root View Controller是由XIB实现的，也会在启动时被初始化。</p>
</li>
<li><p>应用回调：调用UIApplicationDeleagte的回调：application:didFinishLaunchingWithOptions</p>
</li>
<li><p>第一次Core Animation调用：在启动后的方法-[UIApplication _resportAppLaunchFinished]中调用CA::Transaction::commit实现第一帧画面的绘制。</p>
</li>
</ol>
<p>如果你的程序启动很慢，能 做的首先是将与显示第一屏画面无关的操作放到之后执行；如果是用XIB文件load第一屏，XIB文件中的View层也要如果扁平，不要有太多图层。</p>
<h3 id="用户响应">用户响应</h3><p>如何能够让用户觉得你的app响应迅速呢？当然是app用户所触发的操作都能得到立刻响应，即用户事件(User Event)能够被主线程的run loop及时处理。什么是run loop？可以想象成一个处理事件的select多路复用。主线程中的run loop当然主要是为了处理用户产生的事件啦，例如点击、滚动等。以后我们会详细聊聊run loop这个让人迷惑的东东。</p>
<p>要让主线程的run loop更好的响应用户事件，工程师应该尽量减少主线程干重活的时间，尤其是读文件啊，网络操作啊，大量运算啊这类重活，如果是阻塞操作，那就更是大忌了。我们可以用多线程(NSThread、NSOperationQueue, GCD，下一篇Blog就会聊到这多线程)将重活移出主线程，这属于显式并发。还有种隐式并发，例如view和layer的动画、layer的绘制以及PNG图片的解码都是在另一个子线程中执行的。除了使用多线程技术减轻主线程的负担外，减少主线程中阻塞也是提升用户体验的一个方法。使用Instruments中Time Profiler工具中的”Recod thread waiting”选项可以统计出app运行时各个线程中的阻塞系统调用情况，例如文件读写read/write，网络读写send/recv，加锁psynchmutexwait等。Instruments中的System Trace工具则能够记录所有的底层系统调用。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/record_thread_waiting.png" alt=""></p>
<h3 id="内存">内存</h3><p>内存问题从来都是iOS app的老大难问题，搞不好程序就爆了。由于iOS系统没有Swap文件(知道为啥不？留给悬念)，在内存不足时会将只读数据(例如code page)从内存中移出，需要的时候再从disk上读如内存；可读写数据不会被系统从内存中移出，然而如果占用的内存达到一个阈值，系统会发出相应的通知和回调让应用release对象以回收内存，如果仍然不能减少内存使用量，系统会直接关闭应用。尤其是iOS 5.0之后，如果你的app收到了memory warning，那么脑袋也是和其他app一样放在了案板上，随时有可能被kill掉，并不是说一定会先Kill掉在后台的app。</p>
<p>App使用的内存除了我们在堆上分配的内存外（+[NSobject alloc]/malloc），还会有更多使用内存的地方，比如代码和全局数据（TEXT和DATA），线程栈，图片，view 的layer backing store等等。因此处理内存问题，绝不仅仅是我们开发app时尽量少申请内存那么简单。</p>
<p>现在有了超炫的ARC，内存问题相对少了很多，开发效率也得到了提高。但是很多公司的项目仍然由于历史原因采用了手动管理内存，该做的活还是少不了。Xcode自带的静态分析功能可以帮你提前发现一些问题，然而有些内存问题是无法用静态分析来发现的，例如我们不断使用内存没有及时释放的问题，就无法使用静态分析器分析出来。此时可以使用Instruments的Allocations和Leaks工具来检查运行时的的内存使用以及泄露问题。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/allocations.png" alt=""></p>
<p>Allocations工具可以很直观的反应app的内存使用情况，还有个很赞“Mark Heap”功能，在上图左边下半部分中的Heapshot Analysis中。例如你在进入一个页面前点击一下“Mark Heap”，然后再退回上一页面点击一下“Mark Heap”，如果你在进出这个页面里所申请的内存都得到了合理的释放，那么堆的内存增长量就应该降至0（见上图右下部分）。</p>
<p>另一种严重的内存使用问题是引用了已经释放的内存，直接导致应用崩溃，而Allocation有一个选项Enable NSZombie detection能够在应用使用已经释放的内存时标注出来，同时显示错误发生的调用栈信息。这为解决问题提供了最直接的帮助，当然缺点是必须能够重现EXECBADACCESS错误。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/zombies.png" alt=""></p>
<p>工具Leaks可以在应用运行时直接标示出存在内存泄露的代码，如果发生了内存泄露，可以从泄露详细信息中查看泄露的具体对象以及方法调用栈，大部分问题还是很好解决的</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/leak.png" alt=""></p>
<h3 id="图形和动画">图形和动画</h3><p>图形性能对用户体验有直接的影响，Instruments中的Core Animation工具用于测量物理机上的图形性能，通过视图的刷新频率大小来判断应用的图形性能。例如一个复杂的列表滚动时它的刷新率应该努力趋近于60fps才能让用户觉得够流畅，从这个数字也可以算出run loop最长的响应时间应该是16毫秒。</p>
<p>启动Instruments的Core Animation工具后可以发现左下部分有一堆选项，我们来逐个介绍：</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/core_animation.png" alt=""></p>
<p>1) Color Blended Layers</p>
<p>Instruments可以在物理机上显示出被混合的图层Blended Layer(用红色标注)，Blended Layer是因为这些Layer是透明的(Transparent)，系统在渲染这些view时需要将该view和下层view混合(Blend)后才能计算出该像素点的实际颜色，如果这种blended layer很多，那么在滚动列表时就甭想有流畅的效果。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/color_blended_layer.png" alt=""></p>
<p>解决blended layer问题也很简单，检查红色区域view的opaque属性，记得设置成YES；检查backgroundColor属性是不是[UIColor clearColor]，要知道背景颜色为clear color那可是图形性能的大敌，基本意味着blended layer是跑不了的了，为什么？自己思考一下:)</p>
<p>2) Color Hits Green and Misses Red</p>
<p>很多视图Layer由于Shadow、Mask和Gradient等原因渲染很高，因此UIKit提供了API用于缓存这些Layer：[layer setShouldRasterize:YES]，系统会将这些Layer缓存成Bitmap位图供渲染使用，如果失效时便丢弃这些Bitmap重新生成。图层Rasterization栅格化好处是对刷新率影响较小，坏处是删格化处理后的Bitmap缓存需要占用内存，而且当图层需要缩放时，要对删格化后的Bitmap做额外计算。</p>
<p>使用这个选项后时，如果Rasterized的Layer失效，便会标注为红色，如果有效标注为绿色。当测试的应用频繁闪现出红色标注图层时，表明对图层做的Rasterization作用不大。</p>
<p>3) Color Misaligned Images</p>
<p>Misaligned Image表示要绘制的点无法直接映射到频幕上的像素点，此时系统需要对相邻的像素点做anti-aliasing反锯齿计算，增加了图形负担，通常这种问题出在对某些View的Frame重新计算和设置时产生的。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/color_misaligned_image.png" alt=""></p>
<p>上图中被标注为黄色的图层，这是由于图层显示的是被缩放后的图片，如果这些图片是通过网络下载的，可以通过程序更新为确定的绘制大小来解决。还有些系统Navigation Bar和Tool Bar的背景图片使用的是拉伸(Streched)图片，也会被表示为黄色，这是属于正常情况，通常无需修改。这种问题一般对性能影响不大，而是可能会在边缘处虚化。</p>
<p>(4) Color Offscreen-Rendered Yellow</p>
<p>Offscreen-Rendering离屏渲染意思是iOS要显示一个视图时，需要先在后台用CPU计算出视图的Bitmap，再交给GPU做Onscreen-Rendering显示在屏幕上，因为显示一个视图需要两次计算，所以这种Offscreen-Rendering会导致app的图形性能下降。</p>
<p>大部分Offscreen-Rendering都是和视图Layer的Shadow和Mask相关，下列情况会导致视图的Offscreen-Rendering：</p>
<ul>
<li>使用Core Graphics (CG开头的类)。</li>
<li>使用drawRect()方法，即使为空。</li>
<li>将CALayer的属性shouldRasterize设置为YES。</li>
<li>使用了CALayer的setMasksToBounds(masks)和setShadow*(shadow)方法。</li>
<li>在屏幕上直接显示文字，包括Core Text。</li>
<li>设置UIViewGroupOpacity。</li>
</ul>
<p>这篇博文<a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance" target="_blank" rel="external">Designing for iOS: Graphics &amp; Performance对offsreen</a>以及图形性能有个很棒的介绍，</p>
<p>(5) Color Copied Images</p>
<p>Copied Image选项可以标注应用绘制时被Core Animation复制的图片，标注成蓝绿色。虽然我在运行时遇到过，不过个人感觉对图形性能影响不大。</p>
<p>(6) Color Immediately，Flash Updated Regions， Color OpenGL Fast Path Blue</p>
<p>Color Immediately选项表示Instruments在做color-flush操作时取消10毫秒的延时。<br>Flash Updated Regions选项用于用红色示标示出在屏幕上使用GPU计算绘制的图层。<br>Color OpenGL Fast Path Blue选项用于用蓝色标示出在屏幕上由OpenGL compositor绘制的内容。</p>
<p>这三个选项对图形性能的分析意义较小，通常仅作为参考。</p>
<h3 id="文件和网络I/O">文件和网络I/O</h3><p>如果需要对app的文件和网络I/O情况做分析，可以用到这三个Instruments工具System Usage、File Activity和Network。</p>
<p>工具System Usage可以统计出运行状态下应用的文件和网络IO操作数据。例如我们发现应用启动后又一个峰值，这可能存在问题，我们可以利用System Usage工具的详细信息栏查看应用是由于对哪些文件的读写操作导致了峰值。</p>
<p>工具File Activity只能在模拟器中运行，因此数据采集可能不是非常准确。它同样可以详细给出读取的文件属性、大小、载入时间等信息，适合与System Usage配合使用。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/file_activity.png" alt=""></p>
<p>Network工具则可以采集到应用的TCP/IP和UDP的使用信息(传输的数据量、当前所有TCP连接等)，用得不多，做网络使用状况分析时用用还行。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/instruments_networking.png" alt=""></p>
<h3 id="更多阅读">更多阅读</h3><p>涉及iOS App性能的知识很多，上面只是冰山一角，重点推荐WWDC的session。</p>
<p>WWDC 2012:</p>
<ul>
<li>406: Adopting Automatic Reference Counting</li>
<li>238: iOS App Performance: Graphics and Animations</li>
<li>242: iOS App Performance: Memory</li>
<li>235: iOS App Performance: Responsiveness</li>
<li>409: Learning Instruments</li>
<li>706: Networking Best Practices</li>
<li>514: OpenGL ES Tools and Techniques</li>
<li>506: Optimizing 2D Graphics and Animation Performance</li>
<li>601: Optimizing Web Content in UIWebViews and Websites on iOS</li>
<li>225: Up and Running: Making a Great Impression with Every Launch</li>
</ul>
<p>WWDC 2011:</p>
<ul>
<li>105: Polishing Your App: Tips and tricks to improve the responsiveness and performance</li>
<li>121: Understanding UIKit Rendering</li>
<li>131 performance optimization on iphone os</li>
<li>308: Blocks and Grand Central Dispatch in Practice</li>
<li>323: Introducing Automatic Reference Counting</li>
<li>312: iOS Performance and Power Optimization with Instruments</li>
</ul>
<p>还有几篇不错的blog：</p>
<p><a href="http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/" target="_blank" rel="external">http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/</a><br><a href="http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/" target="_blank" rel="external">http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/</a><br><a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance" target="_blank" rel="external">http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance</a><br><a href="http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/" target="_blank" rel="external">http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/</a><br><a href="http://disqus.com/" target="_blank" rel="external">comments powered by Disqus</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-29 08:45:39</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.hrchen.com/2013/05/performance-with-instruments/">reference</a></p>
<h2 id="iOS_App性能优化">iOS App性能优化</h2><h3 id="iOS_App的性能关注点">iOS App的性能关注点</h3><p>虽然iPhone的机能越来越好，但是app的功能也越来越复杂，性能从来都是移动开发的核心关注点之一。我们说一个app性能好，不是简单指感觉运行速度快，而应该是指应用启动快速、UI反馈响应及时、列表滚动操作流畅、内存使用合理，当然更不能随随便便Crash啦。工程师开发应用时除了在设计上要避免性能“坑”的出现，在实际遇到“坑”时也要能很快定位原因所在。定位性能问题原因当然不能靠猜，合理的方法是使用工具测量评估出投资回报最高的问题点，然后再加以优化。</p>
<p>本文会从以下几点介绍如何分析和优化iOS app的性能：启动时间、用户响应、内存、图形动画、文件和网络I/O。其中会用到Apple出品的性能分析神器“Instruments”。</p>
<h3 id="启动时间">启动时间</h3><p>应用启动时间长短对用户第一次体验至关重要，同时系统对应用的启动、恢复等状态的运行时间也有严格的要求，在应用超时的情况下系统会直接关闭应用。以下是几个常见场景下系统对app运行时间的要求：</p>
<ul>
<li>Launch 20秒</li>
<li>Resume 10秒</li>
<li>Suspend 10秒</li>
<li>Quit 6秒</li>
<li>Background Task 10分钟</li>
</ul>]]>
    
    </summary>
    
      <category term="Optimization" scheme="http://ytlvy.com/tags/Optimization/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS locksreen operation]]></title>
    <link href="http://ytlvy.com/2015/09/01/iOS-locksreen-operation/"/>
    <id>http://ytlvy.com/2015/09/01/iOS-locksreen-operation/</id>
    <published>2015-09-01T13:35:18.000Z</published>
    <updated>2015-09-01T13:35:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="iOS_锁屏操作">iOS 锁屏操作</h2><p>如果你的App不需要” 喜欢/书签”等功能的话，直接使用RemoteControl就行。<br>对于RemoteCommand，一个SEL只能对应一个command。<br>另外就是RemoteCommand的callback会先于RemoteControl，不过也就几ms的间隔。而且使用RemoteControl更方便。</p>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  mprc</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by BlueCocoa on 15/4/6.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015年 0xBBC. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">@interfaceViewController ()&lt;<span class="built_in">AVAudioPlayerDelegate</span>&gt;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> * player;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">MPRemoteCommand</span> * mprcNext, * mprcPlay, * mprcPause, * mprcPrevious;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">MPFeedbackCommand</span> * mpfbLike, * mpfbDislike, * mpfbBookMark;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> bookmark;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> player;</span><br><span class="line"><span class="keyword">@synthesize</span> mprcNext,mprcPlay,mprcPause,mprcPrevious;</span><br><span class="line"><span class="keyword">@synthesize</span> mpfbLike,mpfbDislike,mpfbBookMark;</span><br><span class="line"><span class="keyword">@synthesize</span> bookmark;</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.player</span> = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:[<span class="built_in">NSURLfileURLWithPath</span>:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"1"</span> ofType:<span class="string">@"m4a"</span>]] error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</span><br><span class="line">    [session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [session setActive:<span class="literal">YES</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> prepareToPlay];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> play];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setNumberOfLoops:-<span class="number">1</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setVolume:<span class="number">1</span>];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcNext</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.nextTrackCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextTrackCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPlay</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.playCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(playCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPause</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.pauseCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pauseCommand:)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPrevious</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.previousTrackCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(previousTrackCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbLike</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.likeCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(likeCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setLocalizedTitle:<span class="string">@"喜欢这首歌"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setLocalizedShortTitle:<span class="string">@"喜欢"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbDislike</span> =[<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.dislikeCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(dislikeCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setLocalizedTitle:<span class="string">@"不喜欢这首歌"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setLocalizedShortTitle:<span class="string">@"不喜欢"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbBookMark</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.bookmarkCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(bookmarkCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMarksetLocalizedTitle</span>:<span class="string">@"书签"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMarksetLocalizedShortTitle</span>:<span class="string">@"书签"</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bookmark</span> = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)bookmarkCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bookmark</span> = !<span class="keyword">self</span><span class="variable">.bookmark</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Bookmark"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dislikeCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setEnabled:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Dislike"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)likeCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislikesetEnabled</span>:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Like"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)previousTrackCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Previous Track"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)playCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Play in MPRemoteCommandEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pauseCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Pause in MPRemoteCommandEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nextTrackCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Next Track"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event<span class="variable">.subtype</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Play in RemoteControlEvent"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Pause in RemoteControlEvent"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="iOS_锁屏操作">iOS 锁屏操作</h2><p>如果你的App不需要” 喜欢/书签”等功能的话，直接使用RemoteControl就行。<br>对于RemoteCommand，一个SEL只能对应一个command。<br>另外就是RemoteCommand的callback会先于RemoteControl，不过也就几ms的间隔。而且使用RemoteControl更方便。</p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[code optimization]]></title>
    <link href="http://ytlvy.com/2015/09/01/code-optimization/"/>
    <id>http://ytlvy.com/2015/09/01/code-optimization/</id>
    <published>2015-09-01T13:32:49.000Z</published>
    <updated>2015-09-01T13:34:14.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-30 08:22:51</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="">reference</a></p>
<h2 id="我是如何收拾代码的">我是如何收拾代码的</h2><h3 id="注释">注释</h3><p>虽说好的代码不用注释,但是那得是好的代码..好记性不如烂笔头，好好写注释可以给自己和自己的小伙伴省下很多时间.<br>注释都是// 或是/<em> 注释 </em>/ ，这样的通用注释不做多说明，这里介绍一些稍带技巧的注释：</p>
<h4 id="参数的注释">参数的注释</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton <span class="keyword">*</span>btnSend;/<span class="keyword">*</span><span class="keyword">*</span><span class="variable">&lt; 发送按钮 */</span></span><br></pre></td></tr></table></figure>
<p>在调用时可以得到提示，在内容比较多时比较好用，我有时候脑子短路要想好一会才能记得当初定义的变量是做什么用的。</p>
<h4 id="方法的注释">方法的注释</h4><p>如果你的方法是没有参数的，只需要写一句注释，那只需要在方法前加注释就行了</p>
<p>type 1<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** table 相关设置 *</span>/</span></span></span><br><span class="line">-(<span class="keyword">void</span>)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>type 2（插件：VVDocument）使用此插件可以很便捷的为自己的代码添加注释<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>!</span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@author joanfen, 15-05-14 12:05:22</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@brief  相关设置</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">-(void)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样的注释 在你调用时会显示你所添加注释，如图<br><a id="more"></a><br><img src="http://static.oschina.net/uploads/space/2015/0514/121231_jCac_735123.png" alt=""></p>
<p>有参数的注释<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>!</span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@Author joanfen, 15-05-13 14:01:51</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@method POST</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@see XRClass</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@brief  链接解析</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@param linkAddressStr 链接地址</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure></p>
<p>大家使用VVDocument 的插件来写注释就对了。这样的注释自己写起来太费事，没有插件我真不愿意写。</p>
<h4 id="方法分区">方法分区</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#pragma</span> <span class="tag">mark</span> - &lt;注释，也可不写，没有注释时就只显示一条分割线&gt;</span><br><span class="line"><span class="id">#pragma</span> <span class="tag">mark</span> 注释</span><br></pre></td></tr></table></figure>
<p>区别：带 - 的会显示一条分割线</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/162252_0ZSV_735123.png" alt=""></p>
<p>便于简单快速的查找方法</p>
<h4 id="添加提示信息">添加提示信息</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">error</span> &lt;提示信息&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果加上这样的错误提示，在 Build 时 XCode 会提示编译错误：</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/162847_OcyP_735123.png" alt=""></p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/162847_FcKX_735123.png" alt=""></p>
<p>在某部分代码没有完成，而且如果提交会导致问题时可以加上这样的提示信息来提醒自己。</p>
<p>如果你觉得只是想提醒自己来完成，并不需要加上红色的 error 信息，你可以尝试使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">warning</span> &lt;提示信息&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样的话在编译时提示信息是这样的</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/163150_wHPF_735123.png" alt=""></p>
<p>使用场景</p>
<p>在替换某个类时，需要删除原有的代码，再进行替换，每次删除一个我就加一行同样的 warning，最后新的写好之后，搜索这行 waring，将调用方法填充，大大提高效率；</p>
<p>UI 写好了，数据部分还没有好，将逻辑梳理好，方法写好，加上 warning ，包含 deadline，需要完成的工作，在后台数据可测时，再来完成，不写的话有时候真的脑子短路，有时候半天都不记得当时是准备怎么弄的，尤其在开发量大的时候，原谅我是一个容易脑子短路的人，-_-。</p>
<h3 id="使用常量">使用常量</h3><p>常见使用宏，const 常量，枚举等来定义常量，避免将一个数字或者是字符串重复写多次，而是定义成常量，便于统一管理，也减少出错的几率</p>
<p>推荐两篇关于常量的博客： <a href="http://onevcat.com/2014/01/black-magic-in-macro/" target="_blank" rel="external">宏定义的黑魔法</a>， <a href="http://tutuge.me/2015/03/11/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-4-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F/" target="_blank" rel="external">如何正确定义常量</a></p>
<h4 id="宏">宏</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#def</span>ine</span><br></pre></td></tr></table></figure>
<p>宏大家应该都不陌生，这里不展开赘述，请看上面的博文，我在去年看了宏定义的黑魔法这篇博文之后，曾经一度超级喜欢用宏，不管是字符串，方法，还是高度，动画时长这一类常量，我都喜欢用宏来定义，直到我看见了后面的如何正确定义常量这篇博客，我才清醒一点。</p>
<h4 id="const_常量">const 常量</h4><p>现在使用的多得是 const 常量</p>
<p>在方法体内使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> CGFloat KCellHight = <span class="number">126.f</span>;</span><br></pre></td></tr></table></figure></p>
<p>在类文件中使用, 在.m 文件中<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">CGFloat</span> KXRBtnSendHeight = <span class="number">44</span>;</span><br></pre></td></tr></table></figure></p>
<p>如果需要提供给外部使用，使用 extern 修饰：</p>
<p>只需要在.h 中使用 extern 外部声明即可<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> KXRBtnSendHeight;<span class="comment">/**&lt; send按钮高度 */</span></span><br></pre></td></tr></table></figure></p>
<h4 id="枚举">枚举</h4><p>在判断 table 的 section，row，控件的 tag，或是点击的 index，或是自己定义的 type 时，不要直接使用数字判断，如果类型多，使用枚举，少，可以使用上文中的宏或是const 常量</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span> : <span class="title">NSUInteger</span> </span>&#123;</span><br><span class="line"><span class="constant">    XRTypeRegular</span> = <span class="number">10</span>,</span><br><span class="line"><span class="constant">    XRTypeSimple</span> = <span class="number">20</span>,</span><br><span class="line">&#125; XRType;</span><br></pre></td></tr></table></figure>
<p>在判断 type 时，使用这样的语法，这是最基本的，看到直接 == 10这样的代码，没有办法忍<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> </span>== XRTypeRegular)</span><br></pre></td></tr></table></figure></p>
<h3 id="使用_Category_或是基类">使用 Category 或是基类</h3><p>这个部分不是很好给出代码实例，要实例的话想想当初做各级员工结算工资的课程设计吧，只作简要说明。</p>
<p>在逻辑比较繁杂，某个类代码量非常庞大时，可以考虑使用基类，将公有的属性和方法在基类中实现，自己在使用时只需要关注一些单独的逻辑即可，可以大大提高代码效率。</p>
<p>使用 category 是对某个类进行一些简单的扩展，在 category 中定义的方法等同于类的方法，是一样的，为了让功能划分更纯粹一些，一言以蔽之，强迫症。。</p>
<p>给出一个小场景：比如我定义了一个 UITableViewCell 的类，在 A，B，C 的视图控制器中样式都是一样的，但是在D 的视图控制器中需要对它进行一些改造，这样的话就可以在 D 的类中加上一个 Category来进行操作，在 D 中直接调用这个方法即可<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DViewController.h</span></span><br><span class="line"><span class="variable">@interface</span> DViewController&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">@interface</span> <span class="function">ModuleCell</span>(diff)</span><br><span class="line"><span class="function">-</span>(void)<span class="attribute">diffTheCellByParam</span>:(id)param;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DViewController.m</span></span><br><span class="line"><span class="variable">@implementation</span> DViewController</span><br><span class="line"> </span><br><span class="line"><span class="variable">@end</span></span><br><span class="line">#pragma mark - </span><br><span class="line"><span class="variable">@implementation</span> <span class="function">ModuleCell</span>(diff)</span><br><span class="line"><span class="function">-</span>(void)<span class="attribute">diffTheCellByParam</span>:(id)param&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用_MVC">使用 MVC</h3><p>MVC 模式是最常见的模式，而且在学习的第一时间就有接触，可能有些人看到这儿觉得，你这不是废话？这谁不知道。</p>
<p>但是我发现在 Objective-C 这个大家庭中，这个模式是遵守的最差的，相信你们一定见过在 ViewController 中写完所有的数据处理，UI 渲染，视图跳转各类动画的经典案例，因为我们就是这类型创造者，新手应该都是这样过来的（只是说明是一个大概率事件，很多资深其他平台开发者转过来时这方面是做的非常好的）。</p>
<ol>
<li><p>把数据的处理（获取，筛选，排序等）工作放在 Model 中，所谓 Model，新建一个继承自 NSObject（一般是 NSObject） 的类，用来处理数据，直接调用即可；</p>
</li>
<li><p>把视图的渲染放在 View 中（简单的视图加载可直接在 Controller 中完成），在遇到比较繁杂，需要几百行代码来完成时，如果你是用 xib或是 storyboard 配合代码，这部分无需这么严格，公用的视图必然是放在 View 中了；</p>
</li>
<li><p>视图控制器 Controller 中只用来调用数据，显示数据，视图的加载，跳转等工作。</p>
</li>
</ol>
<p>视图内容在繁杂时可以考虑使用多个视图控制器联合控制一个页面，如 Apple 的 TabBarController 的工作机理。<br>将视图以 AddChildViewController 的方式添加到当前视图。<br>在 A 控制器中添加 B 控制器的视图，这样 A 同时包含了 A 和 B 的视图，B 视图中得 UI 逻辑依然在 B 中进行处理<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BViewController </span>*secondVC = VCFromSB(storyboardPatient, <span class="comment">@"XRPatientAllVC");</span></span><br><span class="line">[<span class="keyword">self.view </span><span class="keyword">addSubview:secondVC.view];</span><br><span class="line"></span>[<span class="keyword">self </span><span class="keyword">addChildViewController:secondVC];</span><br><span class="line"></span>[secondVC didMoveToParentViewController:<span class="keyword">self];// </span>将<span class="keyword">B </span>视图的 UI 响应事件移到 A 中，如果不这样操作，只要点击<span class="keyword">B </span>视图中得按钮或是滚动 table 就会崩溃</span><br></pre></td></tr></table></figure></p>
<p>案例不是太好写，要写得好长一篇文章了，我还得想一项目，可以参考这部分文章：更轻量的 ViewControllers</p>
<h3 id="代码规范">代码规范</h3><p>代码规范这事儿 各人有各人的习惯，不多说，但是你得有个规范，别想咋就咋，到时候害的是自己Over</p>
<p>噢，还有件事儿，OC 的代码跟写文章一样这事儿我们都知道，每次都被后端工程师过来吐槽也是醉了，在写参数超过2个的方法时，大家按照冒号对个齐，会好看很多，我也不是逼你这样做，你就随意感受下吧</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/181511_1zw7_735123.png" alt=""></p>
<p>最后，多复用，多重构，多写注释，祝大家都有一份整洁有条理的代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-30 08:22:51</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="">reference</a></p>
<h2 id="我是如何收拾代码的">我是如何收拾代码的</h2><h3 id="注释">注释</h3><p>虽说好的代码不用注释,但是那得是好的代码..好记性不如烂笔头，好好写注释可以给自己和自己的小伙伴省下很多时间.<br>注释都是// 或是/<em> 注释 </em>/ ，这样的通用注释不做多说明，这里介绍一些稍带技巧的注释：</p>
<h4 id="参数的注释">参数的注释</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton <span class="keyword">*</span>btnSend;/<span class="keyword">*</span><span class="keyword">*</span><span class="variable">&lt; 发送按钮 */</span></span><br></pre></td></tr></table></figure>
<p>在调用时可以得到提示，在内容比较多时比较好用，我有时候脑子短路要想好一会才能记得当初定义的变量是做什么用的。</p>
<h4 id="方法的注释">方法的注释</h4><p>如果你的方法是没有参数的，只需要写一句注释，那只需要在方法前加注释就行了</p>
<p>type 1<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** table 相关设置 *</span>/</span></span></span><br><span class="line">-(<span class="keyword">void</span>)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>type 2（插件：VVDocument）使用此插件可以很便捷的为自己的代码添加注释<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>!</span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@author joanfen, 15-05-14 12:05:22</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@brief  相关设置</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">-(void)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样的注释 在你调用时会显示你所添加注释，如图<br>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[get rid of Warnnings]]></title>
    <link href="http://ytlvy.com/2015/09/01/get-rid-of-Warnnings/"/>
    <id>http://ytlvy.com/2015/09/01/get-rid-of-Warnnings/</id>
    <published>2015-09-01T13:30:50.000Z</published>
    <updated>2015-09-01T13:31:21.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-30 08:15:07</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://my.oschina.net/joanfen" target="_blank" rel="external">reference</a></p>
<h2 id="干掉_Warnings">干掉 Warnings</h2><h3 id="场景">场景</h3><p>事情是这样的，今天心血来潮想把工程中使用了苹果已弃用方法后得到的警告处理一下，就是这样一段代码，适配 iOS6是很可悲，我知道，你们别说了5555，上个皂片先看下 </p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095518_EO9H.png" alt=""></p>
<p>如果要适配低版本，这样的警告应该不少，每次 Build 的时候就感觉它在对我说：我就喜欢你看我不爽又干不掉我的样子。我这暴脾气，赶了好久的版本，好不容易得点空，必须干掉</p>
<p>其实很多东西都是早就有了解决办法，需要我们去发现而已<br><a id="more"></a></p>
<h3 id="代码块处理">代码块处理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL is_iOS6 = [[[UIDevice currentDevice] systemVersion] floatValue] &lt; <span class="number">7.0f</span>;</span><br><span class="line"><span class="keyword">if</span> (is_iOS6) &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic ignored "-Wdeprecated-declarations"</span></span><br><span class="line">    label.textAlignment = UITextAlignmentCenter;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>办法很简单，但是我后来就在想，那么第一个发现”-Wdeprecated-declarations”这个关键字的是谁呢，遇到别的 warning 是不是也有这种解决办法， 我再次在网上search， 果然是从 Apple 得到的信息，点击警告信息，右键选择 Reveal In Log, 就可以看到警告的详细信息</p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095637_5aDf.png" alt=""></p>
<p>中括号中的 -Wdeprecated-declarations 便是我们想要得到的信息了 </p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095614_sBHG.png" alt=""></p>
<p>知道如果找到关键字之后就容易了，以后遇到的 warning 又明知干不掉的时候就用这种方法隐藏即可，是不是很方便呢。</p>
<p>通用格式</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#pragma</span> clang diagnostic push</span><br><span class="line"><span class="id">#pragma</span> clang diagnostic ignored <span class="string">"上文得到的错误信息"</span></span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line"><span class="id">#pragma</span> clang diagnostic pop</span><br></pre></td></tr></table></figure>
<h3 id="文件处理">文件处理</h3><p>但是有时候在一个文件中，有很多重复的这种 warning，多见第三方库，一个个改未免太麻烦，所以可以对某一个文件隐藏所有这类 warning。</p>
<p>在 <strong><em>Compile Sources</em></strong> 设置某个文件的 Compiler Flags</p>
<p>得到的 warning 信息是 <code>-Wdeprecated-declarations</code> 需要改成 <code>-Wno-deprecated-declarations</code></p>
<p>即所有的这类报错都是 -W错误信息 的格式，我们需要将 -W 替换成 -Wno- 即告诉编译器这个文件的这个错误不在提示警告，可以添加多个</p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095817_MJ45.png" alt=""></p>
<p>这是对整个文件的 warning 进行隐藏，有时候工程中这类 warning 我们都不想看到，一个个设置也是怪累的，所以也可以对工程进行处理</p>
<h3 id="工程处理">工程处理</h3><p>在 PROJECT -&gt; Build Settings -&gt; Apple LLVM 6.1 - Custom Complier Flags 中的Other Warning Flags 一栏设置即可</p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095844_8p53.png" alt=""></p>
<h3 id="来源">来源</h3><p><a href="http://www.jianshu.com/p/d35409428095" target="_blank" rel="external">简书/践行者：关于 Objective-Cwarning 那些事</a><br><a href="http://onevcat.com/2013/05/talk-about-warning/" target="_blank" rel="external">喵神 OneVCat：谈谈Objective-C的警告</a><br><a href="http://m.blog.csdn.net/blog/vincechou/18699029#" target="_blank" rel="external">CSDN/vincechou：#关于IOS 里面的Warning#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-30 08:15:07</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://my.oschina.net/joanfen">reference</a></p>
<h2 id="干掉_Warnings">干掉 Warnings</h2><h3 id="场景">场景</h3><p>事情是这样的，今天心血来潮想把工程中使用了苹果已弃用方法后得到的警告处理一下，就是这样一段代码，适配 iOS6是很可悲，我知道，你们别说了5555，上个皂片先看下 </p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095518_EO9H.png" alt=""></p>
<p>如果要适配低版本，这样的警告应该不少，每次 Build 的时候就感觉它在对我说：我就喜欢你看我不爽又干不掉我的样子。我这暴脾气，赶了好久的版本，好不容易得点空，必须干掉</p>
<p>其实很多东西都是早就有了解决办法，需要我们去发现而已<br>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cxx Deleting destructors and virtual operator delete]]></title>
    <link href="http://ytlvy.com/2015/09/01/Cxx-Deleting-destructors-and-virtual-operator-delete/"/>
    <id>http://ytlvy.com/2015/09/01/Cxx-Deleting-destructors-and-virtual-operator-delete/</id>
    <published>2015-09-01T13:29:42.000Z</published>
    <updated>2015-09-01T13:30:09.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-30 20:51:45</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://eli.thegreenplace.net/2015/c-deleting-destructors-and-virtual-operator-delete/" target="_blank" rel="external">reference</a></p>
<h2 id="C++:_Deleting_destructors_and_virtual_operator_delete">C++: Deleting destructors and virtual operator delete</h2><p>This post starts with a fairly obscure topic - how an overloaded operator delete behaves in light of polymorphism; amazingly, it then gets even more obscure - shedding light on the trickery the compiler employs to make this work, by generating more than one destructor for certain classes. If you’re into such things, read on. If not, sorry about that; I heard that three new Javascript libraries were released this week for MVC JSON-based dynamic CSS layout. Everyone’s switching! Hurry up to keep up with the cool guys and leave this grumpy compiler engineer to mumble to himself.</p>
<h3 id="Virtual_operator_delete?">Virtual operator delete?</h3><p>Consider this code sample:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() = 0;</span><br><span class="line">  virtual ~<span class="keyword">Animal</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Sheep : public <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep says baaaaa\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  virtual ~Sheep() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep is dead\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void operator delete(void* p) &#123;</span><br><span class="line">    printf(<span class="string">"Reclaiming Sheep storage from %p\n"</span>, p);</span><br><span class="line">    ::operator delete(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  <span class="keyword">Animal</span>* ap = new Sheep;</span><br><span class="line">  ap-&gt;<span class="keyword">say</span>();</span><br><span class="line">  delete ap;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>What happens when ap is deleted? Two things:</p>
<ol>
<li>The destructor of the object pointed to by ap is called.</li>
<li>operator <code>delete</code> is called on ap to reclaim heap storage.</li>
</ol>
<p>Part 1 is fairly clear: the static type of <code>ap</code> is <code>Animal</code>, but the compiler knows that <code>Animal</code> has a virtual destructor. So it looks up the actual destructor to invoke in the virtual table stored in the object <code>ap</code> points to. Since the dynamic type of <code>ap</code> is Sheep, the destructor found there will be <code>Sheep::~Sheep</code>, which is correct.</p>
<p>What about that operator <code>delete</code>, though? Is operator <code>delete</code> virtual too? Is is also stored in the virtual table? Because if it isn’t, how does the compiler know which operator delete to invoke?</p>
<p>No, operator <code>delete</code> is not virtual. It is not stored in the virtual table. In fact, operator delete is a static member. The C++11 standard says so explicitly in secton 12.5:</p>
<blockquote>
<p>Any deallocation function for a class X is a static member (even if not explicitly declared <strong><em>static</em></strong>).</p>
</blockquote>
<p>It also adds:</p>
<blockquote>
<p> Since member allocation and deallocation functions are static they cannot be virtual.</p>
</blockquote>
<p>And if you keep reading, it actually mandates that even though this is the case, when the base destructor is virtual operator delete will be correctly looked up in the scope of the class that is the dynamic, not the static type of the object.</p>
<p>Indeed, the code snippet above works correctly and prints:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sheep says baaaaa</span><br><span class="line">Sheep <span class="keyword">is</span> dead</span><br><span class="line">Reclaiming Sheep storage <span class="keyword">from</span> <span class="number">0x1ed1be0</span></span><br></pre></td></tr></table></figure>
<h3 id="Deleting_destructor">Deleting destructor</h3><p>So how does this work, if operator delete is not virtual? Then answer is in a special destructor created for by the compiler. It’s called the deleting destructor and its existence is described by the <a href="https://mentorembedded.github.io/cxx-abi/abi.html" target="_blank" rel="external">Itanium C++ ABI</a>:</p>
<blockquote>
<p> deleting destructor of a class T - A function that, in addition to the actions required of a complete object destructor, calls the appropriate deallocation function (i.e,. operator delete) for T.</p>
</blockquote>
<p>The ABI goes on to provide more details:</p>
<blockquote>
<p> The entries for virtual destructors are actually pairs of entries. The first destructor, called the complete object destructor, performs the destruction without calling delete() on the object. The second destructor, called the deleting destructor, calls delete() after destroying the object.</p>
</blockquote>
<p>So now the mechanics of this operation should be fairly clear. The compiler mimics “virtuality” of operator delete by invoking it from the destructor. Since the destructor is virtual, what ends up called eventually is the destructor for the dynamic type of the object. In our example this would be the destructor of Sheep, which can call the right operator delete since it’s in the same static scope.</p>
<p>However, as the ABI says, such classes need two destructors. If an object is destructed but not deleted from the heap, calling operator delete is wrong. So a separate version of the destructor exists for non-delete destructions.</p>
<h3 id="Examining_how_the_compiler_implements_deleting_destructors">Examining how the compiler implements deleting destructors</h3><p>That’s quite a bit of theory. Let’s see how this is done in practice by studying the machine code generated by gcc for our code sample. First, I’ll slightly modify main to invoke another function that just creates and discards a new Sheep without involving the heap.</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">  Sheep s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  <span class="keyword">Animal</span>* ap = new Sheep;</span><br><span class="line">  ap-&gt;<span class="keyword">say</span>();</span><br><span class="line">  delete ap;</span><br><span class="line"></span><br><span class="line">  foo();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And compiling this with the flags [1]:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -O2 -g -<span class="keyword">static</span> -<span class="built_in">std</span>=c++<span class="number">11</span> -fno-<span class="keyword">inline</span> -fno-exceptions</span><br></pre></td></tr></table></figure>
<p>We get the following disassembly for main. I’ve annotated the disassembly with comments to explain what’s going on:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000000400</span>cf0 &lt;main&gt;:</span><br><span class="line">  <span class="number">400</span>cf0:    push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>cf1:    mov    <span class="variable">$0</span>x8,<span class="variable">%edi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Call operator new to allocate a new object of type Sheep, and call</span></span><br><span class="line">  <span class="comment">// the constructor of Sheep. Neither Sheep nor Animal have fields, so</span></span><br><span class="line">  <span class="comment">// their size is 8 bytes for the virtual table pointer.</span></span><br><span class="line">  <span class="comment">// The pointer to the object will live in %rbx. The vtable pointer in this</span></span><br><span class="line">  <span class="comment">// object (set up by the constructor of Sheep) points to the the virtual</span></span><br><span class="line">  <span class="comment">// table of Sheep, because this is the actual type of the object (even</span></span><br><span class="line">  <span class="comment">// though we hold it by a pointer to Animal here).</span></span><br><span class="line">  <span class="number">400</span>cf6:    callq  <span class="number">401750</span> &lt;_Znwm&gt;</span><br><span class="line">  <span class="number">400</span>cfb:    mov    <span class="variable">%rax</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>cfe:    mov    <span class="variable">%rax</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d01:    callq  <span class="number">4011</span>f0 &lt;_ZN5SheepC1Ev&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The first 8 bytes of an Animal object is the vtable pointer. So move</span></span><br><span class="line">  <span class="comment">// the address of vtable into %rax, and the object pointer itself ("this")</span></span><br><span class="line">  <span class="comment">// into %rdi.</span></span><br><span class="line">  <span class="comment">// Since the vtable's first entry is the say() method, the call that</span></span><br><span class="line">  <span class="comment">// actually happens here is Sheep::say(ap) where ap is the object pointer</span></span><br><span class="line">  <span class="comment">// passed into the (implicit) "this" parameter.</span></span><br><span class="line">  <span class="number">400</span>d06:    mov    (<span class="variable">%rbx</span>),<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>d09:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d0c:    callq  <span class="variable">*(</span><span class="variable">%rax</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Once again, move the vtable address into %rax and the object pointer</span></span><br><span class="line">  <span class="comment">// into %rdi. This time, invoke the function that lives at offset 0x10 in</span></span><br><span class="line">  <span class="comment">// the vtable. This is the deleting destructor, as we'll soon see.</span></span><br><span class="line">  <span class="number">400</span>d0e:    mov    (<span class="variable">%rbx</span>),<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>d11:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d14:    callq  <span class="variable">*0x10</span>(<span class="variable">%rax</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally call foo() and return.</span></span><br><span class="line">  <span class="number">400</span>d17:    callq  <span class="number">4010</span>d0 &lt;_Z3foov&gt;</span><br><span class="line">  <span class="number">400</span>d1c:    xor    <span class="variable">%eax</span>,<span class="variable">%eax</span></span><br><span class="line">  <span class="number">400</span>d1e:    pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d1f:    retq</span><br></pre></td></tr></table></figure>
<p>A diagram of the memory layout of the virtual table for Sheep can be helpful here. Since neither Animal nor Sheep have any fields, the only “contents” of a Sheep object is the vtable pointer which occupies the first 8 bytes:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                          Virtual table for Sheep:</span><br><span class="line">ap:</span><br><span class="line">--------------            -----------------------</span><br><span class="line">| vtable ptr | ---------&gt; |     Sheep::<span class="keyword">say</span>()    |  0x00</span><br><span class="line">--------------            -----------------------</span><br><span class="line">                          |   Sheep::~Sheep()   |  0x08</span><br><span class="line">                          -----------------------</span><br><span class="line">                          | Sheep deleting dtor |  0x10</span><br><span class="line">                          -----------------------</span><br></pre></td></tr></table></figure>
<p>The two destructors seen here have the roles described earlier. Let’s see their annotated disassembly:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sheep::~Sheep</span></span><br><span class="line"><span class="number">0000000000401140</span> &lt;_ZN5SheepD1Ev&gt;:</span><br><span class="line">  <span class="comment">// Call printf("Sheep is dead\n")</span></span><br><span class="line">  <span class="number">401140</span>:    push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">401141</span>:    mov    <span class="variable">$0</span>x49dc7c,<span class="variable">%esi</span></span><br><span class="line">  <span class="number">401146</span>:    mov    <span class="variable">%rdi</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">401149</span>:    movq   <span class="variable">$0</span>x49dd50,(<span class="variable">%rdi</span>)</span><br><span class="line">  <span class="number">401150</span>:    xor    <span class="variable">%eax</span>,<span class="variable">%eax</span></span><br><span class="line">  <span class="number">401152</span>:    mov    <span class="variable">$0</span>x1,<span class="variable">%edi</span></span><br><span class="line">  <span class="number">401157</span>:    callq  <span class="number">446260</span> &lt;___printf_chk&gt;</span><br><span class="line">  <span class="number">40115</span>c:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">40115</span>f:    pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="comment">// Call Animal::~Animal, destroying the base class. <span class="doctag">Note</span> the cool tail</span></span><br><span class="line">  <span class="comment">// call here (using jmpq instead of a call instruction - control does not</span></span><br><span class="line">  <span class="comment">// return here but the return instruction from _ZN6AnimalD1Ev will return</span></span><br><span class="line">  <span class="comment">// straight to the caller).</span></span><br><span class="line">  <span class="number">401160</span>:    jmpq   <span class="number">4010</span>f0 &lt;_ZN6AnimalD1Ev&gt;</span><br><span class="line">  <span class="number">401165</span>:    nopw   <span class="variable">%cs</span>:<span class="number">0x0</span>(<span class="variable">%rax</span>,<span class="variable">%rax</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="number">40116</span>f:    nop</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sheep deleting destructor. The D0 part of the mangled name for deleting</span></span><br><span class="line"><span class="comment">// destructors, as opposed to D1 for the regular destructor, is mandated by</span></span><br><span class="line"><span class="comment">// the ABI name mangling rules.</span></span><br><span class="line"><span class="number">00000000004011</span>c0 &lt;_ZN5SheepD0Ev&gt;:</span><br><span class="line">  <span class="number">4011</span>c0:    push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="comment">// Call Sheep::~Sheep</span></span><br><span class="line">  <span class="number">4011</span>c1:    mov    <span class="variable">%rdi</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">4011</span>c4:    callq  <span class="number">401140</span> &lt;_ZN5SheepD1Ev&gt;</span><br><span class="line">  <span class="number">4011</span>c9:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">4011</span>cc:    pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="comment">// Call Sheep::operator delete</span></span><br><span class="line">  <span class="number">4011</span>cd:    jmpq   <span class="number">401190</span> &lt;_ZN5SheepdlEPv&gt;</span><br><span class="line">  <span class="number">4011</span>d2:    nopw   <span class="variable">%cs</span>:<span class="number">0x0</span>(<span class="variable">%rax</span>,<span class="variable">%rax</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="number">4011</span>dc:    nopl   <span class="number">0x0</span>(<span class="variable">%rax</span>)</span><br></pre></td></tr></table></figure></p>
<p>Now, going back to the amended code sample, let’s see what code is generated for foo:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00000000004010d0 &lt;_Z3foov&gt;:</span><br><span class="line">  4010d0:    <span class="keyword">sub</span>    <span class="number">$0</span>x18,%<span class="literal">rsp</span></span><br><span class="line">  4010d4:    <span class="keyword">mov</span>    %<span class="literal">rsp</span>,%<span class="literal">rdi</span></span><br><span class="line">  4010d7:    <span class="keyword">movq</span>   <span class="number">$0</span>x49dd30,(%<span class="literal">rsp</span>)</span><br><span class="line">  4010df:    callq  <span class="number">401140</span> &lt;_ZN5SheepD1Ev&gt;</span><br><span class="line">  4010e4:    <span class="keyword">add</span>    <span class="number">$0</span>x18,%<span class="literal">rsp</span></span><br><span class="line">  4010e8:    retq</span><br><span class="line">  4010e9:    nopl   <span class="number">0x0</span>(%<span class="literal">rax</span>)</span><br></pre></td></tr></table></figure>
<p><code>foo</code> just calls <code>Sheep::~Sheep</code>. It shouldn’t call the deleting destructor, because it does not actually delete an object from the heap.</p>
<p>It is also interesting to examine how the destructor(s) of <code>Animal</code> look, since unlike <code>Sheep</code>, <code>Animal</code> does not define a custom operator delete:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">Animal</span>::~<span class="keyword">Animal</span></span><br><span class="line">00000000004010f0 &lt;_ZN6AnimalD1Ev&gt;:</span><br><span class="line">  4010f0:    movq   $0x49dcf0,(%rdi)</span><br><span class="line">  4010f7:    retq</span><br><span class="line">  4010f8:    nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">// <span class="keyword">Animal</span> deleting destructor</span><br><span class="line">0000000000401100 &lt;_ZN6AnimalD0Ev&gt;:</span><br><span class="line">  401100:    push   %rbx</span><br><span class="line">  // Call <span class="keyword">Animal</span>::~<span class="keyword">Animal</span></span><br><span class="line">  401101:    mov    %rdi,%rbx</span><br><span class="line">  401104:    callq  4010f0 &lt;_ZN6AnimalD1Ev&gt;</span><br><span class="line">  401109:    mov    %rbx,%rdi</span><br><span class="line">  40110c:    pop    %rbx</span><br><span class="line">  // Call global ::operator::delete</span><br><span class="line">  40110d:    jmpq   4011f0 &lt;_ZdlPv&gt;</span><br><span class="line">  401112:    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40111c:    nopl   0x0(%rax)</span><br></pre></td></tr></table></figure>
<p>As expected, the destructor of Animal calls the global ::operator delete.</p>
<h3 id="Classes_with_virtual_destructors_vs-_regular_destructors">Classes with virtual destructors vs. regular destructors</h3><p>I want to emphasize that this special treatment - generation of a deleting destructor, is done not for classes that have a custom operator delete, but for all classes with virtual destructors. This is because when we delete an object through a pointer to the base class, the compiler has no way of knowing what operator delete to invoke, so this has to be done for every class where the destructor is virtual [2]. Here’s a clarifying example:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Regular &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~Regular() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Regular dtor\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Virtual &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Virtual() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Virtual dtor\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  Regular* hr = <span class="keyword">new</span> Regular;</span><br><span class="line">  <span class="keyword">delete</span> hr;</span><br><span class="line"></span><br><span class="line">  Virtual* hv = <span class="keyword">new</span> Virtual;</span><br><span class="line">  <span class="keyword">delete</span> hv;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The only difference between Regular and Virtual here is the destructor being virtual in the latter. Let’s examine the machine code for main to see how the two delete statements are lowered:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000000400</span>cf0 &lt;main&gt;:</span><br><span class="line">  <span class="number">400</span>cf0:       push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>cf1:       mov    <span class="variable">$0</span>x1,<span class="variable">%edi</span></span><br><span class="line">  <span class="comment">// Allocate a new Regular object with the global ::operator new</span></span><br><span class="line">  <span class="number">400</span>cf6:       callq  <span class="number">4016</span>a0 &lt;_Znwm&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If hr != nullptr, call Regular::~Regular, and then call the global</span></span><br><span class="line">  <span class="comment">// ::operator delete on hr.</span></span><br><span class="line">  <span class="number">400</span>cfb:       test   <span class="variable">%rax</span>,<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>cfe:       mov    <span class="variable">%rax</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d01:       je     <span class="number">400</span>d13 &lt;main+<span class="number">0x23</span>&gt;</span><br><span class="line">  <span class="number">400</span>d03:       mov    <span class="variable">%rax</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d06:       callq  <span class="number">401130</span> &lt;_ZN7RegularD1Ev&gt;</span><br><span class="line">  <span class="number">400</span>d0b:       mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d0e:       callq  <span class="number">401160</span> &lt;_ZdlPv&gt;</span><br><span class="line">  <span class="number">400</span>d13:       mov    <span class="variable">$0</span>x8,<span class="variable">%edi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate a new Virtual object with the global ::operator new</span></span><br><span class="line">  <span class="number">400</span>d18:       callq  <span class="number">4016</span>a0 &lt;_Znwm&gt;</span><br><span class="line">  <span class="number">400</span>d1d:       mov    <span class="variable">%rax</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d20:       mov    <span class="variable">%rax</span>,<span class="variable">%rdi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Call the constructor for Virtual. We didn't define a default</span></span><br><span class="line">  <span class="comment">// constructor, but the compiler did - to populate the vtable pointer</span></span><br><span class="line">  <span class="comment">// properly.</span></span><br><span class="line">  <span class="number">400</span>d23:       callq  <span class="number">401150</span> &lt;_ZN7VirtualC1Ev&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If hv != nullptr, call the deleting destructor of Virtual through the</span></span><br><span class="line">  <span class="comment">// virtual table. Do not call operator delete for vr; this will be done by</span></span><br><span class="line">  <span class="comment">// the deleting destructor.</span></span><br><span class="line">  <span class="number">400</span>d28:       test   <span class="variable">%rbx</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d2b:       je     <span class="number">400</span>d36 &lt;main+<span class="number">0x46</span>&gt;</span><br><span class="line">  <span class="number">400</span>d2d:       mov    (<span class="variable">%rbx</span>),<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>d30:       mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d33:       callq  <span class="variable">*0x8</span>(<span class="variable">%rax</span>)</span><br><span class="line">  <span class="number">400</span>d36:       xor    <span class="variable">%eax</span>,<span class="variable">%eax</span></span><br><span class="line">  <span class="number">400</span>d38:       pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d39:       retq</span><br><span class="line">  <span class="number">400</span>d3a:       nopw   <span class="number">0x0</span>(<span class="variable">%rax</span>,<span class="variable">%rax</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>The key difference here is that for deleting Regular, the compiler inserts a call to the (global) operator delete after the destructor. However, for Virtual it can’t do that so it just calls the deleting destructor, which will take care of the deletion as we’ve seen earlier.</p>
<hr>
<p>[1] Why this set of options? Without -O2, the code produced by the compiler is overly verbose. With -O2 it’s much better but most function calls are inlined, making the special calls generated for the deleting destructor hard to follow; hence -fno-inline. I’m also disabling exceptions because these complicate the code around destructors without being relevant to the main goal of the article.<br>[2]<br>One of the derived classes may declare its own operator delete, and the compiler doesn’t know that. In fact, a pointer to a derived class can come from a shared library that was built completely separately from the main program (as this sample demonstrates ).</p>
<p>But even if none of the derived classes defines a custom operator delete, it’s important to know the dynamic type of the deleted object when the destructor is called to pass the correct address to the global operator delete. An interesting discussion of this issue can be found in this Reddit comment thread.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-30 20:51:45</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://eli.thegreenplace.net/2015/c-deleting-destructors-and-virtual-operator-delete/">reference</a></p>
<h2 id="C++:_Deleting_destructors_and_virtual_operator_delete">C++: Deleting destructors and virtual operator delete</h2><p>This post starts with a fairly obscure topic - how an overloaded operator delete behaves in light of polymorphism; amazingly, it then gets even more obscure - shedding light on the trickery the compiler employs to make this work, by generating more than one destructor for certain classes. If you’re into such things, read on. If not, sorry about that; I heard that three new Javascript libraries were released this week for MVC JSON-based dynamic CSS layout. Everyone’s switching! Hurry up to keep up with the cool guys and leave this grumpy compiler engineer to mumble to himself.</p>
<h3 id="Virtual_operator_delete?">Virtual operator delete?</h3><p>Consider this code sample:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() = 0;</span><br><span class="line">  virtual ~<span class="keyword">Animal</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Sheep : public <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep says baaaaa\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  virtual ~Sheep() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep is dead\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void operator delete(void* p) &#123;</span><br><span class="line">    printf(<span class="string">"Reclaiming Sheep storage from %p\n"</span>, p);</span><br><span class="line">    ::operator delete(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  <span class="keyword">Animal</span>* ap = new Sheep;</span><br><span class="line">  ap-&gt;<span class="keyword">say</span>();</span><br><span class="line">  delete ap;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Cxx" scheme="http://ytlvy.com/tags/Cxx/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[LRC simple introduction]]></title>
    <link href="http://ytlvy.com/2015/09/01/LRC-simple-introduction/"/>
    <id>http://ytlvy.com/2015/09/01/LRC-simple-introduction/</id>
    <published>2015-09-01T13:27:23.000Z</published>
    <updated>2015-09-01T13:28:04.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-23 08:41:30</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<h2 id="LRC文件介绍">LRC文件介绍</h2><p>Lrc是英文lyric（歌词）的缩写，被用做歌词文件的扩展名。以lrc为扩展名的歌词文件可以在各类数码播放器中同步显示。</p>
<h3 id="格式">格式</h3><p>[分钟:秒.毫秒]歌词</p>
<p>用记事本按照上述格式写好后,将拓展名改为lrc即可做出该文件.LRC歌词是一种通过编辑器把歌词按歌曲歌词出现的时间编辑成一个文件，在播放歌曲时同步依次显示出来的一种歌词文件。把歌曲和LRC歌词命为相同的文件名放在同一目录下，用带显示歌词功能的播放器播放歌曲时歌词就可以同步显示显示，方便查看和学歌。</p>
<p>lrc歌词是一种包含着”[<em>:</em>]”形式的”标签”的、基于纯文本的歌词专用格式，这种格式的歌词可以用普通的文字处理软件查看、编辑。当然，要进行高效的lrc歌词制作需要专门的软件（如千千静听，Winamp等）。</p>
<p>lrc歌词文本中含有两类标签：</p>
<ol>
<li>标识标签，其格式为”[标识名:值]”主要包含以下预定义的标签： [ar:歌手名]、[ti:歌曲名]、[al:专辑名]、[by:编辑者(指lrc歌词的制作人)]、[offset:时间补偿值] （其单位是毫秒，正值表示整体提前，负值相反。这是用于总体调整显示快慢的，但多数的MP3可能不会支持这种标签）。</li>
<li>是时间标签，形式为”[mm:ss]”或”[mm:ss.fff]”(分钟数:秒数:毫秒数)，时间标签需位于某行歌词中的句首部分，一行歌词可以包含多个时间标签(比如歌词中的迭句部分)。当歌曲播放到达某一时间点时，MP3就会寻找对应的时间标签并显示标签后面的歌词文本，这样就完成了”歌词同步”的功能。</li>
</ol>
<h3 id="详解">详解</h3><h4 id="时间标签（Time-tag）">时间标签（Time-tag）</h4><p>　　形式为”[mm:ss]”或”[mm:ss.ff]”（分钟数:秒数）。数字须为非负整数，比如”[12:34.5]”是有效的，而”[0x0C:-34.5]”无效。　它可以位于某行歌词中的任意位置。一行歌词可以包含多个时间标签（比如歌词中的迭句部分）。根据这些时间标签，用户端程序会按顺序依次高亮显示歌词，从而实现卡拉OK功能。另外，标签无须排序。</p>
<h4 id="标识标签（ID-tags）">标识标签（ID-tags）</h4><p>其格式为”[标识名:值]”。大小写等价。以下是预定义的标签。<br>[ar:艺人名]<br>[ti:曲名]<br>[al:专辑名]<br>[by:编者（指编辑LRC歌词的人）]<br>[offset:时间补偿值] 其单位是毫秒，正值表示整体提前，负值相反。这是用于总体调整显示快慢的。</p>
<a id="more"></a>
<p>例如：<br>[ti:依赖]——ti.=title,标题，即歌曲名<br>[ar:蔡健雅]——ar.=artist,艺术家，即歌手名<br>[al:MY SPACE]——al.=album,专辑，即歌曲被收录的专辑<br>[by:Chapter Chang]——by somebody,即LRC歌词文件的制作者<br>[offset:0]——补偿时值。500=0.5秒，正负值分别提前和延长相应的时间<br>（以下为歌词内容，前面中括号内的数字为内容显示时的时值精确到毫秒；后面为在播放器上显示的内容，可以介绍歌曲的名称、演唱者和作者等ID3信息等。相同的歌词内容反复时可以在词句前加上其依次出现时的时值）<br>　　[00:00.50]蔡健雅 - 依赖<br>　　[00:07.94]词、曲：蔡健雅、陶晶莹<br>　　[00:11.60]关了灯把房间整理好　<br>　　[00:15.48]凌晨三点还是睡不著<br>　　[00:19.64]你应该是不在　所以把电话挂掉<br>　　[00:30.39]在黑暗手表跟着心跳<br>　　[00:34.57]怎么慢它停也停不了<br>　　[00:39.70]我应该只是心情不好<br>　　[00:45.00]那又怎样<br>　　[00:48.50]但本来是这样<br>　　[01:21.36]朋友们对我的安慰<br>　　[01:25.20]都是同样的一个话题<br>　　[01:29.73]我一定要变得更坚强<br>　　[01:34.68]说很简单<br>　　[00:38.50]但是做却很难<br>　　[00:53.00][01:43.88][02:11.23]虽然无所谓写在脸上<br>　　[00:58.21][01:48.44][02:15.79]我还是舍不得让你离开　<br>　　[01:02.97][01:53.50][02:20.60]虽然闭着眼假装听不到<br>[01:07.84][01:58.23][02:25.11][02:33.15]你对爱　已不再　想依赖</p>
<h3 id="播放原理">播放原理</h3><p>歌词播放的原理其实很简单，找到时间标志，将其与当前播放时间比对，如果一致则显示该时间标志对应的歌词，为方便起见没有对歌曲信息做处理（如果要显示歌曲信息，可以通过比对关键子如”ti:”、”ar:”等来获取）。</p>
<p>具体实现起来可以有两种实现方式：<br>方法一：<br>使用到的链表：<br><figure class="highlight thrift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span> </span>&#123;</span><br><span class="line">    datatype data; <span class="comment">//datatype 是data的类型</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *prior, *next;</span><br><span class="line">&#125;linklist;</span></span><br></pre></td></tr></table></figure></p>
<p>步骤：</p>
<ol>
<li>以’\n’符号将歌词文件分成单句并存入链表1中；</li>
<li>以’]’符号将单句歌词分隔成一个或多个时间标志和一句歌词；</li>
<li>扩充歌词，一个时间标志与对应的歌词连接产生一个新的字符串，存入链表2的节点中，删除链表1，释放内存；</li>
<li>按时间排序，产生新的链表3，删除链表2，释放内存；</li>
<li>对链表3进行操作，以’]’符号将单句歌词分成时间标志和歌词分别存入链表timelist和lyricslist中，其中时间标志成以秒为单位，且此时时间链timelist和歌词链表lyricslist的节点是一一对应的；</li>
<li>读时间链表，将当前时间与节点中存放的时间相比较，如果一致则显示歌词链表中的对应节点的内容；</li>
<li>释放内存。</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">01:59.30</span>][<span class="link_reference">00:21.00</span>]一场雨把我困在这里</span><br><span class="line"><span class="code">          |                      |</span></span><br><span class="line">[01:59.30]一场雨把我困在这里 [00:21.00]一场雨把我困在这里</span><br><span class="line">  |            |                |           |</span><br><span class="line"> 119     一场雨把我困在这里     21      一场雨把我困在这里</span><br></pre></td></tr></table></figure>
<p>如果当前时间 t == 119 ,则显示”一场雨把我困在这里”;</p>
<p>优点：逻辑上比较简单，容易实现；<br>缺点：浪费内存空间。</p>
<p>方法二：<br>使用到的链表：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> node &#123;</span><br><span class="line">    <span class="keyword">int</span> time;<span class="comment">//存放时间标志（已转换成int型）</span></span><br><span class="line">    Lyrics *lyrics;<span class="comment">//指向存放歌词的节点</span></span><br><span class="line">    <span class="keyword">struct</span> node *prior,*next;</span><br><span class="line">&#125;timelist;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> node &#123;</span><br><span class="line">    <span class="keyword">int</span> flag; <span class="comment">//记录歌词被时间标志指向的次数,初始化为0，指向一次加1，释放一次减1，当为0时释放歌词节点</span></span><br><span class="line">    <span class="built_in">string</span> lyrics;</span><br><span class="line">&#125;Lyrics;</span><br></pre></td></tr></table></figure></p>
<p>步骤：</p>
<ol>
<li>从后往前读存放.lrc文件的buffer，碰到第一个’]’，产生一个新的buffer,将之前读的内容存入buffer中（即歌词），产生一个Lyrics节点并指向该新产生的buffer，初始化flag为0；</li>
<li>接着往前读，读到’[‘时，将’[‘’]’之间的数据”xx:xx.xx”转换成以秒为单位的时间标志，产生一个新的timelist节点，time 存放时间节点，lyrics指向步骤1产生的Lyrics节点，并将Lyircs节点中的flag加1；</li>
<li>重复步骤2，直至读到’\n’；</li>
<li>重复步骤1，2，3直至读完buffer；</li>
<li>将当前时间与timelist节点中的time比较，如果一致则显示指向的Lyrics节点中的歌词lyrics；</li>
<li>释放内存。</li>
</ol>
<p>优点：节省内存空间，效率比较高<br>缺点：实现比较复杂，内存释放要注意。</p>
<p>例：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="link_label">01:59.30</span>][<span class="link_reference">00:21.00</span>]一场雨把我困在这里</span><br><span class="line"></span><br><span class="line">time: 119</span><br><span class="line">lyrics:-----------------|</span><br><span class="line"><span class="code">                        | </span></span><br><span class="line"><span class="code">                        | flag:2</span></span><br><span class="line"><span class="code">                        | lyrics --- 一场雨把我困在这里</span></span><br><span class="line"><span class="code">                        |</span></span><br><span class="line">time:21                 |</span><br><span class="line">lyrics:-----------------|</span><br></pre></td></tr></table></figure></p>
<p>注意事项：</p>
<ol>
<li>无论是否在行首，行内凡具有”[<em>:</em>]”形式的都应认为是标签。（注意：其中的冒号并非全角字符”：”）</li>
<li>凡是标签都不应显示。</li>
<li>凡是标签，且被冒号分隔的两部分都为非负数，则应认为是时间标签。</li>
<li>因此，对于非标准形式（非”[mm:ss]”）的时间标签也应能识别（如”[0:0]”）。</li>
<li>凡是标签，且非时间标签的，应认为是标识标签。</li>
<li>标识名中大小写等价。</li>
<li>为了向后兼容，应对未定义的新标签作忽略处理。另应对注释标签（[:]）后的同一行内容作忽略处理。</li>
<li>应允许一行中存在多个标签，并能正确处理。</li>
<li>应能正确处理未排序的标签。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-23 08:41:30</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<h2 id="LRC文件介绍">LRC文件介绍</h2><p>Lrc是英文lyric（歌词）的缩写，被用做歌词文件的扩展名。以lrc为扩展名的歌词文件可以在各类数码播放器中同步显示。</p>
<h3 id="格式">格式</h3><p>[分钟:秒.毫秒]歌词</p>
<p>用记事本按照上述格式写好后,将拓展名改为lrc即可做出该文件.LRC歌词是一种通过编辑器把歌词按歌曲歌词出现的时间编辑成一个文件，在播放歌曲时同步依次显示出来的一种歌词文件。把歌曲和LRC歌词命为相同的文件名放在同一目录下，用带显示歌词功能的播放器播放歌曲时歌词就可以同步显示显示，方便查看和学歌。</p>
<p>lrc歌词是一种包含着”[<em>:</em>]”形式的”标签”的、基于纯文本的歌词专用格式，这种格式的歌词可以用普通的文字处理软件查看、编辑。当然，要进行高效的lrc歌词制作需要专门的软件（如千千静听，Winamp等）。</p>
<p>lrc歌词文本中含有两类标签：</p>
<ol>
<li>标识标签，其格式为”[标识名:值]”主要包含以下预定义的标签： [ar:歌手名]、[ti:歌曲名]、[al:专辑名]、[by:编辑者(指lrc歌词的制作人)]、[offset:时间补偿值] （其单位是毫秒，正值表示整体提前，负值相反。这是用于总体调整显示快慢的，但多数的MP3可能不会支持这种标签）。</li>
<li>是时间标签，形式为”[mm:ss]”或”[mm:ss.fff]”(分钟数:秒数:毫秒数)，时间标签需位于某行歌词中的句首部分，一行歌词可以包含多个时间标签(比如歌词中的迭句部分)。当歌曲播放到达某一时间点时，MP3就会寻找对应的时间标签并显示标签后面的歌词文本，这样就完成了”歌词同步”的功能。</li>
</ol>
<h3 id="详解">详解</h3><h4 id="时间标签（Time-tag）">时间标签（Time-tag）</h4><p>　　形式为”[mm:ss]”或”[mm:ss.ff]”（分钟数:秒数）。数字须为非负整数，比如”[12:34.5]”是有效的，而”[0x0C:-34.5]”无效。　它可以位于某行歌词中的任意位置。一行歌词可以包含多个时间标签（比如歌词中的迭句部分）。根据这些时间标签，用户端程序会按顺序依次高亮显示歌词，从而实现卡拉OK功能。另外，标签无须排序。</p>
<h4 id="标识标签（ID-tags）">标识标签（ID-tags）</h4><p>其格式为”[标识名:值]”。大小写等价。以下是预定义的标签。<br>[ar:艺人名]<br>[ti:曲名]<br>[al:专辑名]<br>[by:编者（指编辑LRC歌词的人）]<br>[offset:时间补偿值] 其单位是毫秒，正值表示整体提前，负值相反。这是用于总体调整显示快慢的。</p>]]>
    
    </summary>
    
      <category term="Media" scheme="http://ytlvy.com/tags/Media/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[rtmp live procedure]]></title>
    <link href="http://ytlvy.com/2015/09/01/rtmp-live-procedure/"/>
    <id>http://ytlvy.com/2015/09/01/rtmp-live-procedure/</id>
    <published>2015-09-01T13:24:49.000Z</published>
    <updated>2015-09-01T13:26:11.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 15:55:28</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.codeman.net/2014/06/529.html" target="_blank" rel="external">reference</a></p>
<h2 id="rtmp直播流程">rtmp直播流程</h2><p>下面是通过RTMP抓包所得，左侧是客户端Flash Media Live Encoder，右侧是服务器Flash Media Server</p>
<figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">+--------------+                                        +--------------+</span><br><span class="line">|<span class="string"> Client(FMLE) </span>|<span class="string">                                        </span>|<span class="string"> Server (FMS) </span>|</span><br><span class="line">+--------------+                                        +--------------+</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                          C0 C1                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    +----</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                        S0 S1 S2                        </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------</span>|<span class="string"> handshake</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                           C2                           </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    +----</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                 connect('live_server')                 </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">         Windows Acknowledgement Size 2500000           </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------</span>|</span><br><span class="line">       |<span class="string">                                                        </span>|<span class="string"> connect</span><br><span class="line">       </span>|<span class="string">           Set Peer BandWith 2500000,Dynamic            </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------</span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                 Set Chunk Size 1024                    </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------</span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">        _result('NetConnection.Connect.Success')        </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------+----</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">              releaseStream('livestream')               </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">               FCPulbic('livestream')                   </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                    createStream()                      </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|<span class="string"> publish</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                      _result()                         </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------</span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">     publish('livestream?videoKeyframeFrequency=5')     </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                 Set Chunk Size 1024                    </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">         onStatus('NetStream.Publish.Start')            </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------+----</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                    @setDataFrame()                     </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                     Video Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                Set Chunk Size 418                      </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                     Audio Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|<span class="string"> av data</span><br><span class="line">       </span>|<span class="string">                     Audio Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                     Video Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                     Audio Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                     Audio Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                     Video Data                         </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                    FCUnpublish()                       </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    +----</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                    closeStream()                       </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|<span class="string"> close</span><br><span class="line">       </span>|<span class="string">        onStatus('NetStream.Unpublish.Success')         </span>|</span><br><span class="line">       |<span class="string">    &lt;---------------------------------------------------</span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                    deleteStream()                      </span>|</span><br><span class="line">       |<span class="string">---------------------------------------------------&gt;    +----</span><br><span class="line">       </span>|<span class="string">                                                        </span>|</span><br><span class="line">       |<span class="string">                                                        </span>|</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 15:55:28</li>
<li>]]>
    </summary>
    
      <category term="Media" scheme="http://ytlvy.com/tags/Media/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Live Play By rtmp]]></title>
    <link href="http://ytlvy.com/2015/09/01/Live-Play-By-rtmp/"/>
    <id>http://ytlvy.com/2015/09/01/Live-Play-By-rtmp/</id>
    <published>2015-09-01T13:06:31.000Z</published>
    <updated>2015-09-01T13:07:01.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 15:47:41</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://blog.csdn.net/firehood_/article/details/8783589" target="_blank" rel="external">reference</a></p>
<h2 id="H264视频通过RTMP直播">H264视频通过RTMP直播</h2><p>前面的文章中提到了通过RTSP（Real Time Streaming Protocol）的方式来实现视频的直播，但RTSP方式的一个弊端是如果需要支持客户端通过网页来访问，就需要在在页面中嵌入一个ActiveX控件，而ActiveX一般都需要签名才能正常使用，否则用户在使用时还需要更改浏览器设置，并且ActiveX还只支持IE内核的浏览器，Chrome、FireFox需要IE插件才能运行，因此会特别影响用户体验。而RTMP(Real Time Messaging Protocol)很好的解决了这一个问题。由于RTMP是针对FLASH的流媒体协议，视频通过RTMP直播后，只需要在WEB上嵌入一个Web Player（如Jwplayer）即可观看，而且对平台也没什么限制，还可以方便的通过手机观看。</p>
<p>视频通过RTMP方式发布需要一个RTMP Server(常见的有FMS、Wowza Media Server， 开源的有CRtmpServer、Red5等)，原始视频只要按照RTMP协议发送给RTMP Server就可以RTMP视频流的发布了。为了便于视频的打包发布，封装了一个RTMPStream，目前只支持发送H264的视频文件。可以直接发送H264数据帧或H264文件，RTMPStream提供的接口如下。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CRTMPStream    </span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    CRTMPStream(<span class="keyword">void</span>);    </span><br><span class="line">    ~CRTMPStream(<span class="keyword">void</span>);    </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="comment">// 连接到RTMP Server    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Connect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* url)</span></span>;    </span><br><span class="line">    <span class="comment">// 断开连接    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Close</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="comment">// 发送MetaData    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SendMetadata</span><span class="params">(LPRTMPMetadata lpMetaData)</span></span>;    </span><br><span class="line">    <span class="comment">// 发送H264数据帧    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SendH264Packet</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *data,<span class="keyword">unsigned</span> <span class="keyword">int</span> size,<span class="keyword">bool</span> bIsKeyFrame,<span class="keyword">unsigned</span> <span class="keyword">int</span> nTimeStamp)</span></span>;    </span><br><span class="line">    <span class="comment">// 发送H264文件    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SendH264File</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pFileName)</span></span>;    </span><br><span class="line"><span class="comment">//...    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>调用示例：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;    </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> "RTMPStream\RTMPStream.h"    </span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span>* argv[])</span>    </span><br><span class="line"></span>&#123;    </span><br><span class="line">    CRTMPStream rtmpSender;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">bool</span> bRet = rtmpSender.Connect(<span class="string">"rtmp://192.168.1.104/live/test"</span>);    </span><br><span class="line">    </span><br><span class="line">    rtmpSender.SendH264File(<span class="string">"E:\\video\\test.264"</span>);    </span><br><span class="line">    </span><br><span class="line">    rtmpSender.Close();    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过JwPlayer播放效果如下：</p>
<p><img src="http://img.my.csdn.net/uploads/201304/10/1365582321_9718.JPG" alt=""></p>
<p>最后附上RTMPStream完整的代码：<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>  </span><br><span class="line">filename:   RTMPStream.h </span><br><span class="line">created:    2013-04-3 </span><br><span class="line">author:     firehood  </span><br><span class="line">purpose:    发送H264视频到RTMP Server，使用libRtmp库 </span><br><span class="line"><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span><span class="keyword">*</span>/   </span><br><span class="line"><span class="comment">#pragma once  </span></span><br><span class="line"><span class="comment">#include "rtmp.h"  </span></span><br><span class="line"><span class="comment">#include "rtmp_sys.h"  </span></span><br><span class="line"><span class="comment">#include "amf.h"  </span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#define FILEBUFSIZE (1024 * 1024 * 10)       //  10M  </span></span><br><span class="line">  </span><br><span class="line">// NALU单元  </span><br><span class="line">typedef struct _NaluUnit  </span><br><span class="line">&#123;  </span><br><span class="line">    int type;  </span><br><span class="line">    int size;  </span><br><span class="line">    unsigned char <span class="keyword">*</span>data;  </span><br><span class="line">&#125;NaluUnit;  </span><br><span class="line">  </span><br><span class="line">typedef struct _RTMPMetadata  </span><br><span class="line">&#123;  </span><br><span class="line">    // video, must be h264 type  </span><br><span class="line">    unsigned int    nWidth;  </span><br><span class="line">    unsigned int    nHeight;  </span><br><span class="line">    unsigned int    nFrameRate;     // fps  </span><br><span class="line">    unsigned int    nVideoDataRate; // bps  </span><br><span class="line">    unsigned int    nSpsLen;  </span><br><span class="line">    unsigned char   Sps[1024];  </span><br><span class="line">    unsigned int    nPpsLen;  </span><br><span class="line">    unsigned char   Pps[1024];  </span><br><span class="line">  </span><br><span class="line">    // audio, must be aac type  </span><br><span class="line">    bool            bHasAudio;  </span><br><span class="line">    unsigned int    nAudioSampleRate;  </span><br><span class="line">    unsigned int    nAudioSampleSize;  </span><br><span class="line">    unsigned int    nAudioChannels;  </span><br><span class="line">    char            pAudioSpecCfg;  </span><br><span class="line">    unsigned int    nAudioSpecCfgLen;  </span><br><span class="line">  </span><br><span class="line">&#125; RTMPMetadata,<span class="keyword">*</span>LPRTMPMetadata;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">class CRTMPStream  </span><br><span class="line">&#123;  </span><br><span class="line">public:  </span><br><span class="line">    CRTMPStream(void);  </span><br><span class="line">    ~CRTMPStream(void);  </span><br><span class="line">public:  </span><br><span class="line">    // 连接到RTMP Server  </span><br><span class="line">    bool Connect(const char<span class="keyword">*</span> url);  </span><br><span class="line">    // 断开连接  </span><br><span class="line">    void Close();  </span><br><span class="line">    // 发送MetaData  </span><br><span class="line">    bool SendMetadata(LPRTMPMetadata lpMetaData);  </span><br><span class="line">    // 发送H264数据帧  </span><br><span class="line">    bool SendH264Packet(unsigned char <span class="keyword">*</span>data,unsigned int size,bool bIsKeyFrame,unsigned int nTimeStamp);  </span><br><span class="line">    // 发送H264文件  </span><br><span class="line">    bool SendH264File(const char <span class="keyword">*</span>pFileName);  </span><br><span class="line">private:  </span><br><span class="line">    // 送缓存中读取一个NALU包  </span><br><span class="line">    bool ReadOneNaluFromBuf(NaluUnit &amp;nalu);  </span><br><span class="line">    // 发送数据  </span><br><span class="line">    int SendPacket(unsigned int nPacketType,unsigned char <span class="keyword">*</span>data,unsigned int size,unsigned int nTimestamp);  </span><br><span class="line">private:  </span><br><span class="line">    RTMP<span class="keyword">*</span> m_pRtmp;  </span><br><span class="line">    unsigned char<span class="keyword">*</span> m_pFileBuf;  </span><br><span class="line">    unsigned int  m_nFileBufSize;  </span><br><span class="line">    unsigned int  m_nCurPos;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/********************************************************************  </span><br><span class="line">filename:   RTMPStream.cpp </span><br><span class="line">created:    2013-04-3 </span><br><span class="line">author:     firehood  </span><br><span class="line">purpose:    发送H264视频到RTMP Server，使用libRtmp库 </span><br><span class="line">*********************************************************************/</span>   </span><br><span class="line"><span class="preprocessor">#include <span class="title">"RTMPStream.h"</span>  </span></span><br><span class="line"><span class="preprocessor">#include <span class="title">"SpsDecode.h"</span>  </span></span><br><span class="line"><span class="preprocessor">#ifdef WIN32    </span></span><br><span class="line"><span class="preprocessor">#include <span class="title">&lt;windows.h&gt;</span>  </span></span><br><span class="line"><span class="preprocessor">#endif  </span></span><br><span class="line">  </span><br><span class="line"><span class="preprocessor">#ifdef WIN32  </span></span><br><span class="line"><span class="preprocessor">#pragma comment(lib,<span class="title">"WS2_32.lib"</span>)  </span></span><br><span class="line"><span class="preprocessor">#pragma comment(lib,<span class="title">"winmm.lib"</span>)  </span></span><br><span class="line"><span class="preprocessor">#endif  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">enum</span>  </span><br><span class="line">&#123;  </span><br><span class="line">    FLV_CODE<span class="built_in">CID_H264</span> = <span class="number">7</span>,  </span><br><span class="line">&#125;;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> InitSockets()    </span><br><span class="line">&#123;    </span><br><span class="line"><span class="preprocessor">#ifdef WIN32    </span></span><br><span class="line">    WORD version;    </span><br><span class="line">    WSADATA wsaData;    </span><br><span class="line">    version = MAKEWORD(<span class="number">1</span>, <span class="number">1</span>);    </span><br><span class="line">    <span class="keyword">return</span> (WSAStartup(version, &amp;wsaData) == <span class="number">0</span>);    </span><br><span class="line"><span class="preprocessor">#else    </span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">TRUE</span>;    </span><br><span class="line"><span class="preprocessor">#endif    </span></span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> CleanupSockets()    </span><br><span class="line">&#123;    </span><br><span class="line"><span class="preprocessor">#ifdef WIN32    </span></span><br><span class="line">    WSACleanup();    </span><br><span class="line"><span class="preprocessor">#endif    </span></span><br><span class="line">&#125;    </span><br><span class="line">  </span><br><span class="line"><span class="keyword">char</span> * put_byte( <span class="keyword">char</span> *output, uint8_t nVal )    </span><br><span class="line">&#123;    </span><br><span class="line">    output[<span class="number">0</span>] = nVal;    </span><br><span class="line">    <span class="keyword">return</span> output+<span class="number">1</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">char</span> * put_be16(<span class="keyword">char</span> *output, uint16_t nVal )    </span><br><span class="line">&#123;    </span><br><span class="line">    output[<span class="number">1</span>] = nVal &amp; <span class="number">0xff</span>;    </span><br><span class="line">    output[<span class="number">0</span>] = nVal &gt;&gt; <span class="number">8</span>;    </span><br><span class="line">    <span class="keyword">return</span> output+<span class="number">2</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">char</span> * put_be24(<span class="keyword">char</span> *output,uint32_t nVal )    </span><br><span class="line">&#123;    </span><br><span class="line">    output[<span class="number">2</span>] = nVal &amp; <span class="number">0xff</span>;    </span><br><span class="line">    output[<span class="number">1</span>] = nVal &gt;&gt; <span class="number">8</span>;    </span><br><span class="line">    output[<span class="number">0</span>] = nVal &gt;&gt; <span class="number">16</span>;    </span><br><span class="line">    <span class="keyword">return</span> output+<span class="number">3</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">char</span> * put_be32(<span class="keyword">char</span> *output, uint32_t nVal )    </span><br><span class="line">&#123;    </span><br><span class="line">    output[<span class="number">3</span>] = nVal &amp; <span class="number">0xff</span>;    </span><br><span class="line">    output[<span class="number">2</span>] = nVal &gt;&gt; <span class="number">8</span>;    </span><br><span class="line">    output[<span class="number">1</span>] = nVal &gt;&gt; <span class="number">16</span>;    </span><br><span class="line">    output[<span class="number">0</span>] = nVal &gt;&gt; <span class="number">24</span>;    </span><br><span class="line">    <span class="keyword">return</span> output+<span class="number">4</span>;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">char</span> *  put_be64( <span class="keyword">char</span> *output, uint64_t nVal )    </span><br><span class="line">&#123;    </span><br><span class="line">    output=put_be32( output, nVal &gt;&gt; <span class="number">32</span> );    </span><br><span class="line">    output=put_be32( output, nVal );    </span><br><span class="line">    <span class="keyword">return</span> output;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">char</span> * put_amf_string( <span class="keyword">char</span> *c, <span class="keyword">const</span> <span class="keyword">char</span> *str )    </span><br><span class="line">&#123;    </span><br><span class="line">    uint16_t len = strlen( str );    </span><br><span class="line">    c=put_be16( c, len );    </span><br><span class="line">    memcpy(c,str,len);    </span><br><span class="line">    <span class="keyword">return</span> c+len;    </span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">char</span> * put_amf_double( <span class="keyword">char</span> *c, <span class="keyword">double</span> d )    </span><br><span class="line">&#123;    </span><br><span class="line">    *c++ = AMF_NUMBER;  <span class="comment">/* type: Number */</span>    </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">char</span> *ci, *co;    </span><br><span class="line">        ci = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)&amp;d;    </span><br><span class="line">        co = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)c;    </span><br><span class="line">        co[<span class="number">0</span>] = ci[<span class="number">7</span>];    </span><br><span class="line">        co[<span class="number">1</span>] = ci[<span class="number">6</span>];    </span><br><span class="line">        co[<span class="number">2</span>] = ci[<span class="number">5</span>];    </span><br><span class="line">        co[<span class="number">3</span>] = ci[<span class="number">4</span>];    </span><br><span class="line">        co[<span class="number">4</span>] = ci[<span class="number">3</span>];    </span><br><span class="line">        co[<span class="number">5</span>] = ci[<span class="number">2</span>];    </span><br><span class="line">        co[<span class="number">6</span>] = ci[<span class="number">1</span>];    </span><br><span class="line">        co[<span class="number">7</span>] = ci[<span class="number">0</span>];    </span><br><span class="line">    &#125;    </span><br><span class="line">    <span class="keyword">return</span> c+<span class="number">8</span>;    </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">CRT<span class="built_in">MPStream</span>::CRT<span class="built_in">MPStream</span>(<span class="keyword">void</span>):  </span><br><span class="line">m_pRtmp(<span class="literal">NULL</span>),  </span><br><span class="line">m_nFileBufSize(<span class="number">0</span>),  </span><br><span class="line">m_nCurPos(<span class="number">0</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    m_pFileBuf = new <span class="keyword">unsigned</span> <span class="keyword">char</span>[FILEBUFSIZE];  </span><br><span class="line">    memset(m_pFileBuf,<span class="number">0</span>,FILEBUFSIZE);  </span><br><span class="line">    InitSockets();  </span><br><span class="line">    m_pRtmp = RT<span class="built_in">MP_Alloc</span>();    </span><br><span class="line">    RT<span class="built_in">MP_Init</span>(m_pRtmp);    </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">CRT<span class="built_in">MPStream</span>::~CRT<span class="built_in">MPStream</span>(<span class="keyword">void</span>)  </span><br><span class="line">&#123;  </span><br><span class="line">    Close();  </span><br><span class="line">    WSACleanup();    </span><br><span class="line">    delete[] m_pFileBuf;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">bool</span> CRT<span class="built_in">MPStream</span>::Connect(<span class="keyword">const</span> <span class="keyword">char</span>* url)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(RT<span class="built_in">MP_SetupURL</span>(m_pRtmp, (<span class="keyword">char</span>*)url)&lt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">FALSE</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    RT<span class="built_in">MP_EnableWrite</span>(m_pRtmp);  </span><br><span class="line">    <span class="keyword">if</span>(RT<span class="built_in">MP_Connect</span>(m_pRtmp, <span class="literal">NULL</span>)&lt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">FALSE</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span>(RT<span class="built_in">MP_ConnectStream</span>(m_pRtmp,<span class="number">0</span>)&lt;<span class="number">0</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">FALSE</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">TRUE</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">void</span> CRT<span class="built_in">MPStream</span>::Close()  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(m_pRtmp)  </span><br><span class="line">    &#123;  </span><br><span class="line">        RT<span class="built_in">MP_Close</span>(m_pRtmp);  </span><br><span class="line">        RT<span class="built_in">MP_Free</span>(m_pRtmp);  </span><br><span class="line">        m_pRtmp = <span class="literal">NULL</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">int</span> CRT<span class="built_in">MPStream</span>::SendPacket(<span class="keyword">unsigned</span> <span class="keyword">int</span> nPacketType,<span class="keyword">unsigned</span> <span class="keyword">char</span> *data,<span class="keyword">unsigned</span> <span class="keyword">int</span> size,<span class="keyword">unsigned</span> <span class="keyword">int</span> nTimestamp)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(m_pRtmp == <span class="literal">NULL</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">FALSE</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    RT<span class="built_in">MPPacket</span> packet;  </span><br><span class="line">    RT<span class="built_in">MPPacket_Reset</span>(&amp;packet);  </span><br><span class="line">    RT<span class="built_in">MPPacket_Alloc</span>(&amp;packet,size);  </span><br><span class="line">  </span><br><span class="line">    packet<span class="variable">.m_packetType</span> = nPacketType;  </span><br><span class="line">    packet<span class="variable">.m_nChannel</span> = <span class="number">0x04</span>;    </span><br><span class="line">    packet<span class="variable">.m_headerType</span> = RT<span class="built_in">MP_PACKET_SIZE_LARGE</span>;    </span><br><span class="line">    packet<span class="variable">.m_nTimeStamp</span> = nTimestamp;    </span><br><span class="line">    packet<span class="variable">.m_nInfoField2</span> = m_pRtmp-&gt;m_stream_id;  </span><br><span class="line">    packet<span class="variable">.m_nBodySize</span> = size;  </span><br><span class="line">    memcpy(packet<span class="variable">.m_body</span>,data,size);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> nRet = RT<span class="built_in">MP_SendPacket</span>(m_pRtmp,&amp;packet,<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    RT<span class="built_in">MPPacket_Free</span>(&amp;packet);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> nRet;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">bool</span> CRT<span class="built_in">MPStream</span>::SendMetadata(LPRT<span class="built_in">MPMetadata</span> lpMetaData)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(lpMetaData == <span class="literal">NULL</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">char</span> body[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">char</span> * p = (<span class="keyword">char</span> *)body;    </span><br><span class="line">    p = put_byte(p, AMF_STRING );  </span><br><span class="line">    p = put_amf_string(p , <span class="string">"@setDataFrame"</span> );  </span><br><span class="line">  </span><br><span class="line">    p = put_byte( p, AMF_STRING );  </span><br><span class="line">    p = put_amf_string( p, <span class="string">"onMetaData"</span> );  </span><br><span class="line">  </span><br><span class="line">    p = put_byte(p, AMF_OBJECT );    </span><br><span class="line">    p = put_amf_string( p, <span class="string">"copyright"</span> );    </span><br><span class="line">    p = put_byte(p, AMF_STRING );    </span><br><span class="line">    p = put_amf_string( p, <span class="string">"firehood"</span> );    </span><br><span class="line">  </span><br><span class="line">    p =put_amf_string( p, <span class="string">"width"</span>);  </span><br><span class="line">    p =put_amf_double( p, lpMetaData-&gt;nWidth);  </span><br><span class="line">  </span><br><span class="line">    p =put_amf_string( p, <span class="string">"height"</span>);  </span><br><span class="line">    p =put_amf_double( p, lpMetaData-&gt;nHeight);  </span><br><span class="line">  </span><br><span class="line">    p =put_amf_string( p, <span class="string">"framerate"</span> );  </span><br><span class="line">    p =put_amf_double( p, lpMetaData-&gt;nFrameRate);   </span><br><span class="line">  </span><br><span class="line">    p =put_amf_string( p, <span class="string">"videocodecid"</span> );  </span><br><span class="line">    p =put_amf_double( p, FLV_CODE<span class="built_in">CID_H264</span> );  </span><br><span class="line">  </span><br><span class="line">    p =put_amf_string( p, <span class="string">""</span> );  </span><br><span class="line">    p =put_byte( p, AMF_OBJECT_END  );  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> index = p-body;  </span><br><span class="line">  </span><br><span class="line">    SendPacket(RT<span class="built_in">MP_PACKET_TYPE_INFO</span>,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)body,p-body,<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">    body[i++] = <span class="number">0x17</span>; <span class="comment">// 1:keyframe  7:AVC  </span></span><br><span class="line">    body[i++] = <span class="number">0x00</span>; <span class="comment">// AVC sequence header  </span></span><br><span class="line">  </span><br><span class="line">    body[i++] = <span class="number">0x00</span>;  </span><br><span class="line">    body[i++] = <span class="number">0x00</span>;  </span><br><span class="line">    body[i++] = <span class="number">0x00</span>; <span class="comment">// fill in 0;  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// AVCDecoderConfigurationRecord.  </span></span><br><span class="line">    body[i++] = <span class="number">0x01</span>; <span class="comment">// configurationVersion  </span></span><br><span class="line">    body[i++] = lpMetaData-&gt;Sps[<span class="number">1</span>]; <span class="comment">// AVCProfileIndication  </span></span><br><span class="line">    body[i++] = lpMetaData-&gt;Sps[<span class="number">2</span>]; <span class="comment">// profile_compatibility  </span></span><br><span class="line">    body[i++] = lpMetaData-&gt;Sps[<span class="number">3</span>]; <span class="comment">// AVCLevelIndication   </span></span><br><span class="line">    body[i++] = <span class="number">0xff</span>; <span class="comment">// lengthSizeMinusOne    </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// sps nums  </span></span><br><span class="line">    body[i++] = <span class="number">0xE1</span>; <span class="comment">//&amp;0x1f  </span></span><br><span class="line">    <span class="comment">// sps data length  </span></span><br><span class="line">    body[i++] = lpMetaData-&gt;nSpsLen&gt;&gt;<span class="number">8</span>;  </span><br><span class="line">    body[i++] = lpMetaData-&gt;nSpsLen&amp;<span class="number">0xff</span>;  </span><br><span class="line">    <span class="comment">// sps data  </span></span><br><span class="line">    memcpy(&amp;body[i],lpMetaData-&gt;Sps,lpMetaData-&gt;nSpsLen);  </span><br><span class="line">    i= i+lpMetaData-&gt;nSpsLen;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// pps nums  </span></span><br><span class="line">    body[i++] = <span class="number">0x01</span>; <span class="comment">//&amp;0x1f  </span></span><br><span class="line">    <span class="comment">// pps data length   </span></span><br><span class="line">    body[i++] = lpMetaData-&gt;nPpsLen&gt;&gt;<span class="number">8</span>;  </span><br><span class="line">    body[i++] = lpMetaData-&gt;nPpsLen&amp;<span class="number">0xff</span>;  </span><br><span class="line">    <span class="comment">// sps data  </span></span><br><span class="line">    memcpy(&amp;body[i],lpMetaData-&gt;Pps,lpMetaData-&gt;nPpsLen);  </span><br><span class="line">    i= i+lpMetaData-&gt;nPpsLen;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> SendPacket(RT<span class="built_in">MP_PACKET_TYPE_VIDEO</span>,(<span class="keyword">unsigned</span> <span class="keyword">char</span>*)body,i,<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">bool</span> CRT<span class="built_in">MPStream</span>::SendH264Packet(<span class="keyword">unsigned</span> <span class="keyword">char</span> *data,<span class="keyword">unsigned</span> <span class="keyword">int</span> size,<span class="keyword">bool</span> bIsKeyFrame,<span class="keyword">unsigned</span> <span class="keyword">int</span> nTimeStamp)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(data == <span class="literal">NULL</span> &amp;&amp; size&lt;<span class="number">11</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *body = new <span class="keyword">unsigned</span> <span class="keyword">char</span>[size+<span class="number">9</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span>(bIsKeyFrame)  </span><br><span class="line">    &#123;  </span><br><span class="line">        body[i++] = <span class="number">0x17</span>;<span class="comment">// 1:Iframe  7:AVC  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">    &#123;  </span><br><span class="line">        body[i++] = <span class="number">0x27</span>;<span class="comment">// 2:Pframe  7:AVC  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    body[i++] = <span class="number">0x01</span>;<span class="comment">// AVC NALU  </span></span><br><span class="line">    body[i++] = <span class="number">0x00</span>;  </span><br><span class="line">    body[i++] = <span class="number">0x00</span>;  </span><br><span class="line">    body[i++] = <span class="number">0x00</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// NALU size  </span></span><br><span class="line">    body[i++] = size&gt;&gt;<span class="number">24</span>;  </span><br><span class="line">    body[i++] = size&gt;&gt;<span class="number">16</span>;  </span><br><span class="line">    body[i++] = size&gt;&gt;<span class="number">8</span>;  </span><br><span class="line">    body[i++] = size&amp;<span class="number">0xff</span>;;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// NALU data  </span></span><br><span class="line">    memcpy(&amp;body[i],data,size);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">bool</span> bRet = SendPacket(RT<span class="built_in">MP_PACKET_TYPE_VIDEO</span>,body,i+size,nTimeStamp);  </span><br><span class="line">  </span><br><span class="line">    delete[] body;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> bRet;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">bool</span> CRT<span class="built_in">MPStream</span>::SendH264File(<span class="keyword">const</span> <span class="keyword">char</span> *pFileName)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">if</span>(pFileName == <span class="literal">NULL</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">FALSE</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    FILE *fp = fopen(pFileName, <span class="string">"rb"</span>);    </span><br><span class="line">    <span class="keyword">if</span>(!fp)    </span><br><span class="line">    &#123;    </span><br><span class="line">        printf(<span class="string">"ERROR:open file %s failed!"</span>,pFileName);  </span><br><span class="line">    &#125;    </span><br><span class="line">    fseek(fp, <span class="number">0</span>, SEEK_SET);  </span><br><span class="line">    m_nFileBufSize = fread(m_pFileBuf, <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>), FILEBUFSIZE, fp);  </span><br><span class="line">    <span class="keyword">if</span>(m_nFileBufSize &gt;= FILEBUFSIZE)  </span><br><span class="line">    &#123;  </span><br><span class="line">        printf(<span class="string">"warning : File size is larger than BUFSIZE\n"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    fclose(fp);    </span><br><span class="line">  </span><br><span class="line">    RT<span class="built_in">MPMetadata</span> metaData;  </span><br><span class="line">    memset(&amp;metaData,<span class="number">0</span>,<span class="keyword">sizeof</span>(RT<span class="built_in">MPMetadata</span>));  </span><br><span class="line">  </span><br><span class="line">    NaluUnit naluUnit;  </span><br><span class="line">    <span class="comment">// 读取SPS帧  </span></span><br><span class="line">    ReadOneNaluFromBuf(naluUnit);  </span><br><span class="line">    metaData<span class="variable">.nSpsLen</span> = naluUnit<span class="variable">.size</span>;  </span><br><span class="line">    memcpy(metaData<span class="variable">.Sps</span>,naluUnit<span class="variable">.data</span>,naluUnit<span class="variable">.size</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 读取PPS帧  </span></span><br><span class="line">    ReadOneNaluFromBuf(naluUnit);  </span><br><span class="line">    metaData<span class="variable">.nPpsLen</span> = naluUnit<span class="variable">.size</span>;  </span><br><span class="line">    memcpy(metaData<span class="variable">.Pps</span>,naluUnit<span class="variable">.data</span>,naluUnit<span class="variable">.size</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 解码SPS,获取视频图像宽、高信息  </span></span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>,height = <span class="number">0</span>;  </span><br><span class="line">    h264_decode_sps(metaData<span class="variable">.Sps</span>,metaData<span class="variable">.nSpsLen</span>,width,height);  </span><br><span class="line">    metaData<span class="variable">.nWidth</span> = width;  </span><br><span class="line">    metaData<span class="variable">.nHeight</span> = height;  </span><br><span class="line">    metaData<span class="variable">.nFrameRate</span> = <span class="number">25</span>;  </span><br><span class="line">     </span><br><span class="line">    <span class="comment">// 发送MetaData  </span></span><br><span class="line">    SendMetadata(&amp;metaData);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> tick = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span>(ReadOneNaluFromBuf(naluUnit))  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">bool</span> bKeyframe  = (naluUnit<span class="variable">.type</span> == <span class="number">0x05</span>) ? <span class="literal">TRUE</span> : <span class="literal">FALSE</span>;  </span><br><span class="line">        <span class="comment">// 发送H264数据帧  </span></span><br><span class="line">        SendH264Packet(naluUnit<span class="variable">.data</span>,naluUnit<span class="variable">.size</span>,bKeyframe,tick);  </span><br><span class="line">        msleep(<span class="number">40</span>);  </span><br><span class="line">        tick +=<span class="number">40</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">TRUE</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">bool</span> CRT<span class="built_in">MPStream</span>::ReadOneNaluFromBuf(NaluUnit &amp;nalu)  </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">int</span> i = m_nCurPos;  </span><br><span class="line">    <span class="keyword">while</span>(i&lt;m_nFileBufSize)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span>(m_pFileBuf[i++] == <span class="number">0x00</span> &amp;&amp;  </span><br><span class="line">            m_pFileBuf[i++] == <span class="number">0x00</span> &amp;&amp;  </span><br><span class="line">            m_pFileBuf[i++] == <span class="number">0x00</span> &amp;&amp;  </span><br><span class="line">            m_pFileBuf[i++] == <span class="number">0x01</span>  </span><br><span class="line">            )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> pos = i;  </span><br><span class="line">            <span class="keyword">while</span> (pos&lt;m_nFileBufSize)  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">if</span>(m_pFileBuf[pos++] == <span class="number">0x00</span> &amp;&amp;  </span><br><span class="line">                    m_pFileBuf[pos++] == <span class="number">0x00</span> &amp;&amp;  </span><br><span class="line">                    m_pFileBuf[pos++] == <span class="number">0x00</span> &amp;&amp;  </span><br><span class="line">                    m_pFileBuf[pos++] == <span class="number">0x01</span>  </span><br><span class="line">                    )  </span><br><span class="line">                &#123;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span>(pos == nBufferSize)  </span><br><span class="line">            &#123;  </span><br><span class="line">                nalu<span class="variable">.size</span> = pos-i;    </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">else</span>  </span><br><span class="line">            &#123;  </span><br><span class="line">                nalu<span class="variable">.size</span> = (pos-<span class="number">4</span>)-i;  </span><br><span class="line">            &#125;  </span><br><span class="line">            nalu<span class="variable">.type</span> = m_pFileBuf[i]&amp;<span class="number">0x1f</span>;  </span><br><span class="line">            nalu<span class="variable">.data</span> = &amp;m_pFileBuf[i];  </span><br><span class="line">  </span><br><span class="line">            m_nCurPos = pos-<span class="number">4</span>;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">TRUE</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">FALSE</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>附上SpsDecode.h文件：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;  </span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;math.h&gt;  </span></span><br><span class="line">  </span><br><span class="line"><span class="function">UINT <span class="title">Ue</span><span class="params">(BYTE *pBuff, UINT nLen, UINT &amp;nStartBit)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="comment">//计算0bit的个数  </span></span><br><span class="line">    UINT nZeroNum = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (nStartBit &lt; nLen * <span class="number">8</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">if</span> (pBuff[nStartBit / <span class="number">8</span>] &amp; (<span class="number">0x80</span> &gt;&gt; (nStartBit % <span class="number">8</span>))) <span class="comment">//&amp;:按位与，%取余  </span></span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        nZeroNum++;  </span><br><span class="line">        nStartBit++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    nStartBit ++;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//计算结果  </span></span><br><span class="line">    DWORD dwRet = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (UINT i=<span class="number">0</span>; i&lt;nZeroNum; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        dwRet &lt;&lt;= <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (pBuff[nStartBit / <span class="number">8</span>] &amp; (<span class="number">0x80</span> &gt;&gt; (nStartBit % <span class="number">8</span>)))  </span><br><span class="line">        &#123;  </span><br><span class="line">            dwRet += <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        nStartBit++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; nZeroNum) - <span class="number">1</span> + dwRet;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Se</span><span class="params">(BYTE *pBuff, UINT nLen, UINT &amp;nStartBit)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    <span class="keyword">int</span> UeVal=Ue(pBuff,nLen,nStartBit);  </span><br><span class="line">    <span class="keyword">double</span> k=UeVal;  </span><br><span class="line">    <span class="keyword">int</span> nValue=<span class="built_in">ceil</span>(k/<span class="number">2</span>);<span class="comment">//ceil函数：ceil函数的作用是求不小于给定实数的最小整数。ceil(2)=ceil(1.2)=cei(1.5)=2.00  </span></span><br><span class="line">    <span class="keyword">if</span> (UeVal % <span class="number">2</span>==<span class="number">0</span>)  </span><br><span class="line">        nValue=-nValue;  </span><br><span class="line">    <span class="keyword">return</span> nValue;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function">DWORD <span class="title">u</span><span class="params">(UINT BitCount,BYTE * buf,UINT &amp;nStartBit)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    DWORD dwRet = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (UINT i=<span class="number">0</span>; i&lt;BitCount; i++)  </span><br><span class="line">    &#123;  </span><br><span class="line">        dwRet &lt;&lt;= <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">if</span> (buf[nStartBit / <span class="number">8</span>] &amp; (<span class="number">0x80</span> &gt;&gt; (nStartBit % <span class="number">8</span>)))  </span><br><span class="line">        &#123;  </span><br><span class="line">            dwRet += <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        nStartBit++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dwRet;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">h264_decode_sps</span><span class="params">(BYTE * buf,<span class="keyword">unsigned</span> <span class="keyword">int</span> nLen,<span class="keyword">int</span> &amp;width,<span class="keyword">int</span> &amp;height)</span>  </span><br><span class="line"></span>&#123;  </span><br><span class="line">    UINT StartBit=<span class="number">0</span>;   </span><br><span class="line">    <span class="keyword">int</span> forbidden_zero_bit=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">    <span class="keyword">int</span> nal_ref_idc=u(<span class="number">2</span>,buf,StartBit);  </span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">nal_unit_t</span>ype=u(<span class="number">5</span>,buf,StartBit);  </span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">nal_unit_t</span>ype==<span class="number">7</span>)  </span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="keyword">int</span> profile_idc=u(<span class="number">8</span>,buf,StartBit);  </span><br><span class="line">        <span class="keyword">int</span> constraint_set0_flag=u(<span class="number">1</span>,buf,StartBit);<span class="comment">//(buf[1] &amp; 0x80)&gt;&gt;7;  </span></span><br><span class="line">        <span class="keyword">int</span> constraint_set1_flag=u(<span class="number">1</span>,buf,StartBit);<span class="comment">//(buf[1] &amp; 0x40)&gt;&gt;6;  </span></span><br><span class="line">        <span class="keyword">int</span> constraint_set2_flag=u(<span class="number">1</span>,buf,StartBit);<span class="comment">//(buf[1] &amp; 0x20)&gt;&gt;5;  </span></span><br><span class="line">        <span class="keyword">int</span> constraint_set3_flag=u(<span class="number">1</span>,buf,StartBit);<span class="comment">//(buf[1] &amp; 0x10)&gt;&gt;4;  </span></span><br><span class="line">        <span class="keyword">int</span> reserved_zero_4bits=u(<span class="number">4</span>,buf,StartBit);  </span><br><span class="line">        <span class="keyword">int</span> level_idc=u(<span class="number">8</span>,buf,StartBit);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">int</span> seq_parameter_set_id=Ue(buf,nLen,StartBit);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span>( profile_idc == <span class="number">100</span> || profile_idc == <span class="number">110</span> ||  </span><br><span class="line">            profile_idc == <span class="number">122</span> || profile_idc == <span class="number">144</span> )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> chroma_format_idc=Ue(buf,nLen,StartBit);  </span><br><span class="line">            <span class="keyword">if</span>( chroma_format_idc == <span class="number">3</span> )  </span><br><span class="line">                <span class="keyword">int</span> <span class="keyword">residual_colour_t</span>ransform_flag=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> bit_depth_luma_minus8=Ue(buf,nLen,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> bit_depth_chroma_minus8=Ue(buf,nLen,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">qpprime_y_zero_t</span>ransform_bypass_flag=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> seq_scaling_matrix_present_flag=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">int</span> seq_scaling_list_present_flag[<span class="number">8</span>];  </span><br><span class="line">            <span class="keyword">if</span>( seq_scaling_matrix_present_flag )  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++ ) &#123;  </span><br><span class="line">                    seq_scaling_list_present_flag[i]=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> log2_max_frame_num_minus4=Ue(buf,nLen,StartBit);  </span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">pic_order_cnt_t</span>ype=Ue(buf,nLen,StartBit);  </span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">pic_order_cnt_t</span>ype == <span class="number">0</span> )  </span><br><span class="line">            <span class="keyword">int</span> log2_max_pic_order_cnt_lsb_minus4=Ue(buf,nLen,StartBit);  </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( <span class="keyword">pic_order_cnt_t</span>ype == <span class="number">1</span> )  </span><br><span class="line">        &#123;  </span><br><span class="line">            <span class="keyword">int</span> delta_pic_order_always_zero_flag=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> offset_for_non_ref_pic=Se(buf,nLen,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> <span class="keyword">offset_for_top_t</span>o_bottom_field=Se(buf,nLen,StartBit);  </span><br><span class="line">            <span class="keyword">int</span> num_ref_frames_in_pic_order_cnt_cycle=Ue(buf,nLen,StartBit);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">int</span> *offset_for_ref_frame=<span class="keyword">new</span> <span class="keyword">int</span>[num_ref_frames_in_pic_order_cnt_cycle];  </span><br><span class="line">            <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num_ref_frames_in_pic_order_cnt_cycle; i++ )  </span><br><span class="line">                offset_for_ref_frame[i]=Se(buf,nLen,StartBit);  </span><br><span class="line">            <span class="keyword">delete</span> [] offset_for_ref_frame;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">int</span> num_ref_frames=Ue(buf,nLen,StartBit);  </span><br><span class="line">        <span class="keyword">int</span> gaps_in_frame_num_value_allowed_flag=u(<span class="number">1</span>,buf,StartBit);  </span><br><span class="line">        <span class="keyword">int</span> pic_width_in_mbs_minus1=Ue(buf,nLen,StartBit);  </span><br><span class="line">        <span class="keyword">int</span> pic_height_in_map_units_minus1=Ue(buf,nLen,StartBit);  </span><br><span class="line">  </span><br><span class="line">        width=(pic_width_in_mbs_minus1+<span class="number">1</span>)*<span class="number">16</span>;  </span><br><span class="line">        height=(pic_height_in_map_units_minus1+<span class="number">1</span>)*<span class="number">16</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span>  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 15:47:41</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://blog.csdn.net/firehood_/article/details/8783589">reference</a></p>
<h2 id="H264视频通过RTMP直播">H264视频通过RTMP直播</h2><p>前面的文章中提到了通过RTSP（Real Time Streaming Protocol）的方式来实现视频的直播，但RTSP方式的一个弊端是如果需要支持客户端通过网页来访问，就需要在在页面中嵌入一个ActiveX控件，而ActiveX一般都需要签名才能正常使用，否则用户在使用时还需要更改浏览器设置，并且ActiveX还只支持IE内核的浏览器，Chrome、FireFox需要IE插件才能运行，因此会特别影响用户体验。而RTMP(Real Time Messaging Protocol)很好的解决了这一个问题。由于RTMP是针对FLASH的流媒体协议，视频通过RTMP直播后，只需要在WEB上嵌入一个Web Player（如Jwplayer）即可观看，而且对平台也没什么限制，还可以方便的通过手机观看。</p>
<p>视频通过RTMP方式发布需要一个RTMP Server(常见的有FMS、Wowza Media Server， 开源的有CRtmpServer、Red5等)，原始视频只要按照RTMP协议发送给RTMP Server就可以RTMP视频流的发布了。为了便于视频的打包发布，封装了一个RTMPStream，目前只支持发送H264的视频文件。可以直接发送H264数据帧或H264文件，RTMPStream提供的接口如下。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> CRTMPStream    </span><br><span class="line">&#123;    </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    CRTMPStream(<span class="keyword">void</span>);    </span><br><span class="line">    ~CRTMPStream(<span class="keyword">void</span>);    </span><br><span class="line"><span class="keyword">public</span>:    </span><br><span class="line">    <span class="comment">// 连接到RTMP Server    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">Connect</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* url)</span></span>;    </span><br><span class="line">    <span class="comment">// 断开连接    </span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Close</span><span class="params">()</span></span>;    </span><br><span class="line">    <span class="comment">// 发送MetaData    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SendMetadata</span><span class="params">(LPRTMPMetadata lpMetaData)</span></span>;    </span><br><span class="line">    <span class="comment">// 发送H264数据帧    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SendH264Packet</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *data,<span class="keyword">unsigned</span> <span class="keyword">int</span> size,<span class="keyword">bool</span> bIsKeyFrame,<span class="keyword">unsigned</span> <span class="keyword">int</span> nTimeStamp)</span></span>;    </span><br><span class="line">    <span class="comment">// 发送H264文件    </span></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">SendH264File</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pFileName)</span></span>;    </span><br><span class="line"><span class="comment">//...    </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Media" scheme="http://ytlvy.com/tags/Media/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Live Play With H264 & AAC By librtmp]]></title>
    <link href="http://ytlvy.com/2015/09/01/Live-Play-With-H264-AAC-By-librtmp/"/>
    <id>http://ytlvy.com/2015/09/01/Live-Play-With-H264-AAC-By-librtmp/</id>
    <published>2015-09-01T12:54:48.000Z</published>
    <updated>2015-09-01T12:57:02.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 14:17:54</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.codeman.net/2014/01/439.html" target="_blank" rel="external">reference</a></p>
<h2 id="使用librtmp进行H264与AAC直播">使用librtmp进行H264与AAC直播</h2><h3 id="帧的划分">帧的划分</h3><h4 id="H-264帧">H.264帧</h4><p>对于H.264而言每帧的界定符为<code>00 00 00 01</code>或者<code>00 00 01</code>。</p>
<p>比如下面的h264文件片断这就包函三帧数据<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">67</span> <span class="number">42</span> <span class="literal">C0</span> <span class="number">28</span> DA <span class="number">01</span> E0 <span class="number">08</span> <span class="number">9</span>F <span class="number">96</span> <span class="number">10</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">03</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03</span> <span class="number">01</span> <span class="number">48</span> <span class="literal">F1</span> <span class="number">83</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">68</span> CE <span class="number">3</span>C <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">06</span> <span class="number">05</span> FF FF <span class="number">5</span>D DC <span class="number">45</span> E9 <span class="keyword">BD</span><br><span class="line"></span><span class="label">E6</span> <span class="literal">D9</span> <span class="number">48</span> <span class="keyword">B7 </span><span class="number">96</span> <span class="number">2</span>C <span class="literal">D8</span> <span class="number">20</span> <span class="literal">D9</span> <span class="number">23</span> EE EF …</span><br></pre></td></tr></table></figure></p>
<p>第一帧是<code>00 00 00 01 67 42 C0 28 DA 01 E0 08 9F 96 10 00 00 03 00 10 00 00 03 01 48 F1 83 2A</code><br>第二帧是<code>00 00 00 01 68 CE 3C 80</code><br>第三帧是<code>00 00 01 06 05 FF FF 5D DC 45 E9 BD E6 D9 48 B7 96 2C D8 20 D9 23 EE EF ..</code></p>
<p>帧类型有：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NAL_SLICE = <span class="value"><span class="number">1</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_DPA = <span class="value"><span class="number">2</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_DPB = <span class="value"><span class="number">3</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_DPC = <span class="value"><span class="number">4</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_IDR = <span class="value"><span class="number">5</span></span></span></span><br><span class="line"><span class="setting">NAL_SEI = <span class="value"><span class="number">6</span></span></span></span><br><span class="line"><span class="setting">NAL_SPS = <span class="value"><span class="number">7</span></span></span></span><br><span class="line"><span class="setting">NAL_PPS = <span class="value"><span class="number">8</span></span></span></span><br><span class="line"><span class="setting">NAL_AUD = <span class="value"><span class="number">9</span></span></span></span><br><span class="line"><span class="setting">NAL_FILLER = <span class="value"><span class="number">12</span>,</span></span></span><br></pre></td></tr></table></figure></p>
<p>我们发送RTMP数据时只需要知道四种帧类型，其它类型我都把它规类成非关键帧。<br>分别是<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">NAL_SPS</span><span class="params">(<span class="number">7</span>)</span></span>, sps帧</span><br><span class="line"><span class="function"><span class="title">NAL_PPS</span><span class="params">(<span class="number">8</span>)</span></span>, pps帧</span><br><span class="line"><span class="function"><span class="title">NAL_SLICE_IDR</span><span class="params">(<span class="number">5</span>)</span></span>, 关键帧</span><br><span class="line"><span class="function"><span class="title">NAL_SLICE</span><span class="params">(<span class="number">1</span>)</span></span> 非关键帧</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>帧类型的方式判断为界面符后首字节的低四位。<br>第一帧的帧类型为: <code>0x67 &amp; 0x1F = 7</code>，这是一个SPS帧<br>第二帧的帧类型为: <code>0x68 &amp; 0x1F = 8</code>，这是一个PPS帧<br>第三帧的帧类型为: <code>0x06 &amp; 0x1F = 6</code>，这是一个SEI帧</p>
<p>以上是我们利用帧界定符划分帧，并可以判断每一个帧的类型。</p>
<p>注意：如果是压缩图像成H264帧，我们就可不必进行帧界定，因为每一次压缩的输出都明确了该帧的大小（包括界定符），每一次的压缩的结果可能包函多帧。一会具体讨论。</p>
<h4 id="AAC帧">AAC帧</h4><p>对于AAC帧它的界定符是<code>FF F1</code></p>
<p>这里我就不举例了，可通过查看AAC的二进制文件可以看到如下的帧结构。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FF F<span class="number">1 50 80 24</span> 9F FD DE <span class="number">04 00 00 6</span>C <span class="number">69 62 66 61</span> <span class="number">61 63 20 31</span> 2E <span class="number">32 38 00 00</span> 42 15 95 ..</span><br></pre></td></tr></table></figure></p>
<p>注意：那么对于AAC而言加上界定符每一帧的前7字节是帧的描述信息，也就是说AAC的祼数据是除去前面的7个字节的，在发送RTMP时，我们要去掉这7个字节。同样，如果我们是一边压缩一边发送RTMP，我们同样不需要界定帧，因为libfaac每次压缩完成的输出就是一个完整的帧数据，我们只需要将该帧打包发送即可。</p>
<p>综合上面的所述，如果我们只是一边压缩一边将压缩结果发送到RTMP服务器，那我们就可以不用对帧进行界定，如果我们是发送H264与AAC文件，那我们就要对帧进行界定。</p>
<h3 id="视频与音频的编码信息">视频与音频的编码信息</h3><p>如果我们只是简答的将压缩数据打包发送给RTMP服务器，那么RTMP服务器是不可以对数据进行解码和播放的，在这之前我们要将音视频的视频的编码信息发送给RTMP服务器。很多人可能苦于寻找下面的三个编码参数而不得要领。其实要想得到也是很简单的。</p>
<h4 id="(H264)SPS">(H264)SPS</h4><p>对于H264而言，SPS就是编码后的第一帧。如果是读取H264文件，就是第一个帧界定符与第二帧界定符中间的数据长度是4。</p>
<h4 id="(H264)PPS">(H264)PPS</h4><p>对于H264而言，PPS就是编码后的第二帧。如果是读取H264文件，就是第二个帧界定符与第三帧界定符中间的数据，长度不固定。</p>
<h4 id="(AAC)AudioDecoderSpecificInfo">(AAC)AudioDecoderSpecificInfo</h4><p>这个长度为2个字节，可以通过计算或者调用函数获取。<br>建议通过调用<code>faacEncGetDecoderSpecificInfo(fh,&amp;spec,&amp;len)</code>;获取。<br>一般情况双声道44100采样下，该值是<code>0x1210</code></p>
<h3 id="librtmp的使用">librtmp的使用</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*分配与初始化*/</span></span><br><span class="line">rtmp = RTMP_Alloc<span class="params">()</span>;</span><br><span class="line">RTMP_Init<span class="params">(rtmp)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*设置URL*/</span></span><br><span class="line"><span class="keyword">if</span> <span class="params">(RTMP_SetupURL<span class="params">(rtmp,rtmp_url)</span> == FALSE)</span> &#123;</span><br><span class="line">    <span class="built_in">log</span><span class="params">(LOG_ERR,<span class="string">"RTMP_SetupURL() failed!"</span>)</span>;</span><br><span class="line">    RTMP_Free<span class="params">(rtmp)</span>;</span><br><span class="line">    return -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*设置可写,即发布流,这个函数必须在连接前使用,否则无效*/</span></span><br><span class="line">RTMP_EnableWrite<span class="params">(rtmp)</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*连接服务器*/</span></span><br><span class="line"><span class="keyword">if</span> <span class="params">(RTMP_Connect<span class="params">(rtmp, NULL)</span> == FALSE)</span> &#123;</span><br><span class="line">    <span class="built_in">log</span><span class="params">(LOG_ERR,<span class="string">"RTMP_Connect() failed!"</span>)</span>;</span><br><span class="line">    RTMP_Free<span class="params">(rtmp)</span>;</span><br><span class="line">    return -<span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*连接流*/</span></span><br><span class="line"><span class="keyword">if</span> <span class="params">(RTMP_ConnectStream<span class="params">(rtmp,<span class="number">0</span>)</span> == FALSE)</span> &#123;</span><br><span class="line">    <span class="built_in">log</span><span class="params">(LOG_ERR,<span class="string">"RTMP_ConnectStream() failed!"</span>)</span>;</span><br><span class="line">    RTMP_Close<span class="params">(rtmp)</span>;</span><br><span class="line">    RTMP_Free<span class="params">(rtmp)</span>;</span><br><span class="line">    return -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义包头长度,RTMP_MAX_HEADER_SIZE为rtmp.h中定义值为18*/</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#define RTMP_HEAD_SIZE   (sizeof(RTMPPacket)+RTMP_MAX_HEADER_SIZE)</span></span><br><span class="line"> </span><br><span class="line">RT<span class="built_in">MPPacket</span> * packet;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> * body;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*分配包内存和初始化,len为包体长度*/</span></span><br><span class="line">packet = (RT<span class="built_in">MPPacket</span> *)malloc(RT<span class="built_in">MP_HEAD_SIZE</span>+len);</span><br><span class="line">memset(packet,<span class="number">0</span>,RT<span class="built_in">MP_HEAD_SIZE</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*包体内存*/</span></span><br><span class="line">packet-&gt;m_body = (<span class="keyword">char</span> *)packet + RT<span class="built_in">MP_HEAD_SIZE</span>;</span><br><span class="line">body = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)packet-&gt;m_body;</span><br><span class="line">packet-&gt;m_nBodySize = len;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span><br><span class="line"> * 此处省略包体填充</span><br><span class="line"> */</span></span><br><span class="line">packet-&gt;m_hasAbsTimestamp = <span class="number">0</span>;</span><br><span class="line">packet-&gt;m_packetType = RT<span class="built_in">MP_PACKET_TYPE_VIDEO</span>; <span class="comment">/*此处为类型有两种一种是音频,一种是视频*/</span></span><br><span class="line">packet-&gt;m_nInfoField2 = rtmp-&gt;m_stream_id;</span><br><span class="line">packet-&gt;m_nChannel = <span class="number">0x04</span>;</span><br><span class="line">packet-&gt;m_headerType = RT<span class="built_in">MP_PACKET_SIZE_LARGE</span>;</span><br><span class="line">packet-&gt;m_nTimeStamp = timeoffset;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*发送*/</span></span><br><span class="line"><span class="keyword">if</span> (RT<span class="built_in">MP_IsConnected</span>(rtmp)) &#123;</span><br><span class="line">    ret = RT<span class="built_in">MP_SendPacket</span>(rtmp,packet,<span class="literal">TRUE</span>); <span class="comment">/*TRUE为放进发送队列,FALSE是不放进发送队列,直接发送*/</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*释放内存*/</span></span><br><span class="line">free(packet);</span><br></pre></td></tr></table></figure>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*关闭与释放*/</span></span><br><span class="line">RTMP_Close<span class="comment">(rtmp)</span>;</span><br><span class="line">RTMP_Free<span class="comment">(rtmp)</span>;</span><br></pre></td></tr></table></figure>
<h3 id="包类型">包类型</h3><h4 id="H-264编码信息帧">H.264编码信息帧</h4><p>H.264的编码信息帧是发送给RTMP服务器称为AVC sequence header，RTMP服务器只有收到AVC sequence header中的sps,pps才能解析后续发送的H264帧。</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">int send_video_sps_pps()</span><br><span class="line">&#123;</span><br><span class="line">    RTMPPacket * packet<span class="comment">;</span></span><br><span class="line">    unsigned char * body<span class="comment">;</span></span><br><span class="line">    int i<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    packet = (RTMPPacket *)malloc(RTMP_HEAD_SIZE+1024)<span class="comment">;</span></span><br><span class="line">    memset(packet,0,RTMP_HEAD_SIZE)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    packet-&gt;m_body = (char *)packet + RTMP_HEAD_SIZE<span class="comment">;</span></span><br><span class="line">    body = (unsigned char *)packet-&gt;m_body<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    memcpy(winsys-&gt;pps,buf,len)<span class="comment">;</span></span><br><span class="line">    winsys-&gt;pps_len = len<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    i = 0<span class="comment">;</span></span><br><span class="line">    body[i++] = 0x17<span class="comment">;</span></span><br><span class="line">    body[i++] = 0x00<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    body[i++] = 0x00<span class="comment">;</span></span><br><span class="line">    body[i++] = 0x00<span class="comment">;</span></span><br><span class="line">    body[i++] = 0x00<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*AVCDecoderConfigurationRecord*/</span><br><span class="line">    body[i++] = 0x01<span class="comment">;</span></span><br><span class="line">    body[i++] = sps[1]<span class="comment">;</span></span><br><span class="line">    body[i++] = sps[2]<span class="comment">;</span></span><br><span class="line">    body[i++] = sps[3]<span class="comment">;</span></span><br><span class="line">    body[i++] = 0xff<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*sps*/</span><br><span class="line">    body[i++]   = 0xe1<span class="comment">;</span></span><br><span class="line">    body[i++] = (sps_len &gt;&gt; 8) &amp; 0xff<span class="comment">;</span></span><br><span class="line">    body[i++] = sps_len &amp; 0xff<span class="comment">;</span></span><br><span class="line">    memcpy(&amp;body[i],sps,sps_len)<span class="comment">;</span></span><br><span class="line">    i +=  sps_len<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*pps*/</span><br><span class="line">    body[i++]   = 0x01<span class="comment">;</span></span><br><span class="line">    body[i++] = (pps_len &gt;&gt; 8) &amp; 0xff<span class="comment">;</span></span><br><span class="line">    body[i++] = (pps_len) &amp; 0xff<span class="comment">;</span></span><br><span class="line">    memcpy(&amp;body[i],pps,pps_len)<span class="comment">;</span></span><br><span class="line">    i +=  pps_len<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    packet-&gt;m_packetType = RTMP_PACKET_TYPE_VIDEO<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nBodySize = i<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nChannel = 0x04<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nTimeStamp = 0<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_hasAbsTimestamp = 0<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_headerType = RTMP_PACKET_SIZE_MEDIUM<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nInfoField2 = rtmp-&gt;m_stream_id<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*调用发送接口*/</span><br><span class="line">    RTMP_SendPacket(rtmp,packet,TRUE)<span class="comment">;</span></span><br><span class="line">    free(packet)<span class="comment">;    </span></span><br><span class="line"> </span><br><span class="line">    return 0<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sps与pps怎么获取到呢？</p>
<p>在前面已经说过，H264的第1帧是sps帧,pps是第2帧。</p>
<p>我们在编码时会调用如下接口<br><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">size = x264_encoder_encode<span class="params">(cx-&gt;hd,&amp;nal,&amp;n,pic,&amp;pout)</span>;</span><br><span class="line"> </span><br><span class="line">int i,last;</span><br><span class="line"><span class="keyword">for</span> <span class="params">(i = <span class="number">0</span>,last = <span class="number">0</span>;i &lt; n;i++)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> <span class="params">(nal[i].i_type == NAL_SPS)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        sps_len = nal[i].i_payload-<span class="number">4</span>;</span><br><span class="line">        memcpy<span class="params">(sps,nal[i].p_payload+<span class="number">4</span>,sps_len)</span>;</span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> <span class="params">(nal[i].i_type == NAL_PPS)</span> &#123;</span><br><span class="line"> </span><br><span class="line">        pps_len = nal[i].i_payload-<span class="number">4</span>;</span><br><span class="line">        memcpy<span class="params">(pps,nal[i].p_payload+<span class="number">4</span>,pps_len)</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*发送sps pps*/</span></span><br><span class="line">        send_video_sps_pps<span class="params">()</span>;    </span><br><span class="line"> </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/*发送普通帧*/</span></span><br><span class="line">        send_rtmp_video<span class="params">(nal[i].p_payload,nal[i].i_payload)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    last += nal[i].i_payload;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我完全可以不用知道sps,pps的具体意义:)</p>
<h4 id="H-264关键帧_&amp;_H-264非关键帧">H.264关键帧  &amp; H.264非关键帧</h4><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">int send_rtmp_video(unsigned char * buf,int len)</span><br><span class="line">&#123;</span><br><span class="line">    int type<span class="comment">;</span></span><br><span class="line">    long timeoffset<span class="comment">;</span></span><br><span class="line">    RTMPPacket * packet<span class="comment">;</span></span><br><span class="line">    unsigned char * body<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    timeoffset = GetTickCount() - start_time<span class="comment">;  /*start_time为开始直播时的时间戳*/</span></span><br><span class="line"> </span><br><span class="line">    /*去掉帧界定符*/</span><br><span class="line">    if (buf[2] == 0x00) &#123; /*<span class="number">00 00 00 01</span>*/</span><br><span class="line">            buf += 4<span class="comment">;</span></span><br><span class="line">            len -= 4<span class="comment">;</span></span><br><span class="line">    &#125; else if (buf[2] == 0x01)&#123; /*00 00 01*/</span><br><span class="line">            buf += 3<span class="comment">;</span></span><br><span class="line">            len -= 3<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    type = buf[0]&amp;0x1f<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    packet = (RTMPPacket *)base_malloc(RTMP_HEAD_SIZE+len+9)<span class="comment">;</span></span><br><span class="line">    memset(packet,0,RTMP_HEAD_SIZE)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    packet-&gt;m_body = (char *)packet + RTMP_HEAD_SIZE<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nBodySize = len + 9<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*send video packet*/</span><br><span class="line">    body = (unsigned char *)packet-&gt;m_body<span class="comment">;</span></span><br><span class="line">    memset(body,0,len+9)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*key frame*/</span><br><span class="line">    body[0] = 0x27<span class="comment">;</span></span><br><span class="line">    if (type == NAL_SLICE_IDR) &#123;</span><br><span class="line">            body[0] = 0x17<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    body[1] = 0x01<span class="comment">;   /*nal unit*/</span></span><br><span class="line">    body[2] = 0x00<span class="comment">;</span></span><br><span class="line">    body[3] = 0x00<span class="comment">;</span></span><br><span class="line">    body[4] = 0x00<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    body[5] = (len &gt;&gt; 24) &amp; 0xff<span class="comment">;</span></span><br><span class="line">    body[6] = (len &gt;&gt; 16) &amp; 0xff<span class="comment">;</span></span><br><span class="line">    body[7] = (len &gt;&gt;  8) &amp; 0xff<span class="comment">;</span></span><br><span class="line">    body[8] = (len ) &amp; 0xff<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*copy data*/</span><br><span class="line">    memcpy(&amp;body[9],buf,len)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    packet-&gt;m_hasAbsTimestamp = 0<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_packetType = RTMP_PACKET_TYPE_VIDEO<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nInfoField2 = winsys-&gt;rtmp-&gt;m_stream_id<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nChannel = 0x04<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_headerType = RTMP_PACKET_SIZE_LARGE<span class="comment">;</span></span><br><span class="line">    packet-&gt;m_nTimeStamp = timeoffset<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    /*调用发送接口*/</span><br><span class="line">    RTMP_SendPacket(rtmp,packet,TRUE)<span class="comment">;</span></span><br><span class="line">    free(packet)<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里要说明一下：</p>
<p>在libx264中每一次调用<code>x264_encoder_encode</code>输出了n个帧，我们要从这n个帧里找出sps和pps，剩下的分次全部发送nal，sps与pps的帧界定符都是<code>00 00 00 01</code>，而普通帧可能是<code>00 00 00 01</code>也有可能<code>00 00 01</code>。<br>比如说x264_encoder_encode输出了6帧。<br>分别是 sps帧,pps帧，关键帧，非关键帧，非关键帧，非关键帧。<br>发送结果应该是,sps,pps合成为一帧调用发送函数，剩下4帧，除去每个nal的界定符，分别发送每一个nal。</p>
<p>如果x264_encoder_encode里没有sps帧与pps帧，则结果除去第一帧的界定符所以帧做为一个整体调用发送函数，它们的类型是由第一帧类型决定。</p>
<p>另外，H264的流的第1帧一定是sps帧(包含帧界定符为8个字节),第2帧一定是pps帧。</p>
<h4 id="AAC编码信息">AAC编码信息</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cap_rtmp_sendaac_spec(<span class="keyword">unsigned</span> <span class="keyword">char</span> *spec_buf,<span class="keyword">int</span> spec_len)</span><br><span class="line">&#123;</span><br><span class="line">    RT<span class="built_in">MPPacket</span> * packet;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> * body;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line"> </span><br><span class="line">    len = spec_len;  <span class="comment">/*spec data长度,一般是2*/</span></span><br><span class="line"> </span><br><span class="line">    packet = (RT<span class="built_in">MPPacket</span> *)base_malloc(RT<span class="built_in">MP_HEAD_SIZE</span>+len+<span class="number">2</span>);</span><br><span class="line">    memset(packet,<span class="number">0</span>,RT<span class="built_in">MP_HEAD_SIZE</span>);</span><br><span class="line"> </span><br><span class="line">    packet-&gt;m_body = (<span class="keyword">char</span> *)packet + RT<span class="built_in">MP_HEAD_SIZE</span>;</span><br><span class="line">    body = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)packet-&gt;m_body;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*AF 00 + AAC RAW data*/</span></span><br><span class="line">    body[<span class="number">0</span>] = <span class="number">0xAF</span>;</span><br><span class="line">    body[<span class="number">1</span>] = <span class="number">0x00</span>;</span><br><span class="line">    memcpy(&amp;body[<span class="number">2</span>],spec_buf,len); <span class="comment">/*spec_buf是AAC sequence header数据*/</span></span><br><span class="line"> </span><br><span class="line">    packet-&gt;m_packetType = RT<span class="built_in">MP_PACKET_TYPE_AUDIO</span>;</span><br><span class="line">    packet-&gt;m_nBodySize = len+<span class="number">2</span>;</span><br><span class="line">    packet-&gt;m_nChannel = <span class="number">0x04</span>;</span><br><span class="line">    packet-&gt;m_nTimeStamp = <span class="number">0</span>;</span><br><span class="line">    packet-&gt;m_hasAbsTimestamp = <span class="number">0</span>;</span><br><span class="line">    packet-&gt;m_headerType = RT<span class="built_in">MP_PACKET_SIZE_LARGE</span>;</span><br><span class="line">    packet-&gt;m_nInfoField2 = rtmp-&gt;m_stream_id;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*调用发送接口*/</span></span><br><span class="line">    RT<span class="built_in">MP_SendPacket</span>(rtmp,packet,<span class="literal">TRUE</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">TRUE</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于音频解码参数AAC sequence header是通过</p>
<p>下面是获得AAC sequence header的方法</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">char *buf<span class="comment">;</span></span><br><span class="line">int len<span class="comment">;</span></span><br><span class="line">faacEncGetDecoderSpecificInfo(fh,&amp;buf,&amp;len)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">memcpy(spec_buf,buf,len)<span class="comment">;</span></span><br><span class="line">spec_len = len<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">/*释放系统内存*/</span><br><span class="line">free(buf)<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>另外如果你是打开aac文件进行发送，那么你可以尝试自己计算这个值，其实也很简单，打开faac源代码看一下faacEncGetDecoderSpecificInfo的实现，也就是几个移位的事:)。<br>对于一般情况44100Hz双声道，这个值是0x1210，偷懒就是直接用这个值吧。</p>
<h4 id="AAC普通数据">AAC普通数据</h4><p>如前面所述，发送AAC的普通数据要改造一下，因为AAC的前7个字节（包括帧界定符）对于RTMP服务器来说是无用的。<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">void * cap_dialog_send_audio(unsigned char * buf,int len)</span><br><span class="line">&#123;</span><br><span class="line">    long timeoffset<span class="comment">;</span></span><br><span class="line">    timeoffset = GetTickCount() - start_time<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    buf += 7<span class="comment">;</span></span><br><span class="line">    len += 7<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">    if (len &gt; 0) &#123;</span><br><span class="line">        RTMPPacket * packet<span class="comment">;</span></span><br><span class="line">        unsigned char * body<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">        packet = (RTMPPacket *)malloc(RTMP_HEAD_SIZE+len+2)<span class="comment">;</span></span><br><span class="line">        memset(packet,0,RTMP_HEAD_SIZE)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">        packet-&gt;m_body = (char *)packet + RTMP_HEAD_SIZE<span class="comment">;</span></span><br><span class="line">        body = (unsigned char *)packet-&gt;m_body<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">        /*AF 01 + AAC RAW data*/</span><br><span class="line">        body[0] = 0xAF<span class="comment">;</span></span><br><span class="line">        body[1] = 0x01<span class="comment">;</span></span><br><span class="line">        memcpy(&amp;body[2],buf,len)<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">        packet-&gt;m_packetType = RTMP_PACKET_TYPE_AUDIO<span class="comment">;</span></span><br><span class="line">        packet-&gt;m_nBodySize = len+2<span class="comment">;</span></span><br><span class="line">        packet-&gt;m_nChannel = 0x04<span class="comment">;</span></span><br><span class="line">        packet-&gt;m_nTimeStamp = timeoffset<span class="comment">;</span></span><br><span class="line">        packet-&gt;m_hasAbsTimestamp = 0<span class="comment">;</span></span><br><span class="line">        packet-&gt;m_headerType = RTMP_PACKET_SIZE_MEDIUM<span class="comment">;</span></span><br><span class="line">        packet-&gt;m_nInfoField2 = rtmp-&gt;m_stream_id<span class="comment">;</span></span><br><span class="line"> </span><br><span class="line">        /*调用发送接口*/</span><br><span class="line">        RTMP_SendPacket(rtmp,packet,TRUE)<span class="comment">;</span></span><br><span class="line">        free(packet)<span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">    return 0<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>至此所有流程均结束了。<br>要注意的几件事：<br>libRTMP多线程发送有时候可能会出现问题，不知道是什么问题，最好改成队列发送。<br>将填充好的packet通过消息或者其它方式发送给其它线程，发送线程统一发送即可。</p>
<h3 id="参考文档">参考文档</h3><p>《Video File Format Specification Version 10》 <a href="http://www.adobe.com/content/dam/Adobe/en/devnet/flv/pdfs/video_file_format_spec_v10.pdf" target="_blank" rel="external">http://www.adobe.com/content/dam/Adobe/en/devnet/flv/pdfs/video_file_format_spec_v10.pdf</a><br>《H264视频通过RTMP直播》 <a href="http://blog.csdn.net/firehood_/article/details/8783589" target="_blank" rel="external">http://blog.csdn.net/firehood_/article/details/8783589</a><br>rtmpdump-2.3</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-28 14:17:54</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.codeman.net/2014/01/439.html">reference</a></p>
<h2 id="使用librtmp进行H264与AAC直播">使用librtmp进行H264与AAC直播</h2><h3 id="帧的划分">帧的划分</h3><h4 id="H-264帧">H.264帧</h4><p>对于H.264而言每帧的界定符为<code>00 00 00 01</code>或者<code>00 00 01</code>。</p>
<p>比如下面的h264文件片断这就包函三帧数据<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">67</span> <span class="number">42</span> <span class="literal">C0</span> <span class="number">28</span> DA <span class="number">01</span> E0 <span class="number">08</span> <span class="number">9</span>F <span class="number">96</span> <span class="number">10</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">03</span> <span class="number">00</span> <span class="number">10</span> <span class="number">00</span> <span class="number">00</span> <span class="number">03</span> <span class="number">01</span> <span class="number">48</span> <span class="literal">F1</span> <span class="number">83</span> <span class="number">2</span>A <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span></span><br><span class="line"><span class="number">68</span> CE <span class="number">3</span>C <span class="number">80</span> <span class="number">00</span> <span class="number">00</span> <span class="number">01</span> <span class="number">06</span> <span class="number">05</span> FF FF <span class="number">5</span>D DC <span class="number">45</span> E9 <span class="keyword">BD</span><br><span class="line"></span><span class="label">E6</span> <span class="literal">D9</span> <span class="number">48</span> <span class="keyword">B7 </span><span class="number">96</span> <span class="number">2</span>C <span class="literal">D8</span> <span class="number">20</span> <span class="literal">D9</span> <span class="number">23</span> EE EF …</span><br></pre></td></tr></table></figure></p>
<p>第一帧是<code>00 00 00 01 67 42 C0 28 DA 01 E0 08 9F 96 10 00 00 03 00 10 00 00 03 01 48 F1 83 2A</code><br>第二帧是<code>00 00 00 01 68 CE 3C 80</code><br>第三帧是<code>00 00 01 06 05 FF FF 5D DC 45 E9 BD E6 D9 48 B7 96 2C D8 20 D9 23 EE EF ..</code></p>
<p>帧类型有：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">NAL_SLICE = <span class="value"><span class="number">1</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_DPA = <span class="value"><span class="number">2</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_DPB = <span class="value"><span class="number">3</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_DPC = <span class="value"><span class="number">4</span></span></span></span><br><span class="line"><span class="setting">NAL_SLICE_IDR = <span class="value"><span class="number">5</span></span></span></span><br><span class="line"><span class="setting">NAL_SEI = <span class="value"><span class="number">6</span></span></span></span><br><span class="line"><span class="setting">NAL_SPS = <span class="value"><span class="number">7</span></span></span></span><br><span class="line"><span class="setting">NAL_PPS = <span class="value"><span class="number">8</span></span></span></span><br><span class="line"><span class="setting">NAL_AUD = <span class="value"><span class="number">9</span></span></span></span><br><span class="line"><span class="setting">NAL_FILLER = <span class="value"><span class="number">12</span>,</span></span></span><br></pre></td></tr></table></figure></p>
<p>我们发送RTMP数据时只需要知道四种帧类型，其它类型我都把它规类成非关键帧。<br>分别是<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">NAL_SPS</span><span class="params">(<span class="number">7</span>)</span></span>, sps帧</span><br><span class="line"><span class="function"><span class="title">NAL_PPS</span><span class="params">(<span class="number">8</span>)</span></span>, pps帧</span><br><span class="line"><span class="function"><span class="title">NAL_SLICE_IDR</span><span class="params">(<span class="number">5</span>)</span></span>, 关键帧</span><br><span class="line"><span class="function"><span class="title">NAL_SLICE</span><span class="params">(<span class="number">1</span>)</span></span> 非关键帧</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="Media" scheme="http://ytlvy.com/tags/Media/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Version Number Auto Increase]]></title>
    <link href="http://ytlvy.com/2015/08/22/iOS-Version-Number-Auto-Increase/"/>
    <id>http://ytlvy.com/2015/08/22/iOS-Version-Number-Auto-Increase/</id>
    <published>2015-08-22T13:13:08.000Z</published>
    <updated>2015-08-22T13:13:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Build号_自动增长">Build号 自动增长</h2><p>在 iOS 应用的 <code>Info.plist</code> 中有两个版本号，即 Version 和 Build，对应键值为 <code>CFBundleShortVersionString</code> 和 <code>CFBundleVersion</code>。 一个是应用程序本身发布时的版本号，一个是表示这个发布版的二进制代码是第几次编译得到的。在 iOS8 之前由于苹果并没有约束这两者的关系，本人一般就把两个填一样的，如 2.1.4 等，也一直没出过问题，但是 最近由于苹果加入了测试功能，所有上传的 Build 都会保存，然后第一个因为某原因审核不过，再上传第 二个就出现了 Build 号冲突的问题。于是想到这才是 Build 的正确使用方法，它本应该是个整数， 在 Version 保持不变，Build 应该是要随着编译次数增长的！</p>
<h3 id="自动增长">自动增长</h3><p>那么如何让 Build 号自动增加呢？很早前搜到过一段代码，现在可以用上了：</p>
<ol>
<li>在 XCode 中选中项目，打开 Build Phases，如下图：</li>
</ol>
<p><img src="http://rickytan.cn/images/run-script.png" alt=""></p>
<ol>
<li>点 “+” 增加一个过程，选择“Run Script”，移到“Link Binary With Libraries”之后，并贴入以下代码：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># xcode-build-bump.sh</span><br><span class="line"># @desc Auto-increment the build number every time the project is run. </span><br><span class="line"># @usage</span><br><span class="line"># 1. <span class="operator"><span class="keyword">Select</span>: your Target <span class="keyword">in</span> Xcode</span><br><span class="line"># <span class="number">2.</span> <span class="keyword">Select</span>: Build Phases Tab</span><br><span class="line"># <span class="number">3.</span> <span class="keyword">Select</span>: <span class="keyword">Add</span> Build Phase -&gt; <span class="keyword">Add</span> Run Script</span><br><span class="line"># <span class="number">4.</span> Paste code below <span class="keyword">in</span> <span class="keyword">to</span> new <span class="string">"Run Script"</span> <span class="keyword">section</span></span><br><span class="line"># <span class="number">5.</span> Drag the <span class="string">"Run Script"</span> below <span class="string">"Link Binaries With Libraries"</span></span><br><span class="line"># <span class="number">6.</span> Insure that your <span class="keyword">starting</span> build <span class="built_in">number</span> <span class="keyword">is</span> <span class="keyword">set</span> <span class="keyword">to</span> a whole <span class="built_in">integer</span> <span class="keyword">and</span> <span class="keyword">not</span> a <span class="built_in">float</span> (e.g. <span class="number">1</span>, <span class="keyword">not</span> <span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">buildNumber=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="string">"$&#123;PROJECT_DIR&#125;/$&#123;INFOPLIST_FILE&#125;"</span>)</span><br><span class="line">buildNumber=$(($buildNumber + <span class="number">1</span>))</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleVersion $buildNumber"</span> <span class="string">"$&#123;PROJECT_DIR&#125;/$&#123;INFOPLIST_FILE&#125;"</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>For Version </li>
</ol>
<figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xcode-version-bump.sh</span></span><br><span class="line"><span class="comment"># @desc Auto-increment the version number (only) when a project is archived for export. </span></span><br><span class="line"><span class="comment"># @usage</span></span><br><span class="line"><span class="comment"># 1. Select: your Target in Xcode</span></span><br><span class="line"><span class="comment"># 2. Select: Build Phases Tab</span></span><br><span class="line"><span class="comment"># 3. Select: Add Build Phase -&gt; Add Run Script</span></span><br><span class="line"><span class="comment"># 4. Paste code below in to new "Run Script" section</span></span><br><span class="line"><span class="comment"># 5. Check the checkbox "Run script only when installing"</span></span><br><span class="line"><span class="comment"># 6. Drag the "Run Script" below "Link Binaries With Libraries"</span></span><br><span class="line"><span class="comment"># 7. Insure your starting version number is in SemVer format (e.g. 1.0.0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># This splits a two-decimal version string, such as "0.45.123", allowing us to increment the third position.</span></span><br><span class="line">VERSIONNUM=$(/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleShortVersionString"</span> <span class="string">"<span class="constant">$&#123;PROJECT_DIR&#125;</span>/<span class="constant">$&#123;INFOPLIST_FILE&#125;</span>"</span>)</span><br><span class="line">NEWSUBVERSION=`echo <span class="variable">$VERSIONNUM</span> | awk -F <span class="string">"."</span> '&#123;<span class="literal">print</span> <span class="variable">$3</span>&#125;'`</span><br><span class="line">NEWSUBVERSION=$((<span class="variable">$NEWSUBVERSION</span> + <span class="number">1</span>))</span><br><span class="line">NEWVERSIONSTRING=`echo <span class="variable">$VERSIONNUM</span> | awk -F <span class="string">"."</span> '&#123;<span class="literal">print</span> <span class="variable">$1</span> <span class="string">"."</span> <span class="variable">$2</span> <span class="string">".'<span class="variable">$NEWSUBVERSION</span>'"</span> &#125;'`</span><br><span class="line">/usr/libexec/PlistBuddy -c <span class="string">"Set :CFBundleShortVersionString <span class="variable">$NEWVERSIONSTRING</span>"</span> <span class="string">"<span class="constant">$&#123;PROJECT_DIR&#125;</span>/<span class="constant">$&#123;INFOPLIST_FILE&#125;</span>"</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Build号_自动增长">Build号 自动增长</h2><p>在 iOS 应用的 <code>Info.plist</code> 中有两个版本号，即 Version 和 Build，对应键值为 <code>CFBundleShortVersionString</]]>
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[SDWebimage pitfall]]></title>
    <link href="http://ytlvy.com/2015/08/22/SDWebimage-pitfall/"/>
    <id>http://ytlvy.com/2015/08/22/SDWebimage-pitfall/</id>
    <published>2015-08-22T13:11:19.000Z</published>
    <updated>2015-08-22T13:11:50.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-22 20:50:22</li>
<li>@version 0.0.1</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<h2 id="SDWebImage_缓存相关用法">SDWebImage 缓存相关用法</h2><h3 id="计算缓存大小的方法：">计算缓存大小的方法：</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSUInteger</span>)getSize &#123;  </span><br><span class="line">    __block <span class="built_in">NSUInteger</span> size = <span class="number">0</span>;  </span><br><span class="line">    <span class="built_in">dispatch_sync</span>(<span class="keyword">self</span><span class="variable">.ioQueue</span>, ^&#123;  </span><br><span class="line">        <span class="built_in">NSDirectoryEnumerator</span> *fileEnumerator = [_fileManager enumeratorAtPath:<span class="keyword">self</span><span class="variable">.diskCachePath</span>];  </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> *fileName <span class="keyword">in</span> fileEnumerator) &#123;  </span><br><span class="line">            <span class="built_in">NSString</span> *filePath = [<span class="keyword">self</span><span class="variable">.diskCachePath</span> stringByAppendingPathComponent:fileName];  </span><br><span class="line">            <span class="built_in">NSDictionary</span> *attrs = [[<span class="built_in">NSFileManager</span> defaultManager] attributesOfItemAtPath:filePath error:<span class="literal">nil</span>];  </span><br><span class="line">            size += [attrs fileSize];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    <span class="keyword">return</span> size;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="清除缓存">清除缓存</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SDImageCache *imageCache = [SDImageCache sharedImageCache]<span class="comment">;</span></span><br><span class="line">[imageCache clearMemory]<span class="comment">;</span></span><br><span class="line">[imageCache clearDisk]<span class="comment">;</span></span><br></pre></td></tr></table></figure>
<h3 id="关闭解压">关闭解压</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[[SDImageCache sharedImageCache]</span> <span class="rule"><span class="attribute">setShouldDecompressImages</span>:<span class="value">NO]</span></span>;</span><br><span class="line"><span class="attr_selector">[[SDWebImageDownloader sharedDownloader]</span> <span class="rule"><span class="attribute">setShouldDecompressImages</span>:<span class="value">NO]</span></span>;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors yanjie Guo (ytlvy2008@gmail.com)</li>
<li>@date    2015-08-22 20:50:22</li>
<li>]]>
    </summary>
    
      <category term="SDWebImage" scheme="http://ytlvy.com/tags/SDWebImage/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Audio Lockscreen ]]></title>
    <link href="http://ytlvy.com/2015/08/22/iOS-Audio-Lockscreen/"/>
    <id>http://ytlvy.com/2015/08/22/iOS-Audio-Lockscreen/</id>
    <published>2015-08-22T13:09:26.000Z</published>
    <updated>2015-08-22T13:09:58.000Z</updated>
    <content type="html"><![CDATA[<h2 id="iOS音乐后台播放及锁屏相关">iOS音乐后台播放及锁屏相关</h2><h3 id="音乐后台播放">音乐后台播放</h3><ol>
<li>首先修改info.plist </li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Required <span class="attribute">background</span> modes  -- [</span><br><span class="line">  item0   ==&gt; App plays <span class="tag">audio</span> or streams audio/<span class="tag">video</span> using AirPlay</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20150806174938474" alt=""></p>
<ol>
<li>其次引入两个需要的框架</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>设置播放器及后台播放</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"><span class="comment">//    设置后台播放</span></span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    设置播放器</span></span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"那些花儿"</span> ofType:<span class="string">@"mp3"</span>] ];</span><br><span class="line">    _player = [[<span class="built_in">AVPlayer</span> alloc] initWithURL:url];</span><br><span class="line">    [_player play];</span><br><span class="line">    _isPlayingNow = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台播放显示信息设置</span></span><br><span class="line">    [<span class="keyword">self</span> setPlayingInfo];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<ol>
<li>设置后台播放时显示的东西，例如歌曲名字，图片等</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setPlayingInfo &#123;</span><br><span class="line"><span class="comment">//    &lt;MediaPlayer/MediaPlayer.h&gt;</span></span><br><span class="line">    <span class="built_in">MPMediaItemArtwork</span> *artWork = [[<span class="built_in">MPMediaItemArtwork</span> alloc] initWithImage:[<span class="built_in">UIImage</span> imageNamed:<span class="string">@"pushu.jpg"</span>]];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">NSDictionary</span> *dic = @&#123;<span class="built_in">MPMediaItemPropertyTitle</span>:<span class="string">@"那些花儿"</span>,</span><br><span class="line">                          <span class="built_in">MPMediaItemPropertyArtist</span>:<span class="string">@"朴树"</span>,</span><br><span class="line">                          <span class="built_in">MPMediaItemPropertyArtwork</span>:artWork</span><br><span class="line">                          &#125;;</span><br><span class="line">    [[<span class="built_in">MPNowPlayingInfoCenter</span> defaultCenter] setNowPlayingInfo:dic];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>远程控制设置</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidAppear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line"><span class="comment">//    接受远程控制</span></span><br><span class="line">    [<span class="keyword">self</span> becomeFirstResponder];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)viewDidDisappear:(<span class="built_in">BOOL</span>)animated &#123;</span><br><span class="line"><span class="comment">//    取消远程控制</span></span><br><span class="line">    [<span class="keyword">self</span> resignFirstResponder];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] endReceivingRemoteControlEvents];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#pragma mark - 接收方法的设置</span></span><br><span class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event &#123;</span><br><span class="line">    <span class="keyword">if</span> (event<span class="variable">.type</span> == <span class="built_in">UIEventTypeRemoteControl</span>) &#123;  <span class="comment">//判断是否为远程控制</span></span><br><span class="line">        <span class="keyword">switch</span> (event<span class="variable">.subtype</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span>  <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</span><br><span class="line">                <span class="keyword">if</span> (!_isPlayingNow) &#123;</span><br><span class="line">                    [_player play];</span><br><span class="line">                &#125;</span><br><span class="line">                _isPlayingNow = !_isPlayingNow;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</span><br><span class="line">                <span class="keyword">if</span> (_isPlayingNow) &#123;</span><br><span class="line">                    [_player pause];</span><br><span class="line">                &#125;</span><br><span class="line">                _isPlayingNow = !_isPlayingNow;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlNextTrack</span>:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"下一首"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPreviousTrack</span>:</span><br><span class="line">                <span class="built_in">NSLog</span>(<span class="string">@"上一首 "</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="iOS_锁屏操作">iOS 锁屏操作</h3><p>如果你的App不需要” 喜欢/书签”等功能的话，直接使用RemoteControl就行。<br>对于RemoteCommand，一个SEL只能对应一个command。<br>另外就是RemoteCommand的callback会先于RemoteControl，不过也就几ms的间隔。而且使用RemoteControl更方便。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  mprc</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by BlueCocoa on 15/4/6.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015年 0xBBC. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">@interfaceViewController ()&lt;<span class="built_in">AVAudioPlayerDelegate</span>&gt;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> * player;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">MPRemoteCommand</span> * mprcNext, * mprcPlay, * mprcPause, * mprcPrevious;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">MPFeedbackCommand</span> * mpfbLike, * mpfbDislike, * mpfbBookMark;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> bookmark;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> player;</span><br><span class="line"><span class="keyword">@synthesize</span> mprcNext,mprcPlay,mprcPause,mprcPrevious;</span><br><span class="line"><span class="keyword">@synthesize</span> mpfbLike,mpfbDislike,mpfbBookMark;</span><br><span class="line"><span class="keyword">@synthesize</span> bookmark;</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.player</span> = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:[<span class="built_in">NSURLfileURLWithPath</span>:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"1"</span> ofType:<span class="string">@"m4a"</span>]] error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</span><br><span class="line">    [session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [session setActive:<span class="literal">YES</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> prepareToPlay];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> play];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setNumberOfLoops:-<span class="number">1</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setVolume:<span class="number">1</span>];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcNext</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.nextTrackCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextTrackCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPlay</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.playCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(playCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPause</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.pauseCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pauseCommand:)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPrevious</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.previousTrackCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(previousTrackCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbLike</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.likeCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(likeCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setLocalizedTitle:<span class="string">@"喜欢这首歌"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setLocalizedShortTitle:<span class="string">@"喜欢"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbDislike</span> =[<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.dislikeCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(dislikeCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setLocalizedTitle:<span class="string">@"不喜欢这首歌"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setLocalizedShortTitle:<span class="string">@"不喜欢"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbBookMark</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.bookmarkCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(bookmarkCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMarksetLocalizedTitle</span>:<span class="string">@"书签"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMarksetLocalizedShortTitle</span>:<span class="string">@"书签"</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bookmark</span> = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)bookmarkCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bookmark</span> = !<span class="keyword">self</span><span class="variable">.bookmark</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Bookmark"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dislikeCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setEnabled:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Dislike"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)likeCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislikesetEnabled</span>:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Like"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)previousTrackCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Previous Track"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)playCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Play in MPRemoteCommandEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pauseCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Pause in MPRemoteCommandEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nextTrackCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Next Track"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event<span class="variable">.subtype</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Play in RemoteControlEvent"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Pause in RemoteControlEvent"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="iOS音乐后台播放及锁屏相关">iOS音乐后台播放及锁屏相关</h2><h3 id="音乐后台播放">音乐后台播放</h3><ol>
<li>首先修改info.plist </li>
</ol>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Required <span class="attribute">background</span> modes  -- [</span><br><span class="line">  item0   ==&gt; App plays <span class="tag">audio</span> or streams audio/<span class="tag">video</span> using AirPlay</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><img src="http://img.blog.csdn.net/20150806174938474" alt=""></p>
<ol>
<li>其次引入两个需要的框架</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br></pre></td></tr></table></figure>
<ol>
<li>设置播放器及后台播放</li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line"><span class="comment">//    设置后台播放</span></span><br><span class="line">    [[<span class="built_in">AVAudioSession</span> sharedInstance] setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//    设置播放器</span></span><br><span class="line">    <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> fileURLWithPath:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"那些花儿"</span> ofType:<span class="string">@"mp3"</span>] ];</span><br><span class="line">    _player = [[<span class="built_in">AVPlayer</span> alloc] initWithURL:url];</span><br><span class="line">    [_player play];</span><br><span class="line">    _isPlayingNow = <span class="literal">YES</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//后台播放显示信息设置</span></span><br><span class="line">    [<span class="keyword">self</span> setPlayingInfo];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Audio" scheme="http://ytlvy.com/tags/Audio/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C programming -- Precompile]]></title>
    <link href="http://ytlvy.com/2015/08/22/C-programming-Precompile/"/>
    <id>http://ytlvy.com/2015/08/22/C-programming-Precompile/</id>
    <published>2015-08-22T12:46:56.000Z</published>
    <updated>2015-08-22T12:47:27.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/kenshincui/p/3854242.html" target="_blank" rel="external">reference</a></p>
<h2 id="C语言之预处理">C语言之预处理</h2><h3 id="概述">概述</h3><p>大家都知道一个C程序的运行包括编译和链接两个阶段，其实在编译之前预处理器首先要进行预处理操作，将处理完产生的一个新的源文件进行编译。由于预处理指令是在编译之前就进行了，因此很多时候它要比在程序运行时进行操作效率高。在C语言中包括三类预处理指令，今天将一一介绍：</p>
<ul>
<li>宏定义</li>
<li>条件编译</li>
<li>文件包含</li>
</ul>
<h3 id="宏定义">宏定义</h3><p>对于程序中经常用到的一些常量或者简短的函数我们通常使用宏定义来处理，这样做的好处是对于程序中所有的配置我们可以统一在宏定义中进行管理，而且由于宏定义是在程序编译之前进行替换相比定义成全局变量或函数效率更高。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  Pretreatment</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-6-28.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> PI 3.14 <span class="comment">//宏定义一般大写</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> R 10</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S 2*PI*R <span class="comment">//在另一个宏里面引用了上面的宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> r=<span class="number">10.5</span>;</span><br><span class="line">    <span class="keyword">double</span> area=PI*r*r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"area=%.2f\n"</span>,area);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> a=S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%.2f\n"</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"PI=3.14\n"</span>);<span class="comment">//注意输出结果不是3.14=3.14而是PI=3.14，字符串中的PI并不会被替换</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">undef</span> PI <span class="comment">//强制终止宏定义，否则它的范围一直到文件结束</span></span></span><br><span class="line">    <span class="keyword">int</span> PI=<span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">double</span> area2=PI*r*r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"area2=%.2f\n"</span>,area2);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>宏定义实际的操作就是在预处理时进行对应替换，这个阶段不管语法是否正确，而且对于字符串中出现的宏名不会进行替换。宏定义的功能事实上是非常强大的，除了简单的常量替换还可以传入参数：</p>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  1.2.c</span></span><br><span class="line"><span class="comment">//  Pretreatment</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-7-17.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SUM(a,b) a+b</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SUB(a,b) (a-b)</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> MUL (a,b) (a*b) <span class="comment">//这么定义是错误的，预处理器会认为宏名为”MUL“,替换内容为”(a,b) (a*b)“</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>,b=<span class="number">3</span>,c,d;</span><br><span class="line">    c=SUM(a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%d\n"</span>,c); <span class="comment">//结果：c=5</span></span><br><span class="line">    d=SUM(a, b)*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"d=%d\n"</span>); <span class="comment">//结果：8,为什么不是10呢？因为替换后：d=a+b*2也就是2+3*2=8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> e=SUB(b, a)*<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"(b-a)*2=%d\n"</span>,e); <span class="comment">//结果：2,如果SUB定义时不加括号这里应该是-1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面我们可以看出带参数的宏功能很强大，有点类似于函数，同函数不同的是它只是简单的替换，不涉及存储空间分配，参数、返回值等问题，但是由于它在预处理阶段展开，所以一般效率较高。使用带参数的宏需要注意的就是结果最好用括号括起来否则很容易出现问题（在上面的SUM例子中我们应该已经看到了）；还有一点就是带参数的宏定义时名称和参数之间不要有空格。</p>
<h3 id="条件编译">条件编译</h3><p>条件编译其实就是在编译之前预处理器根据预处理指令判断对应的条件，如果条件满足就将对应的代码编译进去，否则代码就根本不进入编译环节（相当于根本就没有这段代码）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  Pretreatment</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-06-28.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> COUNT 1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//判断是否定义了 COUNT 宏</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> defined(COUNT) <span class="comment">//等价于：#ifdef COUNT,相反如果判断没有定义过则可以通过#if !defined(COUNT)或者#ifndef COUNT</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"COUNT defined\n"</span>);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//判断宏定义COUNT是否等于1</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> COUNT==1</span></span><br><span class="line">    showMessage(<span class="string">"hello,world!\n"</span>);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">    say();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="文件包含">文件包含</h3><p>文件包含指令#include在前面也多次使用过，这里再次强调一下。首先使用#include”xxx”包含和使用#include <xxx>包含的不同之处就是使用&lt;&gt;包含时，预处理器会搜索C函数库头文件路径下的文件，而使用””包含时首先搜索程序所在目录，其次搜索系统Path定义目录，如果还是找不到才会搜索C函数库头文件所在目录。</xxx></p>
<p>另外在使用#include的时候我们需要注意包含文件的时候是不能递归包含的，例如a.h文件包含b.h，而b.h就不能再包含a.h了；还有就是重复包含虽然是允许的（这里指的是重复包含头文件）但是这会降低编译性能，不妨看一下下面的例子：</p>
<p><img src="http://images.cnitblog.com/blog/62046/201407/182035388189767.png" alt=""></p>
<p>上面有三段代码，在main.c和person.h中都包含了message.h而main.c自身又包含了person.h,这样程序在预处理阶段会对包含内容进行替换，替换后mian.c中包含了两个#include “message.h”虽然没有报错，但这会影响编译的性能，正确的做法应该是这样的：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#ifndef</span> _PERSON_H_</span><br><span class="line"><span class="hexcolor">#def</span>ine _PERSON_H_</span><br><span class="line"></span><br><span class="line"><span class="id">#include</span> <span class="string">"person.h"</span></span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure>
<p><img src="http://images.cnitblog.com/blog/62046/201407/182035402567293.png" alt=""></p>
<p>其实就是用宏定义判断一个宏是否定义了，如果没有定义则会定义这个宏，这样以来如果已经包含过则这个宏定义肯定已经定义过了，即使再包含也不会重新定义了，下面的代码也就不会包含进去。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.cnblogs.com/kenshincui/p/3854242.html">reference</a></p>
<h2 id="C语言之预处理">C语言之预处理</h2><h3 id="概述">概述</h3><p>大家都知道一个C程序的运行包括编译和链接两个阶段，其实在编译之前预处理器首先要进行预处理操作，将处理完产生的一个新的源文件进行编译。由于预处理指令是在编译之前就进行了，因此很多时候它要比在程序运行时进行操作效率高。在C语言中包括三类预处理指令，今天将一一介绍：</p>
<ul>
<li>宏定义</li>
<li>条件编译</li>
<li>文件包含</li>
</ul>
<h3 id="宏定义">宏定义</h3><p>对于程序中经常用到的一些常量或者简短的函数我们通常使用宏定义来处理，这样做的好处是对于程序中所有的配置我们可以统一在宏定义中进行管理，而且由于宏定义是在程序编译之前进行替换相比定义成全局变量或函数效率更高。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  Pretreatment</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-6-28.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> PI 3.14 <span class="comment">//宏定义一般大写</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> R 10</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> S 2*PI*R <span class="comment">//在另一个宏里面引用了上面的宏</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> r=<span class="number">10.5</span>;</span><br><span class="line">    <span class="keyword">double</span> area=PI*r*r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"area=%.2f\n"</span>,area);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">double</span> a=S;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%.2f\n"</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"PI=3.14\n"</span>);<span class="comment">//注意输出结果不是3.14=3.14而是PI=3.14，字符串中的PI并不会被替换</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">undef</span> PI <span class="comment">//强制终止宏定义，否则它的范围一直到文件结束</span></span></span><br><span class="line">    <span class="keyword">int</span> PI=<span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">double</span> area2=PI*r*r;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"area2=%.2f\n"</span>,area2);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>宏定义实际的操作就是在预处理时进行对应替换，这个阶段不管语法是否正确，而且对于字符串中出现的宏名不会进行替换。宏定义的功能事实上是非常强大的，除了简单的常量替换还可以传入参数：</p>]]>
    
    </summary>
    
      <category term="C" scheme="http://ytlvy.com/tags/C/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C programming -- Struct]]></title>
    <link href="http://ytlvy.com/2015/08/22/C-programming-Struct/"/>
    <id>http://ytlvy.com/2015/08/22/C-programming-Struct/</id>
    <published>2015-08-22T12:45:36.000Z</published>
    <updated>2015-08-22T12:46:06.000Z</updated>
    <content type="html"><![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors Your Name (you@example.org)</li>
<li>@date    2015-08-16 11:06:45</li>
<li>@version $Id$</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.cnblogs.com/kenshincui/p/3856543.html" target="_blank" rel="external">reference</a></p>
<h2 id="C语言之构造类型">C语言之构造类型</h2><h3 id="概述">概述</h3><p>在第一节中我们就提到C语言的构造类型，分为：数组、结构体、枚举、共用体，当然前面数组的内容已经说了很多了，这一节将会重点说一下其他三种类型。</p>
<ul>
<li>结构体</li>
<li>枚举</li>
<li>共用体</li>
</ul>
<h3 id="结构体">结构体</h3><p>数组中存储的是一系列相同的数据类型，那么如果想让一个变量存储不同的数据类型就要使用结构体，结构体定义类似于C++、C#、Java等高级语言中类的定义，但事实上它们又有着很大的区别。结构体是一种类型，并非一个变量，只是这种类型可以由其他C语言基本类型共同组成。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.c</span><br><span class="line">//  ConstructedType</span><br><span class="line">//</span><br><span class="line">//  Created by Kenshin Cui on 14-7-18.</span><br><span class="line">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//结构体类型Date</span><br><span class="line">struct Date&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct <span class="keyword">Person</span>&#123;</span><br><span class="line">    char *name;</span><br><span class="line">    int age;</span><br><span class="line">    struct Date birthday;//一个结构体中使用了另一个结构体类型，结构体类型变量声明前必须加上struct关键字</span><br><span class="line">    float height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv<span class="comment">[]</span>) &#123;</span><br><span class="line">    struct <span class="keyword">Person</span> p=&#123;<span class="string">"Kenshin"</span>,28,&#123;1986,8,8&#125;,1.72&#125;;</span><br><span class="line">    //定义结构体变量并初始化,不允许先定义再直接初始化，例如：struct <span class="keyword">Person</span> p;p=&#123;<span class="string">"Kenshin"</span>,28,&#123;1986,8,8&#125;,1.72&#125;;是错误的，但是可以分别赋值，例如p.name=<span class="string">"Kenshin"</span></span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"name=%s,age=%d,birthday=%d-%d-%d,height=%.2f\n"</span>,p.name,p.age,p.birthday.year,p.birthday.month,p.birthday.day,p.height); </span><br><span class="line">    //结果：name=Kenshin,age=28,birthday=1986-8-8,height=1.72，结构体的引用是通过<span class="string">"结构体变量.成员名称"</span>(注意和结构体指针访问结构体成员变量区分，结构体指针使用p-&gt;a的形式访问)</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"len(Date)=%lu,len(Person)=%lu\n"</span>,sizeof(struct Date),sizeof(struct <span class="keyword">Person</span>)); </span><br><span class="line">    //结果：len(Date)=12,len(<span class="keyword">Person</span>)=32</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>对于上面的例子需要做出如下说明：</p>
<ul>
<li>可以在定义结构体类型的同时声明结构体变量；</li>
<li>如果定义结构体类型的同时声明结构体变量，此时结构体名称可以省略；</li>
<li>定义结构体类型并不会分配内存，在定义结构体变量的时候才进行内存分配（同基本类型时类似的）；</li>
<li>结构体类型的所占用内存大型等于所有成员占用内存大小之和（如果不考虑内存对齐的前提下）；</li>
</ul>
<p>对第4点需要进行说明，例如上面代码是在64位编译器下运行的结果（int长度4，char长度1，float类型4），Date=4+4+4=12。但是对于Person却没有那么简单了，因为按照正常方式计算Person=8+4+12+4=28，但是从上面代码中给出的结果是32，为什么呢？这里不得不引入一个概念“内存对齐”，关于内存对齐的概念在这里不做详细说明，大家需要了解的是：在Mac OS X中对齐参数默认为8（可以通过在代码中添加#pragma pack(8)改变对齐参数），如果结构体中的类型不大于8，那么结构体长度就是其成员类型之和，但是如果成员变量的长度大于这个对齐参数那么得到的结果就不一定是各个成员变量之和了。Person类型的长度之所以是32，其实主要原因是因为Date类型长度12在存储时其偏移量12不是8的倍数，考虑到内存对齐的原因需要添加4个补齐长度，这里使用表格的形式列出了具体原因：</p>
<p><img src="http://images.cnitblog.com/blog/62046/201407/201858560376210.png" alt=""></p>
<p>接下来看一下结构体数组、指向结构体的指针：</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.c</span><br><span class="line">//  ConstructedType</span><br><span class="line">//</span><br><span class="line">//  Created by Kenshin Cui on 14-7-18.</span><br><span class="line">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">struct Date&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct <span class="keyword">Person</span>&#123;</span><br><span class="line">    char *name;</span><br><span class="line">    int age;</span><br><span class="line">    struct Date birthday;</span><br><span class="line">    float height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void changeValue(struct <span class="keyword">Person</span> <span class="keyword">person</span>)&#123;</span><br><span class="line">    <span class="keyword">person</span>.height=1.80;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv<span class="comment">[]</span>) &#123;</span><br><span class="line">    struct <span class="keyword">Person</span> persons<span class="comment">[]</span>=&#123;</span><br><span class="line">        &#123;<span class="string">"Kenshin"</span>,28,&#123;1986,8,8&#125;,1.72&#125;,</span><br><span class="line">        &#123;<span class="string">"Kaoru"</span>,27,&#123;1987,8,8&#125;,1.60&#125;,</span><br><span class="line">        &#123;<span class="string">"Rosa"</span>,29,&#123;1985,8,8&#125;,1.60&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    for (int i=0; i&lt;3; ++i) &#123;</span><br><span class="line">        printf(<span class="string">"name=%s,age=%d,birthday=%d-%d-%d,height=%.2f\n"</span>,</span><br><span class="line">               persons<span class="comment">[i]</span>.name,</span><br><span class="line">               persons<span class="comment">[i]</span>.age,</span><br><span class="line">               persons<span class="comment">[i]</span>.birthday.year,</span><br><span class="line">               persons<span class="comment">[i]</span>.birthday.month,</span><br><span class="line">               persons<span class="comment">[i]</span>.birthday.day,</span><br><span class="line">               persons<span class="comment">[i]</span>.height);</span><br><span class="line">    &#125;</span><br><span class="line">    /*输出结果：</span><br><span class="line">     name=Kenshin,age=28,birthday=1986-8-8,height=1.72</span><br><span class="line">     name=Kaoru,age=27,birthday=1987-8-8,height=1.60</span><br><span class="line">     name=Rosa,age=29,birthday=1985-8-8,height=1.60</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    struct <span class="keyword">Person</span> <span class="keyword">person</span>=persons<span class="comment">[0]</span>;</span><br><span class="line">    changeValue(<span class="keyword">person</span>);</span><br><span class="line">    printf(<span class="string">"name=%s,age=%d,birthday=%d-%d-%d,height=%.2f\n"</span>,</span><br><span class="line">           persons<span class="comment">[0]</span>.name,</span><br><span class="line">           persons<span class="comment">[0]</span>.age,</span><br><span class="line">           persons<span class="comment">[0]</span>.birthday.year,</span><br><span class="line">           persons<span class="comment">[0]</span>.birthday.month,</span><br><span class="line">           persons<span class="comment">[0]</span>.birthday.day,</span><br><span class="line">           persons<span class="comment">[0]</span>.height);</span><br><span class="line">    /*输出结果：</span><br><span class="line">     name=Kenshin,age=28,birthday=1986-8-8,height=1.72</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    struct <span class="keyword">Person</span> *p=&amp;<span class="keyword">person</span>;</span><br><span class="line">    printf(<span class="string">"name=%s,age=%d,birthday=%d-%d-%d,height=%.2f\n"</span>,</span><br><span class="line">           (*p).name,</span><br><span class="line">           (*p).age,</span><br><span class="line">           (*p).birthday.year,</span><br><span class="line">           (*p).birthday.month,</span><br><span class="line">           (*p).birthday.day,</span><br><span class="line">           (*p).height);</span><br><span class="line">    /*输出结果：</span><br><span class="line">     name=Kenshin,age=28,birthday=1986-8-8,height=1.72</span><br><span class="line">     */</span><br><span class="line">    printf(<span class="string">"name=%s,age=%d,birthday=%d-%d-%d,height=%.2f\n"</span>,</span><br><span class="line">           p-&gt;name,</span><br><span class="line">           p-&gt;age,</span><br><span class="line">           p-&gt;birthday.year,</span><br><span class="line">           p-&gt;birthday.month,</span><br><span class="line">           p-&gt;birthday.day,</span><br><span class="line">           p-&gt;height);</span><br><span class="line">    /*输出结果：</span><br><span class="line">     name=Kenshin,age=28,birthday=1986-8-8,height=1.72</span><br><span class="line">     */</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结构体作为函数参数传递的是成员的值（值传递而不是引用传递），对于结构体指针而言可以通过”-&gt;”操作符进行访问。</p>
<h3 id="枚举">枚举</h3><p>枚举类型是比较简单的一种数据类型，事实上在C语言中枚举类型是作为整形常量进行处理的，通常称为“枚举常量”。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  ConstructedType</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-7-18.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Season&#123; <span class="comment">//默认情况下spring=0，summer=1,autumn=2,winter=3</span></span><br><span class="line">    spring,</span><br><span class="line">    summer,</span><br><span class="line">    autumn,</span><br><span class="line">    winter</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">enum</span> Season season=summer; <span class="comment">//枚举赋值,等价于season=1</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"summer=%d\n"</span>,season); <span class="comment">//结果：summer=1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(season=spring;season&lt;=winter;++season)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"element value=%d\n"</span>,season);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*结果：</span><br><span class="line">     element value=0</span><br><span class="line">     element value=1</span><br><span class="line">     element value=2</span><br><span class="line">     element value=3</span><br><span class="line">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意的是枚举成员默认值从0开始，如果给其中一个成员赋值，其它后面的成员将依次赋值，例如上面如果summer手动指定为8，则autumn=9，winter=10，而sprint还是0。</p>
<h3 id="共用体">共用体</h3><p>共用体又叫联合，因为它的关键字是union（貌似数据库操作经常使用这个关键字），它的使用不像枚举和结构体那么频繁，但是作为C语言中的一种数据类型我们也有必要弄清它的用法。从前面的分析我们知道结构体的总长度等于所有成员的和（当然此时还可能遇到对齐问题），但是和结构体不同的是共用体所有成员共用一块内存，顺序从低地址开始存放，一次只能使用其中一个成员，union最终大小由共用体中最大的成员决定，对某一成员赋值可能会覆盖另一个成员。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  ConstructedType</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-7-20.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">union</span> Type&#123;</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    <span class="keyword">short</span> <span class="keyword">int</span> b;</span><br><span class="line">    <span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">union</span> Type t;</span><br><span class="line">    t.a=<span class="string">'a'</span>;</span><br><span class="line">    t.b=<span class="number">10</span>;</span><br><span class="line">    t.c=<span class="number">65796</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"address(Type)=%x,address(t.a)=%x,address(t.b)=%x,address(t.c)=%x\n"</span>,&amp;t,&amp;t.a,&amp;t.b,&amp;t.c);</span><br><span class="line">    <span class="comment">//结果：address(Type)=5fbff7b8,address(t.a)=5fbff7b8,address(t.b)=5fbff7b8,address(t.c)=5fbff7b8</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"len(Type)=%d\n"</span>,<span class="keyword">sizeof</span>(<span class="keyword">union</span> Type));</span><br><span class="line">    <span class="comment">//结果：len(Type)=4</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"t.a=%d,t.b=%d,t.c=%d\n"</span>,t.a,t.b,t.c);</span><br><span class="line">    <span class="comment">//结果:t.a=4,t.b=260,t.c=65796</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里需要重点解释一个问题：为什么t.a、t.b、t.c输出结果分别是4、260、65796，当然t.c等于65796并不奇怪，但是t.a前面赋值为’a’不应该是97吗，而t.b不应该是10吗？其实如果弄清这个问题共用体的概念基本就清楚了。</p>
<p>根据前面提到的，共用体其实每次只能使用其中一个成员，对于上面的代码经过三次赋值最终使用的其实就是t.c,而通过上面的输出结果我们也确实看到c是有效的。共用体有一个特点就是它的成员存储在同一块内存区域，这块区域的大小需要根据它的成员中长度最大的成员长度而定。由于上面的代码是在64位编译器下编译的，具体长度：char=1，short int=2，int=4，所以得出结论，Type的长度为4，又根据上面输出的地址，可以得到下面的存储信息(注意数据的存储方式：高地址存储高位，低地址存储地位)：</p>
<p><img src="http://images.cnitblog.com/blog/62046/201407/201858575218722.png" alt=""></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当读取c的时候，它的二进制是“<span class="number">00000000</span>  <span class="number">00000001</span>  <span class="number">00000001</span>  <span class="number">00000100</span>”，换算成十进制就是65796；而经过三次赋值后，此时b的存储就已经被c成员的低位数据覆盖，b的长度是二，所以从起始地址取两个字节得到的二进制数据此时是“<span class="number">00000001</span>  <span class="number">00000100</span>”（b原来的数据已经被c低2位数据覆盖，其实此时就是c的低2位数据），换算成十进制就是260；类似的a此时的数据就是c的低一位数据”<span class="number">00000100</span>”,换算成十进制就是4。</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>@charset “UTF-8”;<br>/**</p>
<ul>
<li></li>
<li>@authors Your Name (you@example.org)</li>
<li>@date    2015-08-16 11:06:45</li>
<li>@version $Id$</li>
<li>Copyright (c) 2015年 Guo yanjie. All rights reserved.<br>*/</li>
</ul>
<p><a href="http://www.cnblogs.com/kenshincui/p/3856543.html">reference</a></p>
<h2 id="C语言之构造类型">C语言之构造类型</h2><h3 id="概述">概述</h3><p>在第一节中我们就提到C语言的构造类型，分为：数组、结构体、枚举、共用体，当然前面数组的内容已经说了很多了，这一节将会重点说一下其他三种类型。</p>
<ul>
<li>结构体</li>
<li>枚举</li>
<li>共用体</li>
</ul>
<h3 id="结构体">结构体</h3><p>数组中存储的是一系列相同的数据类型，那么如果想让一个变量存储不同的数据类型就要使用结构体，结构体定义类似于C++、C#、Java等高级语言中类的定义，但事实上它们又有着很大的区别。结构体是一种类型，并非一个变量，只是这种类型可以由其他C语言基本类型共同组成。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//</span><br><span class="line">//  main.c</span><br><span class="line">//  ConstructedType</span><br><span class="line">//</span><br><span class="line">//  Created by Kenshin Cui on 14-7-18.</span><br><span class="line">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">//结构体类型Date</span><br><span class="line">struct Date&#123;</span><br><span class="line">    int year;</span><br><span class="line">    int month;</span><br><span class="line">    int day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct <span class="keyword">Person</span>&#123;</span><br><span class="line">    char *name;</span><br><span class="line">    int age;</span><br><span class="line">    struct Date birthday;//一个结构体中使用了另一个结构体类型，结构体类型变量声明前必须加上struct关键字</span><br><span class="line">    float height;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, const char * argv<span class="comment">[]</span>) &#123;</span><br><span class="line">    struct <span class="keyword">Person</span> p=&#123;<span class="string">"Kenshin"</span>,28,&#123;1986,8,8&#125;,1.72&#125;;</span><br><span class="line">    //定义结构体变量并初始化,不允许先定义再直接初始化，例如：struct <span class="keyword">Person</span> p;p=&#123;<span class="string">"Kenshin"</span>,28,&#123;1986,8,8&#125;,1.72&#125;;是错误的，但是可以分别赋值，例如p.name=<span class="string">"Kenshin"</span></span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"name=%s,age=%d,birthday=%d-%d-%d,height=%.2f\n"</span>,p.name,p.age,p.birthday.year,p.birthday.month,p.birthday.day,p.height); </span><br><span class="line">    //结果：name=Kenshin,age=28,birthday=1986-8-8,height=1.72，结构体的引用是通过<span class="string">"结构体变量.成员名称"</span>(注意和结构体指针访问结构体成员变量区分，结构体指针使用p-&gt;a的形式访问)</span><br><span class="line">    </span><br><span class="line">    printf(<span class="string">"len(Date)=%lu,len(Person)=%lu\n"</span>,sizeof(struct Date),sizeof(struct <span class="keyword">Person</span>)); </span><br><span class="line">    //结果：len(Date)=12,len(<span class="keyword">Person</span>)=32</span><br><span class="line">    </span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="C" scheme="http://ytlvy.com/tags/C/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[C programming -- Array & String]]></title>
    <link href="http://ytlvy.com/2015/08/22/C-programming-Array-String/"/>
    <id>http://ytlvy.com/2015/08/22/C-programming-Array-String/</id>
    <published>2015-08-22T12:44:55.000Z</published>
    <updated>2015-08-22T12:46:18.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/kenshincui/p/3843505.html" target="_blank" rel="external">reference</a></p>
<h2 id="C语言之数组和字符串">C语言之数组和字符串</h2><h3 id="概览">概览</h3><p>数组在C语言中有着特殊的地位，它有很多特性，例如它的存储是连续的，数组的名称就是数组的地址等。而在C语言中是没有String类型的，那么如果要表示一个字符串，就必须使用字符数组。今天主要就介绍如下三个方面：</p>
<ul>
<li>一维数组</li>
<li>多维数组</li>
<li>字符串</li>
</ul>
<h3 id="一维数组">一维数组</h3><p>一维数组操作比较简单，但是需要注意，数组长度必须是固定的，长度不能使用变量进行初始化；如果声明的同时进行赋值则数组长度可以省略，编译器会自动计算数组长度；同时数组不能先声明再一次性赋值（当然可以对每个元素一一赋值）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//int a[len] = &#123; 1, 2&#125;;//错误,不能使变量</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>];<span class="comment">//正确</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//a[2] = 3;//超过数组长度，但是编译器并不会检查，运行报错</span></span><br><span class="line">    <span class="keyword">int</span> b[<span class="string">'a'</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//'a'=97，所以可以作为数组长度，但是后面的元素没有初始化，其值默认为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">97</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"b[%d]=%d\n"</span>,i,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">2</span> * <span class="number">3</span>];<span class="comment">//2*3是固定值可以作为数组长度</span></span><br><span class="line">    <span class="keyword">int</span> d[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;<span class="comment">//如果初始化的同时赋值则数组长度可以省略，当前个数为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="扩展—数组的存储">扩展—数组的存储</h3><p>数组在内存中存储在一块连续的空间中，如果知道数组类型（int、float等）和初始地址就可以知道其他元素的地址，同时由于数组名等于数组第一个元素的地址，所以当数组作为参数（作为参数时形参可以省略）其实是引用传递。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">const</span> l = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> a[l] = &#123; <span class="number">1</span>, <span class="number">2</span>,<span class="number">3</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; l; ++i)&#123;</span><br><span class="line">        <span class="comment">//由于当前在32位编译器下，int型长度为4个字节，可以判断出三个地址两两相差都是4</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a[%d]=%d,address=%x\n"</span>, i, a[i], &amp;a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*当前输出结果：</span><br><span class="line">    a[0] = 1, address = c9f95c</span><br><span class="line">    a[1] = 2, address = c9f960</span><br><span class="line">    a[2] = 3, address = c9f964*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看一下上面定义的数组在内存中存储结构</p>
<p><img src="http://images.cnitblog.com/blog/62046/201407/142058350217075.png" alt=""></p>
<p>再来看一下数组作为参数传递的情况，数组作为参数传递的是数组的地址<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeValue</span><span class="params">(<span class="keyword">int</span> a[])</span></span>&#123; a[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123; <span class="keyword">int</span> a[<span class="number">2</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    changeValue(a); <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"a[%d]=%d\n"</span>,i,a[i]);</span><br><span class="line">    &#125; <span class="comment">/*打印结果</span><br><span class="line">    a[0]=10</span><br><span class="line">    a[1]=2</span><br><span class="line">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="多维数组">多维数组</h3><p>多维数组其实可以看成是一个特殊的一维数组，只是每个元素又是一个一维数组，下面简单看一下多维数组的初始化和赋值</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">    int a<span class="comment">[2]</span><span class="comment">[3]</span>;//2行3列，二维数组可以看成是一个特殊的一维数组，只是它的每一个元素又是一个一维数组</span><br><span class="line">    a<span class="comment">[0]</span><span class="comment">[0]</span> = 1;</span><br><span class="line">    a<span class="comment">[0]</span><span class="comment">[1]</span> = 2;</span><br><span class="line">    a<span class="comment">[0]</span><span class="comment">[2]</span> = 3;</span><br><span class="line">    a<span class="comment">[1]</span><span class="comment">[0]</span> = 4;</span><br><span class="line">    a<span class="comment">[1]</span><span class="comment">[1]</span> = 5;</span><br><span class="line">    a<span class="comment">[1]</span><span class="comment">[2]</span> = 6;</span><br><span class="line">    for (int i = 0; i &lt; 2; ++i)&#123;</span><br><span class="line">        for (int j = 0; j &lt; 3; ++j)&#123;</span><br><span class="line">            printf(<span class="string">"a<span class="subst">[%d]</span><span class="subst">[%d]</span>=%d,address=%x\n"</span>, i, j, a<span class="comment">[i]</span><span class="comment">[j]</span>, &amp;a<span class="comment">[i]</span><span class="comment">[j]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*打印结果</span><br><span class="line">    a<span class="comment">[0]</span><span class="comment">[0]</span>=1,address=f8fb24</span><br><span class="line">    a<span class="comment">[0]</span><span class="comment">[1]</span>=2,address=f8fb28</span><br><span class="line">    a<span class="comment">[0]</span><span class="comment">[2]</span>=3,address=f8fb2c</span><br><span class="line">    a<span class="comment">[1]</span><span class="comment">[0]</span>=4,address=f8fb30</span><br><span class="line">    a<span class="comment">[1]</span><span class="comment">[1]</span>=5,address=f8fb34</span><br><span class="line">    a<span class="comment">[1]</span><span class="comment">[2]</span>=6,address=f8fb38</span><br><span class="line">    */</span><br><span class="line">    //初始化并直接赋值</span><br><span class="line">    int b<span class="comment">[2]</span><span class="comment">[3]</span> = &#123; &#123; 1, 2, 3 &#125;, &#123; 4, 5, 6 &#125; &#125;;</span><br><span class="line">    //由于数组的赋值顺序是先从第一行第一列，再第一行第二列...然后第二行第一列...，所以我们也可以写成如下形式</span><br><span class="line">    int c<span class="comment">[2]</span><span class="comment">[3]</span> = &#123; 1, 2, 3, 4, 5, 6 &#125;;</span><br><span class="line">    //也可以只初始化部分数据，其余元素默认为0</span><br><span class="line">    int d<span class="comment">[2]</span><span class="comment">[3]</span> = &#123; 1, 2, 3, 4 &#125;;</span><br><span class="line">    for (int i = 0; i &lt; 2; ++i)&#123;</span><br><span class="line">        for (int j = 0; j &lt; 3; ++j)&#123;</span><br><span class="line">            printf(<span class="string">"d<span class="subst">[%d]</span><span class="subst">[%d]</span>=%d\n"</span>, i, j, d<span class="comment">[i]</span><span class="comment">[j]</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    /*打印结果</span><br><span class="line">    d<span class="comment">[0]</span><span class="comment">[0]</span>=1</span><br><span class="line">    d<span class="comment">[0]</span><span class="comment">[1]</span>=2</span><br><span class="line">    d<span class="comment">[0]</span><span class="comment">[2]</span>=3</span><br><span class="line">    d<span class="comment">[1]</span><span class="comment">[0]</span>=4</span><br><span class="line">    d<span class="comment">[1]</span><span class="comment">[1]</span>=0</span><br><span class="line">    d<span class="comment">[1]</span><span class="comment">[2]</span>=0</span><br><span class="line">    */</span><br><span class="line">    //当然下面赋值也可以</span><br><span class="line">    int e<span class="comment">[2]</span><span class="comment">[3]</span> = &#123; &#123;&#125;, &#123; 4, 5, 6 &#125; &#125;;</span><br><span class="line">    //可以省略行号,但是绝对不可以省略列号，因为按照上面说的赋值顺序，它无法判断有多少行</span><br><span class="line">    int f<span class="comment">[]</span><span class="comment">[3]</span> = &#123; &#123;1,2,3&#125;,&#123;4,5,6&#125; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="扩展—多维数组的存储">扩展—多维数组的存储</h4><p>以上面a数组为例，它在内存中的结构如下图</p>
<p><img src="http://images.cnitblog.com/blog/62046/201407/142058356937703.png" alt=""></p>
<p>根据上图和一维数组的存储，对于二维数组可以得出如下结论:数组名就是整个二维数组的地址，也等于第一行数组名的地址，还等于第一个元素的地址；第二行数组名等于第二行第一个元素的地址。用表达式表示：</p>
<p>a=a[0]=&amp;a[0][0]<br>a[1]=&amp;a[1][0]</p>
<p>同样可以得出a[i][j]=a[i]+j。关于三维数组、四维数组等多维数组，其实可以以此类推，在此不再赘述。</p>
<h3 id="字符串">字符串</h3><p>在C语言中是没有字符串类型的，如果要表示字符串需要使用char类型的数组，因为字符串本身就是多个字符的组合。但是需要注意的是字符串是一个特殊的数组，在它的结束位置必须要加一个”\0”（ASCII中0是空操作符，表示什么也不做）来表示字符串结束，否则编译器是不知道什么时候字符串已经结束的。当直接使用字符串赋值的时候程序会自动加上”\0”作为结束符。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  ArrayAndString</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by KenshinCui on 14-7-06.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> a[] = &#123;<span class="string">'K'</span>,<span class="string">'e'</span>,<span class="string">'n'</span>,<span class="string">'s'</span>,<span class="string">'h'</span>,<span class="string">'i'</span>,<span class="string">'n'</span>,<span class="string">'\0'</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,a); <span class="comment">//结果：Kenshin，注意使用%s输出字符串内容，如果换成整形输出格式其实输出的是a的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"address=%x"</span>, a); <span class="comment">//结果：address=5fbff890</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//后面的\0绝对不能省略,如果没有\0则会出现如下情况</span></span><br><span class="line">    <span class="keyword">char</span> b[] = &#123; <span class="string">'I'</span>, <span class="string">'a'</span>, <span class="string">'m'</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,b); <span class="comment">//没有按照期望输出，多了一些垃圾数据，在当前环境打印结果：IamKenshin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"address=%x"</span>,b); <span class="comment">//结果：address=5fbff88d</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="comment">//直接赋值为字符串，此时不需要手动添加\0，编译器会自动添加</span></span><br><span class="line">    <span class="keyword">char</span> c[] = <span class="string">"Kenshin"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%s"</span>,c); <span class="comment">//结果：c=Kenshin</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//二维数组存储多个字符串</span></span><br><span class="line">    <span class="keyword">char</span> d[<span class="number">2</span>][<span class="number">3</span>]=&#123;<span class="string">"Kenshin"</span>,<span class="string">"Kaoru"</span>,<span class="string">"Rose"</span>,<span class="string">"Jack"</span>,<span class="string">"Tom"</span>,<span class="string">"Jerry"</span>&#125;;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面代码注释中可以看到打印b的时候不是直接打印出来“Iam”而是打印出了“IamKenshin”，原因就是编译器无法判断字符串是否结束，要解释为什么打印出“IamKenshin”我们需要了解a和b在内存中的存储。</p>
<p><img src="http://images.cnitblog.com/blog/62046/201407/142058363658331.png" alt=""></p>
<p>从图中我们不难发现由于a占用8个字节，而定义完a后直接定义了b，此时分配的空间连续，b占用3个字节，这样当输出b的时候由于输出完“Iam”之后并未遇到”\0”标记，程序继续输出直到遇到数组a中的“\0”才结束，因此输出内容为“IamKenshin”。</p>
<h4 id="扩展—字符串操作常用函数">扩展—字符串操作常用函数</h4><p>下面简单看一下和字符和字符串相关的常用的几个函数</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.c</span></span><br><span class="line"><span class="comment">//  ArrayAndString</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by Kenshin Cui on 14-7-04.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2014年 Kenshin Cui. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="comment">/*字符操作*/</span></span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'a'</span>); <span class="comment">//结果：a，putchar一次只能输出一个字符</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="number">97</span>);<span class="comment">//结果:a</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> a;</span><br><span class="line">    a=getchar();<span class="comment">//getchar()一次只能接收一个字符，可以接收空格、tab、回车</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"a=%c"</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*字符串操作*/</span></span><br><span class="line">    <span class="keyword">char</span> b[]=<span class="string">"Kenshin"</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"b=%s"</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">puts</span>(b); <span class="comment">//puts用于输出单个字符串，不能像printf格式化输出，会自动添加换行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> c[<span class="number">10</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,c);<span class="comment">//注意c没必要写成&amp;c，因为c本身就代表了数组的地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"c=%s\n"</span>,c);<span class="comment">//注意即使你输入的内容大于10，也能正确输出，但是下面的gets()函数却不行</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//gets()函数，注意它是不安全的，因为接收的时候不知道它的大小容易造成溢出，建议不要使用</span></span><br><span class="line">    <span class="keyword">char</span> d[<span class="number">10</span>];</span><br><span class="line">    gets(d); <span class="comment">//gets一次只能接收一个字符串，但是scanf可接收多个；scanf不能接收空格、tab，gets则可以</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"d=%s"</span>,d);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> e[]=&#123;<span class="string">'K'</span>,<span class="string">'s'</span>,<span class="string">'\0'</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu"</span>,<span class="built_in">strlen</span>(e)); <span class="comment">//结果是：2，不是3，因为\0不计入长度</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> f[]=&#123;<span class="string">"Kenshin"</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lu"</span>,<span class="built_in">strlen</span>(f)); <span class="comment">//结果是：7</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> g[<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(g,<span class="string">"hello,world!"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,g); <span class="comment">//结果是：hello,即使定义的g长度为5，但是也能完全拷贝进去</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">char</span> h[<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">char</span> i[]=&#123;<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'\0'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>,<span class="string">'\0'</span>&#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(h,i);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,h); <span class="comment">//结果是：abc,遇到第一个\0则结束</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">strcat</span>(i,<span class="string">"ghi"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s"</span>,i); <span class="comment">//结果是：abcghi,注意不是abcdefghi,strcat，从i第一\0开始使用“ghi”覆盖，覆盖完之后加上一个\0,在内存中目前应该是：&#123;'a','b','c','g','h','i','\0','f','\0'&#125;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> j[]=<span class="string">"abc"</span>;</span><br><span class="line">    <span class="keyword">char</span> k[]=<span class="string">"aBc"</span>;</span><br><span class="line">    <span class="keyword">char</span> l[]=<span class="string">"acb"</span>;</span><br><span class="line">    <span class="keyword">char</span> m[]=&#123;<span class="string">'a'</span>,<span class="string">'\0'</span>&#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d,%d,%d"</span>,<span class="built_in">strcmp</span>(j,k),<span class="built_in">strcmp</span>(k,l),<span class="built_in">strcmp</span>(l,m));<span class="comment">//遇到第一个不相同的字符或\0则返回两者前后之差，结果：32,-33,99</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>1.在Xcode中会提示gets是不安全的，推荐使用fgets()。<br>2.strlen()只用于计算字符串长度，由于在C语言中字符串使用字符数组长度表示，所以它可以计算带有’\0’结尾的字符数组长度，但是它并不能计算其他类型的数组长度。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.cnblogs.com/kenshincui/p/3843505.html">reference</a></p>
<h2 id="C语言之数组和字符串">C语言之数组和字符串</h2><h3 id="概览">概览</h3><p>数组在C语言中有着特殊的地位，它有很多特性，例如它的存储是连续的，数组的名称就是数组的地址等。而在C语言中是没有String类型的，那么如果要表示一个字符串，就必须使用字符数组。今天主要就介绍如下三个方面：</p>
<ul>
<li>一维数组</li>
<li>多维数组</li>
<li>字符串</li>
</ul>
<h3 id="一维数组">一维数组</h3><p>一维数组操作比较简单，但是需要注意，数组长度必须是固定的，长度不能使用变量进行初始化；如果声明的同时进行赋值则数组长度可以省略，编译器会自动计算数组长度；同时数组不能先声明再一次性赋值（当然可以对每个元素一一赋值）。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//int a[len] = &#123; 1, 2&#125;;//错误,不能使变量</span></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2</span>];<span class="comment">//正确</span></span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//a[2] = 3;//超过数组长度，但是编译器并不会检查，运行报错</span></span><br><span class="line">    <span class="keyword">int</span> b[<span class="string">'a'</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;<span class="comment">//'a'=97，所以可以作为数组长度，但是后面的元素没有初始化，其值默认为0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">97</span>; ++i)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"b[%d]=%d\n"</span>,i,b[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> c[<span class="number">2</span> * <span class="number">3</span>];<span class="comment">//2*3是固定值可以作为数组长度</span></span><br><span class="line">    <span class="keyword">int</span> d[] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;<span class="comment">//如果初始化的同时赋值则数组长度可以省略，当前个数为3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="C" scheme="http://ytlvy.com/tags/C/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
</feed>