<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Yt's Blog]]></title>
  <subtitle><![CDATA[Valar Morghulis]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://ytlvy.com//"/>
  <updated>2015-09-27T13:22:28.000Z</updated>
  <id>http://ytlvy.com//</id>
  
  <author>
    <name><![CDATA[Yt]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Xcode shorcut]]></title>
    <link href="http://ytlvy.com/2015/09/27/Xcode-shorcut/"/>
    <id>http://ytlvy.com/2015/09/27/Xcode-shorcut/</id>
    <published>2015-09-27T13:22:06.000Z</published>
    <updated>2015-09-27T13:22:28.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Xcode_shorcut">Xcode shorcut</h2><h3 id="组合技能1">组合技能1</h3><ol>
<li>首先通过Cmd + shift +o 打开快速查找文件DDlog文件。</li>
<li>然后呢，我们想要快速找到它在项目中的位置，可以通过Cmd + shift +j直接得到它在项目中得位置，方便我们对于文件进行复制，移动等操作。</li>
<li>此时，如果我们懒着通过鼠标聚焦到editor中，可以通过Cmd + j 聚焦到编辑器中。</li>
<li>最后如果我们想要在文件中查找到具体的某个函数，可以通过ctrl + 6 来输入相应的函数名字来查找对应的函数。（也可以直接通过ctrl + 6查看本页面中有哪些函数。）</li>
</ol>
<p><img src="http://m2.img.srcdd.com/farm5/d/2014/1220/21/4FF7AC7FEE29B29A5944E17DDAE7445B_ORIG_1265_658.gif" alt=""></p>
<a id="more"></a>
<h3 id="组合技能2">组合技能2</h3><ol>
<li>首先我在两个地方打了两个断点，打断点的方式可以直接在所在行的左边直接点击空白处，也可以通过快捷键cmd +(delte 下面的那个键)。</li>
<li>然后呢， 我点击进入别的页面，通过Cmd + 7,可以快速定位的断点选择栏。</li>
<li>此时，我通过上下移动方向键，可以快速回到我打断点的地方。</li>
<li>然后我又通过Cmd + y的方式来使所有的断点无效。最后加了这么多得断点了，我们需要移除断点，所以通过option + 方向键快读定位到workSpace,点击delete的方式吧所有的断点删除。</li>
</ol>
<p><img src="http://m3.img.srcdd.com/farm5/d/2014/1221/11/D4AF874F2CD68EDE94FCDE71229993E3_ORIG_1265_658.gif" alt=""></p>
<h3 id="组合技能3">组合技能3</h3><ol>
<li>首先我通过快捷键Cmd + t 来快速打开一个tab标签。</li>
<li>然后呢，我又通过doubleClick的方式在带开了一个UIWindow的标签，但是没有关闭原来的标签。</li>
<li>在Uiwindow这个文件里我可能想查看一个控制器的代码，但是不想关闭当前UIWindow.我通过option + 控制器源文件,就在assitant editor中打开了这个文件，查看完我通过cmd+ enter键来关闭这个辅助视图。</li>
<li>最后打开了这么多得tab标签是不是看很复杂，我们在想要留下的文件的tab标签是按着option键点击x按钮，这样就会只留下自己想看的tab,而其它的tab都关闭了，这样tab界面看起来会清爽很多。</li>
</ol>
<p><img src="http://m3.img.srcdd.com/farm5/d/2014/1221/13/EAAF5B8C08678DE34D0F1E7D9DABBBF4_ORIG_1265_658.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Xcode_shorcut">Xcode shorcut</h2><h3 id="组合技能1">组合技能1</h3><ol>
<li>首先通过Cmd + shift +o 打开快速查找文件DDlog文件。</li>
<li>然后呢，我们想要快速找到它在项目中的位置，可以通过Cmd + shift +j直接得到它在项目中得位置，方便我们对于文件进行复制，移动等操作。</li>
<li>此时，如果我们懒着通过鼠标聚焦到editor中，可以通过Cmd + j 聚焦到编辑器中。</li>
<li>最后如果我们想要在文件中查找到具体的某个函数，可以通过ctrl + 6 来输入相应的函数名字来查找对应的函数。（也可以直接通过ctrl + 6查看本页面中有哪些函数。）</li>
</ol>
<p><img src="http://m2.img.srcdd.com/farm5/d/2014/1220/21/4FF7AC7FEE29B29A5944E17DDAE7445B_ORIG_1265_658.gif" alt=""></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[lldb turorial]]></title>
    <link href="http://ytlvy.com/2015/09/27/lldb-turorial/"/>
    <id>http://ytlvy.com/2015/09/27/lldb-turorial/</id>
    <published>2015-09-27T13:21:13.000Z</published>
    <updated>2015-09-27T13:21:41.000Z</updated>
    <content type="html"><![CDATA[<h2 id="lldb_turorial">lldb turorial</h2><h3 id="source">source</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> read_re<span class="string">q(void)</span>&#123;</span><br><span class="line">    char buf[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    gets(buf);</span><br><span class="line">    i = atoi(buf);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> ac, char **av)&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">x</span> = read_re<span class="string">q()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"x=<span class="variable">%d</span>\n"</span>, <span class="keyword">x</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="stack_overflow">stack overflow</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">lldb</span> ./readreq</span><br></pre></td></tr></table></figure>
<p>断点<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span> b read_req</span><br></pre></td></tr></table></figure></p>
<p>启动<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span>process launch</span><br></pre></td></tr></table></figure></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rocess 5148 launched: './readreq' (x86_64)</span><br><span class="line">Process 5148 stopped</span><br><span class="line">* thread #1: tid = 0x31c7c, <span class="number">0x00000001</span><span class="number">00000e90</span> readreq`read_req, queue = 'com.apple.main-thread', stop reason = breakpoint 1.1</span><br><span class="line">    frame #0: <span class="number">0x00000001</span><span class="number">00000e90</span> readreq`read_req</span><br><span class="line">readreq`read_req:</span><br><span class="line">-&gt;  <span class="number">0x100000e90</span> &lt;+0&gt;:  pushq  %rbp</span><br><span class="line">    <span class="number">0x100000e91</span> &lt;+1&gt;:  movq   %rsp, %rbp</span><br><span class="line">    <span class="number">0x100000e94</span> &lt;+4&gt;:  subq   $0xb0, %rsp</span><br><span class="line">    <span class="number">0x100000e9</span>b &lt;+11&gt;: leaq   -0x90(%rbp), %rdi</span><br></pre></td></tr></table></figure>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span> reg read</span><br></pre></td></tr></table></figure>
<p>反编译<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span> di -n read_req</span><br></pre></td></tr></table></figure></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">readreq`read_req:</span><br><span class="line">-&gt;  <span class="number">0x100000e90</span> &lt;+0&gt;:   pushq  %rbp</span><br><span class="line">    <span class="number">0x100000e91</span> &lt;+1&gt;:   movq   %rsp, %rbp</span><br><span class="line">    <span class="number">0x100000e94</span> &lt;+4&gt;:   subq   $0xb0, %rsp</span><br><span class="line">    <span class="number">0x100000e9</span>b &lt;+11&gt;:  leaq   -0x90(%rbp), %rdi</span><br><span class="line">    <span class="number">0x100000</span>ea2 &lt;+18&gt;:  movq   0x167(%rip), %rax         <span class="comment">; (void *)0x00007fff7c355070: __stack_chk_guard</span></span><br><span class="line">    <span class="number">0x100000</span>ea9 &lt;+25&gt;:  movq   (%rax), %rax</span><br><span class="line">    <span class="number">0x100000</span>eac &lt;+28&gt;:  movq   %rax, -0x8(%rbp)</span><br><span class="line">    <span class="number">0x100000</span>eb0 &lt;+32&gt;:  callq  <span class="number">0x100000f52</span>               <span class="comment">; symbol stub for: gets</span></span><br><span class="line">    <span class="number">0x100000</span>eb5 &lt;+37&gt;:  leaq   -0x90(%rbp), %rdi</span><br><span class="line">    <span class="number">0x100000</span>ebc &lt;+44&gt;:  movq   %rax, -0xa0(%rbp)</span><br><span class="line">    <span class="number">0x100000</span>ec3 &lt;+51&gt;:  callq  <span class="number">0x100000f4</span>c               <span class="comment">; symbol stub for: atoi</span></span><br><span class="line">    <span class="number">0x100000</span>ec8 &lt;+56&gt;:  movq   0x141(%rip), %rdi         <span class="comment">; (void *)0x00007fff7c355070: __stack_chk_guard</span></span><br><span class="line">    <span class="number">0x100000</span>ecf &lt;+63&gt;:  movl   %eax, -0x94(%rbp)</span><br><span class="line">    <span class="number">0x100000</span>ed5 &lt;+69&gt;:  movl   -0x94(%rbp), %eax</span><br><span class="line">    <span class="number">0x100000</span>edb &lt;+75&gt;:  movq   (%rdi), %rdi</span><br><span class="line">    <span class="number">0x100000</span>ede &lt;+78&gt;:  cmpq   -0x8(%rbp), %rdi</span><br><span class="line">    <span class="number">0x100000</span>ee2 &lt;+82&gt;:  movl   %eax, -0xa4(%rbp)</span><br><span class="line">    <span class="number">0x100000</span>ee8 &lt;+88&gt;:  jne    <span class="number">0x100000</span>efd               <span class="comment">; &lt;+109&gt;</span></span><br><span class="line">    <span class="number">0x100000</span>eee &lt;+94&gt;:  movl   -0xa4(%rbp), %eax</span><br><span class="line">    <span class="number">0x100000</span>ef4 &lt;+100&gt;: addq   $0xb0, %rsp</span><br><span class="line">    <span class="number">0x100000</span>efb &lt;+107&gt;: popq   %rbp</span><br><span class="line">    <span class="number">0x100000</span>efc &lt;+108&gt;: retq</span><br><span class="line">    <span class="number">0x100000</span>efd &lt;+109&gt;: callq  <span class="number">0x100000f46</span>               <span class="comment">; symbol stub for: __stack_chk_fail</span></span><br><span class="line">    <span class="number">0x100000f02</span> &lt;+114&gt;: nopw   %cs:(%rax,%rax)</span><br></pre></td></tr></table></figure>
<p>读取全部寄存器<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">(lldb) register read</span><br><span class="line">General Purpose Registers:</span><br><span class="line">       rax = 0x5300da<span class="number">66738c8e55</span></span><br><span class="line">       rbx = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">       rcx = <span class="number">0x00007</span>fff5fbff8c0</span><br><span class="line">       rdx = <span class="number">0x00007</span>fff5fbff6c8</span><br><span class="line">       rdi = <span class="number">0x00007</span>fff5fbff5d0</span><br><span class="line">       rsi = <span class="number">0x00007</span>fff5fbff6b8</span><br><span class="line">       rbp = <span class="number">0x00007</span>fff5fbff660</span><br><span class="line">       rsp = <span class="number">0x00007</span>fff5fbff5b0</span><br><span class="line">        r8 = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">        r9 = <span class="number">0x00007</span>fff<span class="number">7c3550c8</span>  atexit_mutex + 24</span><br><span class="line">       r10 = <span class="number">0x00000000</span>ffffffff</span><br><span class="line">       r11 = 0xffffffff<span class="number">00000000</span></span><br><span class="line">       r12 = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">       r13 = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">       r14 = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">       r15 = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">       rip = <span class="number">0x00000001</span>00000eac  readreq`read_req + 28</span><br><span class="line">    rflags = <span class="number">0x00000000</span><span class="number">00000202</span></span><br><span class="line">        cs = <span class="number">0x00000000</span><span class="number">0000002</span>b</span><br><span class="line">        fs = <span class="number">0x00000000</span><span class="number">00000000</span></span><br><span class="line">        gs = <span class="number">0x00000000</span><span class="number">00000000</span></span><br></pre></td></tr></table></figure></p>
<p>读取单个寄存器<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span> re r rax  <span class="list">(<span class="keyword">register</span> read)</span></span><br><span class="line">     rax = <span class="number">0</span>x5300da66738c8e55</span><br></pre></td></tr></table></figure></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(lldb) p/x $<span class="function">rax  <span class="title">ll</span></span><br><span class="line"><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span>)</span> $13 </span>= <span class="number">0x5300da66738c8e55</span></span><br></pre></td></tr></table></figure>
<p>读取寄存器地址的内容<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(lldb) me r -s8 -fx -c4 $rbp   (memory read --size 4 --format x --count 4)</span><br><span class="line">0x7fff5fbff660: <span class="number">0x00007</span>fff5fbff<span class="number">690 0x00</span><span class="number">00000100000</span>f24</span><br><span class="line">0x7fff5fbff670: <span class="number">0x00000000</span><span class="number">00000000 0</span>x<span class="number">00000000000</span>00000</span><br></pre></td></tr></table></figure></p>
<h3 id="参数">参数</h3><ul>
<li>$rdi is the first argument. The object receiving the method invocation in ObjC.</li>
<li>$rsi is the second argument. The selector being sent (aka, the _cmd variable).</li>
<li>$rdx is the third argument. The first argument of an ObjC method invocation if it uses one.</li>
<li>$rcx is the fourth argument. The second argument of an ObjC method.</li>
<li>$r8 is the fifth.</li>
<li>$r9 is the sixth.</li>
</ul>
<p>Further arguments are placed on the stack (relative to the $rbp stack register).</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">$ lldb <span class="comment"># assuming app is already running</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># attach to the application; pauses it</span></span><br><span class="line">lldb&gt; attach MyApp</span><br><span class="line"></span><br><span class="line"><span class="comment"># sets the breakpoint by name</span></span><br><span class="line">lldb&gt; <span class="built_in">break</span> <span class="built_in">set</span> --name <span class="string">'-[MyObject _doSomethingSpecial:]'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># resume the application</span></span><br><span class="line">lldb&gt; cont</span><br><span class="line"></span><br><span class="line"><span class="comment"># do stuff in app to trigger the breakpoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># see assembly at breakpoint</span></span><br><span class="line">lldb&gt; dis</span><br><span class="line"></span><br><span class="line"><span class="comment"># set breakpoint after the function prolog found using dis</span></span><br><span class="line">lldb&gt; <span class="built_in">break</span> <span class="built_in">set</span> --addr <span class="number">0</span>x12345678</span><br><span class="line"></span><br><span class="line"> <span class="comment"># continue to breakpoint we just set</span></span><br><span class="line">lldb&gt; cont</span><br><span class="line"></span><br><span class="line"><span class="comment"># read the registers</span></span><br><span class="line">lldb&gt; reg <span class="built_in">read</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># reads from $rdi register</span></span><br><span class="line"><span class="comment"># and returns [$rdi debugDescription]</span></span><br><span class="line">lldb&gt; po <span class="variable">$rdi</span></span><br><span class="line">&lt;MyObject: <span class="number">0</span>xdeadbeef&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># returns c-type</span></span><br><span class="line">lldb&gt; p <span class="variable">$rdi</span></span><br><span class="line">(unsigned long)<span class="number">0</span>xdeadbeef</span><br></pre></td></tr></table></figure>
<h3 id="签名验证">签名验证</h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">codesign -dvvvv /path/<span class="keyword">to</span>/<span class="type">application</span></span><br><span class="line">codesign -dvvvv Xee³</span><br></pre></td></tr></table></figure>
<p>查看签名<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">ldid</span> -S binary</span><br></pre></td></tr></table></figure></p>
<p>-e是提取其中的entitlements<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldid <span class="operator">-e</span> binary</span><br></pre></td></tr></table></figure></p>
<p>重签名<br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">codesign -f -s (<span class="property">name</span> <span class="keyword">of</span> certificate) /path/<span class="keyword">to</span>/<span class="type">application</span></span><br><span class="line">codesign -f -s Jason Shore /path/<span class="keyword">to</span>/<span class="type">application</span></span><br><span class="line"></span><br><span class="line">codesign <span class="comment">--remove-signature gdb</span></span><br></pre></td></tr></table></figure></p>
<p>调用栈<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword">lldb</span>)</span> bt</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="lldb_turorial">lldb turorial</h2><h3 id="source">source</h3><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> read_re<span class="string">q(void)</span>&#123;</span><br><span class="line">    char buf[<span class="number">128</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    gets(buf);</span><br><span class="line">    i = atoi(buf);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> ac, char **av)&#123;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">x</span> = read_re<span class="string">q()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">printf</span>(<span class="string">"x=<span class="variable">%d</span>\n"</span>, <span class="keyword">x</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS_高效开发之道]]></title>
    <link href="http://ytlvy.com/2015/09/27/iOS-%E9%AB%98%E6%95%88%E5%BC%80%E5%8F%91%E4%B9%8B%E9%81%93/"/>
    <id>http://ytlvy.com/2015/09/27/iOS-高效开发之道/</id>
    <published>2015-09-27T13:20:21.000Z</published>
    <updated>2015-09-27T13:20:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="iOS_高效开发之道">iOS_高效开发之道</h2><h3 id="Xcode常用快捷键">Xcode常用快捷键</h3><h4 id="导航快捷键">导航快捷键</h4><p>command+1-8：</p>
<blockquote>
<p>打开 Project/Symbol/Find/Issue/Test/Debug/Breakpoint/Log 导航栏</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154043952?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>command+0：</p>
<blockquote>
<p>显示/隐藏 左侧 tool panel</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154051609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>option+command+0：</p>
<blockquote>
<p>显示/隐藏 右侧 tool panel</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154138630?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<a id="more"></a>
<p>option+command+1：</p>
<blockquote>
<p>显示 右侧 the file inspector</p>
</blockquote>
<p>option+command+2：</p>
<blockquote>
<p>显示 右侧 quick help inspector</p>
</blockquote>
<p>Option+左键点击操作</p>
<blockquote>
<p>一个快速打开Assistant Editor的方式–只需要按住Option键并点击你想要在当前编辑框右边打开的文件即可。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154202155?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>shift+command+J：</p>
<blockquote>
<p>在项目导航中定位当前文件（Reveal in Project Navigator）。</p>
</blockquote>
<p>command+J：</p>
<blockquote>
<p>焦点切换（Move Focus），可快速定位到编辑界面</p>
</blockquote>
<p>shift+command+Y：</p>
<blockquote>
<p>显示/隐藏 控制台</p>
</blockquote>
<h4 id="搜索快捷键">搜索快捷键</h4><p>Command+Shift+F</p>
<blockquote>
<p>使用项目搜索可以找到某个变量或方法名的被提到的次数。可以依据实例来匹配，并可忽略大小写字母。另外还可以对查找的变量名进行替换。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154229455?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Command + Shift + O</p>
<blockquote>
<p>可以直接跳转到某个方法定义或者指定的代码文件。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154322354?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Control+6</p>
<blockquote>
<p>(键入方法/变量名+Enter跳转）<br>跳转至当前代码文件中的代码行。如果文件中有上千行代码，你可以通过该快捷操作来缩小查找范围，从而在需要的地方插入代码以添加新的功能。</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154254836?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>Control + Command + Up/Down Arrow</p>
<blockquote>
<p>.h 和 .m文件间的快速切换</p>
</blockquote>
<p>Control + 1</p>
<blockquote>
<p>该快捷键可打开’Show Related Items‘弹出菜单’。倘若你已经将光标放在了任何方法中，并点击‘CTRL + 1 ’就可以很方便地通过弹出的视图访问该方法的所有调用者和被调用者。</p>
</blockquote>
<h4 id="运行调试快捷键">运行调试快捷键</h4><p>Command + R</p>
<blockquote>
<p>运行应用程序</p>
</blockquote>
<p>Command + B</p>
<blockquote>
<p>构建应用程序</p>
</blockquote>
<p>Command + .</p>
<blockquote>
<p>停止运行（Stop）</p>
</blockquote>
<p>Command + \</p>
<blockquote>
<p>C前行设置/取消断点；通过鼠标点击蓝色断点来启用/禁用当前行断点。</p>
</blockquote>
<p>Command + Y</p>
<blockquote>
<p>全局激活或禁用所有的断点，激活进入调试模式（此时断点蓝色可见）。</p>
</blockquote>
<p>Command + Shift + K</p>
<blockquote>
<p>清除工程(clean)</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154447905?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<h4 id="编辑快捷键">编辑快捷键</h4><p>command+[/]</p>
<blockquote>
<p>向前/向后缩进</p>
</blockquote>
<p>command+/</p>
<blockquote>
<p>注释选中的代码</p>
</blockquote>
<p>option+command+←/→</p>
<blockquote>
<p>折叠当前代码块 </p>
</blockquote>
<p>option+shift+command+←/→</p>
<blockquote>
<p>折叠该文件内所有代码块（方法/函数）</p>
</blockquote>
<p>option+command+[/]</p>
<blockquote>
<p>Move Line Up/Down</p>
</blockquote>
<p>Ctrl + F</p>
<blockquote>
<p>前移光标</p>
</blockquote>
<p>Ctrl + B</p>
<blockquote>
<p>后移光标</p>
</blockquote>
<p>Ctrl + P</p>
<blockquote>
<p>移动光标到上一行</p>
</blockquote>
<p>Ctrl + N</p>
<blockquote>
<p>移动光标到下一行</p>
</blockquote>
<p>Ctrl + A</p>
<blockquote>
<p>移动光标到本行行首</p>
</blockquote>
<p>Ctrl + E</p>
<blockquote>
<p>移动光标到本行行尾</p>
</blockquote>
<p>Ctrl + T</p>
<blockquote>
<p>交换光标左右两边的字符</p>
</blockquote>
<p>Ctrl + D</p>
<blockquote>
<p>删除光标右边的字符</p>
</blockquote>
<p>Ctrl + K</p>
<blockquote>
<p>删除本行</p>
</blockquote>
<p>Ctrl + L</p>
<blockquote>
<p>将插入点置于窗口正中</p>
</blockquote>
<h3 id="Xcode调试技巧">Xcode调试技巧</h3><h4 id="添加异常断点">添加异常断点</h4><p>有时候在程序出错的时候不能能准确定位到奔溃的那一行代码,而是直接跑到main循环或者Appdelegate里面， 或者会给你这样的提示：</p>
<blockquote>
<p>EXEC_BAD_ACCESS：</p>
</blockquote>
<p>是不是有种想哭的冲动？然而你只需要这样设置全局断点, 它就会自动定位到出错的位置：</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130933043392329.png" alt=""></p>
<h4 id="Enable_NSZombie_Objects（开启僵尸对象）">Enable NSZombie Objects（开启僵尸对象）</h4><p>Enable NSZombie Objects可能是整个Xcode开发环境中最有用的调试技巧。这个技巧非常非常容易追踪到重复释放的问题。该技巧会以非常简洁的方式打印指出重复释放的类和该类的内存地址。</p>
<p>怎么开启僵尸对象呢？首先打开’Edit Scheme’（或者通过热键⌘&lt;），然后选择’Diagnostics’选项卡，勾选Enable NSZombie Objects选项。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130941016986159.png" alt=""></p>
<h4 id="unrecognized_selector_send_to_instancd_快速定位">unrecognized selector send to instancd 快速定位</h4><p>在Debug菜单中Breakpoints-&gt;Create Symbolic Breakpoint</p>
<p><img src="http://blog.objcc.com/wp-content/uploads/2014/05/SymbolicBreakpoint1.png" alt=""></p>
<p>在Symbolic中填写如下方法签名:</p>
<blockquote>
<p>-[NSObject(NSObject) doesNotRecognizeSelector:]</p>
</blockquote>
<p><img src="http://blog.objcc.com/wp-content/uploads/2014/05/SymbolicBreakpoint2.png" alt=""></p>
<p>设置完成后再遇到类似的错误就会定位到具体的代码。</p>
<h4 id="条件断点">条件断点</h4><p>顾名思义, 可以根据你指定的条件执行断点。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130934094487637.png" alt=""></p>
<p>这样只有遍历到 c==“H” 的时候 断点才会被触发。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130934440574197.png" alt=""></p>
<p>至于其他的 ignore, Action 等, 可以自己尝试下, 都是神器。    </p>
<h4 id="Xcode视图调试">Xcode视图调试</h4><p>运行app过程中，按下底部的Debug View Hierarchy 按钮，或者从菜单中选择Debug &gt; View Debugging &gt; Capture View Hierarchy 来启动视图调试。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130948162762093.png" alt=""></p>
<p>启动视图调试后，Xcode会对应用程序的视图层次拍一个快照并展示三维原型视图来探究用户界面的层级。该三维视图除了展示app的视图层次外，还展示每个视图的位置、顺序和视图尺寸，以及视图间的交互方式。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130949366986490.png" alt=""></p>
<p>在Xcode的调试区有9个视图调试过程中要用到的按钮和滑块儿。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130949131986536.png" alt=""></p>
<p>从左到右控件排序：</p>
<ul>
<li>调整视图间距：调整不同视图间的间距。</li>
<li>展示被剪切的内容：当前展示视图中被剪切的部分。</li>
<li>展示约束：展示选中视图的约束。</li>
<li>重置查看区域：将3D渲染透视图恢复至默认状态。</li>
<li>调整查看模式：选择性地展示3D渲染透视图，比如仅展示内容，仅展示框架以及同时展示内容和框架。</li>
<li>缩小：缩小3D渲染透视图</li>
<li>恢复：将3D渲染透视图恢复至默认尺寸。</li>
<li>放大：放大3D渲染透视图</li>
<li>调整可视视图范围：隐藏视图或展示视图，一步步解析3D渲染视图，向左或者向右滑动滑块儿有相反的效果。</li>
</ul>
<h4 id="iOS模拟器调试功能">iOS模拟器调试功能</h4><p>编译并运行应用程序，选中模拟器，从 Debug菜单中选择Color Blended Layers选项。</p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130949572147190.png" alt=""></p>
<p><img src="http://images.cnitblog.com/blog2015/680363/201504/130950081049095.jpg" alt=""></p>
<p>除了标记图层外，还有其他一些有用的功能可帮开发者在iOS模拟器中调试应用。以下是其中一些比较有用的：</p>
<ul>
<li>Toggle Slow Animations in Frontmost App: 选中模拟器，打开Debug菜单选中Toggle Slow Animations in Frontmost App，该功能可以降低app中动画的运行速度，适合调试包含复杂动画的应用程序。也可是使用快捷键Command-T来操作。</li>
<li>Color Copied Images:该选项可以给绘制时被Core Animation复制的图片添加蓝绿色叠加层。</li>
<li>Color Misaligned Images:如果图片边界没有与目标像素完美对齐，该功能可为图片叠加上一层品红色。如果图片使用确定的比例大小绘制，那么该功能会为图片添加一层黄色叠加。</li>
<li>Color Off Screen Rendered:.该选项为离屏渲染内容添加一个黄色的叠加层。 </li>
</ul>
<p>很多开发者会忽略接入电话时应用状态栏的设计问题，你可以通过触发通话中状态栏来简单测试。在iOS模拟器中，从Hardware菜单中选中Toggle In-Call Status Bar。</p>
<h4 id="Quick_Look_Debugging">Quick Look Debugging</h4><blockquote>
<p>自从版本 5 开始，Xcode 在调试器已经附带了快速查看显示。正如你可以在桌面上快速点击空格键来查看文件的内容，在 Xcode 中你可以用可视化的快速查看各种数据类型。</p>
</blockquote>
<p>在我们的 color 变量上按空格键立即给出了一个答案，你脑海中应该马上浮现起了需要 RGB 转化计算：</p>
<p><img src="http://nshipster.s3.amazonaws.com/quicklook-color.gif" alt=""></p>
<p>同时，你还可以直接从代码的调试中调用快速查看。比如下面的方法，buildPathWithRadius(_:steps:loopCount:)。它创造了某种形式的 UIBezierPath，但你已经忘了，而这段代码到底是否工作</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">UIBezierPath</span> *)buildPathWithRadius:(<span class="built_in">CGFloat</span>)radius steps:(<span class="built_in">CGFloat</span>)steps loopCount:(<span class="built_in">CGFloat</span>)loopCount &#123;</span><br><span class="line">    <span class="built_in">CGFloat</span> x, y;</span><br><span class="line">    <span class="built_in">CGFloat</span> away = radius / steps;</span><br><span class="line">    <span class="built_in">CGFloat</span> around = loopCount / steps * <span class="number">2</span> * M_PI;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">UIBezierPath</span> *path = [<span class="built_in">UIBezierPath</span> bezierPath];</span><br><span class="line">    [path moveToPoint:<span class="built_in">CGPointZero</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= steps; i++) &#123;</span><br><span class="line">        x = cos(i * around) * i * away;</span><br><span class="line">        y = sin(i * around) * i * away;</span><br><span class="line"></span><br><span class="line">        [path addLineToPoint:<span class="built_in">CGPointMake</span>(x, y)];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了看到结果，你肯定可以为这个 bezier 路径新建一个自定义视图或画成一个 UIImage。但更好的是，你可以在方法结尾插入一个断点并把鼠标移上去查看 path：</p>
<p><img src="http://nshipster.s3.amazonaws.com/quicklook-spiral.gif" alt=""></p>
<blockquote>
<p>快速查看支持大多数你想要可视化的数据类型。Xcode 已经为你覆盖了以下几种类型：</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>图片</td>
<td>UIImage，NSImage，UIImageView，NSImageView，CIImage，和 NSBitmapImageRep 都可以快速查看。</td>
</tr>
<tr>
<td>颜色</td>
<td>UIColor 和 CGColor。</td>
</tr>
<tr>
<td>字符串</td>
<td>NSString 和 NSAttributedString。</td>
</tr>
<tr>
<td>几何</td>
<td>UIBezierPath 和 NSBezierPath，以及 CGPoint，CGRect，和 CGSize。</td>
</tr>
<tr>
<td>地区</td>
<td>CLLocation 将显示一个很大的，互动的映射位置，并显示高度和精度的细节。</td>
</tr>
<tr>
<td>URLs</td>
<td>NSURL 将显示 URL 所指的本地或远程的内容。</td>
</tr>
<tr>
<td>SpriteKit</td>
<td>SKSpriteNode，SKShapeNode，SKTexture，和 SKTextureAtlas 都会被显示。</td>
</tr>
<tr>
<td>数据</td>
<td>NSData 将漂亮的显示出偏移的十六进制和 ASCII 值。</td>
</tr>
<tr>
<td>视图</td>
<td>最后但并非最不重要的，任何 UIView 子类都将在快速查看弹出框中显示其内容，方便极了。</td>
</tr>
</tbody>
</table>
<h3 id="Objc常用代码片段">Objc常用代码片段</h3><blockquote>
<p>很多 Objective-C 代码其实都没必要去手写，不管是 @interface 声明还是 if (!self) return nil; 之类的咒语。Xcode 代码块可以把这些重复的模式和样板提取出来进行复用。</p>
</blockquote>
<h4 id="使用_Xcode_代码块">使用 Xcode 代码块</h4><p>打开编辑器右侧的工具面板，就能看到所有可用的代码块。在工具面板的下方，有 4 个水平分布的小图标。<br>点击 { } 图标可以查看代码块仓库。</p>
<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-utilties-panel.png" alt=""></p>
<p>有两种方法将一个代码块插入你的代码：</p>
<ol>
<li>你可以从代码块仓库拖到你的编辑器里面：</li>
</ol>
<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-drag-and-drop.gif" alt=""></p>
<ol>
<li>亦或那些有快捷输入码的代码块，你可以这样：</li>
</ol>
<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-text-completion-shortcut.gif" alt=""></p>
<h4 id="创建_Xcode_代码块">创建 Xcode 代码块</h4><p>创建代码块的过程不是非常直观很难用文字去描述。它使用了 OS X 系统中一个比较隐晦的功能，让用户拖拽选中文本生成“剪切文本”。看下实际操作就很好理解：</p>
<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-create.gif" alt=""></p>
<p>用户将自定义的代码块添加到库里面后，可以双击列表中的块去编辑。</p>
<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-editor.png" alt=""></p>
<p>每个块都有以下内容：</p>
<ul>
<li>Title 标题 - 块的名字（出现在代码补全和代码块库列表中）</li>
<li>Summary 简介 - 简单描述下它是干嘛的（只出现在代码块库列表中）</li>
<li>Platform 平台 - 限制可访问该代码块的平台。OS X，iOS，或者（“全部”）</li>
<li>Language 语言 - 限制可访问该代码块的语言。常见的有 C，Objective-C，C++，或 Objective-C++</li>
<li>Completion Shortcut 输入码 - 快捷输入码。常用块的输入码应该非常简练。Xcode 不会警告冲突 / - 重复的输入码，所以一定要确保新添加的不要和已有的冲突。</li>
<li>Completion Scopes 有效范围 - 限制可访问该代码块的范围。if / else 语句的自动补全应该只在方法或者函数的实现中有效。下面这些选项可以任意组合： </li>
</ul>
<blockquote>
<ul>
<li>All 全部</li>
<li>Class Implementation 类实现</li>
<li>Class Interface Methods 类接口方法</li>
<li>Class Interface Variables 类接口变量</li>
<li>Code Expression 代码表达式</li>
<li>Function or Method 函数或方法</li>
<li>Preprocessor Directive 预处理指令</li>
<li>String or Comment 字符串或注释</li>
<li>Top Level 最高层</li>
</ul>
<p>~/Library/Developer/Xcode/UserData/CodeSnippets/目录存放了所有 Xcode 代码段的文件表示</p>
</blockquote>
<h4 id="占位符">占位符</h4><p>在你使用其他代码块时你可能已经注意到了这些占位符：</p>
<p><img src="http://nshipster.s3.amazonaws.com/xcode-snippet-token.png" alt=""></p>
<p>在 Xcode 中，占位符使用 &lt;# 和 #&gt;来分隔，中间是占位文本。<br>赶紧使用占位符给你的代码块添加一点动态效果吧！</p>
<h4 id="第三方_Xcode_代码块">第三方 Xcode 代码块</h4><p>你可以在 这个 <a href="https://github.com/Xcode-Snippets/Objective-C" target="_blank" rel="external">GitHub 项目</a> 找到一些好用的代码块。</p>
<h3 id="Xcode插件">Xcode插件</h3><h4 id="插件安装方式">插件安装方式</h4><ol>
<li>推荐！ 使用Alcatraz安装，commannd + sift + 9 调出图形界面，然后使用搜索插件安装</li>
<li>手动安装：对应有些好的插件，Alcatraz找不到的话，可以手动下载插件包，然后安装。 安装方法：下载附件，解压后放在：你的用户/Library/Application Support/Developer/Shared/Xcode/Plug-ins目录</li>
</ol>
<h4 id="Alcatraz安装">Alcatraz安装</h4><ul>
<li>作用：管理xcode插件</li>
<li>安装：命令行执行：curl -fsSL <a href="https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh" target="_blank" rel="external">https://raw.github.com/supermarin/Alcatraz/master/Scripts/install.sh</a> | sh</li>
<li>删除：rm -rf ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins/Alcatraz.xcplugin</li>
<li>快捷键 command + shift + 9 github地址：<a href="https://github.com/supermarin/Alcatraz" target="_blank" rel="external">https://github.com/supermarin/Alcatraz</a></li>
</ul>
<h4 id="推荐插件">推荐插件</h4><ol>
<li><p>KSImageNamed<br>Xcode资源文件在代码中添加只能感应，例如： [UIImage imageNamed: 会出现项目中的资源文件的智能感应<br>OMColorSense</p>
</li>
<li><p>Xcode 代码中可以通过选择颜色生成uicolor代码<br>使用:先随便写个颜色，然后点击颜色行，改行的右上角会出现色快，点击可以选择颜色。或点击Xcode导航中的Edit-》insert color<br>VVDocumenter-Xcode</p>
</li>
<li><p>Xcode 按三次斜杠（///）后自动生成方法的注释</p>
</li>
<li><p>fuzzyAutocomplete ，hou或是AutoresizeMask-for-Xcode<br>加强版只能感应，只是模糊匹配,必装！</p>
</li>
<li><p>SCXcodeMiniMap<br>类似Sublime Text 右侧的迷你预览图</p>
</li>
<li><p>XToDo<br>代办列表管理<br>支持//TODO: //FIXME: //!!!: //???: 快捷键分别是 ： control + shift + T ,control + shift + X ,control + shift + ! ,control + shift + Q<br>打开list 快捷键control + T</p>
</li>
<li><p>injectionforxcode<br>说明：动态修改app中的样式而不需要重新编译<br>教程：<a href="http://nonomori.farbox.com/post/injection-plugin-for-xcode" target="_blank" rel="external">http://nonomori.farbox.com/post/injection-plugin-for-xcode</a><br>快捷键：control = ：更新代码</p>
</li>
<li><p>XAlign<br>说明：自动对齐代码<br>快捷键：command+shift+X</p>
</li>
<li><p>Code Pilot<br>Xcode查找文件插件<br>快捷键：command+shift+X,建议替换为control+X</p>
</li>
<li><p>CocoaPods<br>CocoaPods插件</p>
</li>
<li><p>Peckham<br>自动import头文件</p>
</li>
<li><p>Dash for Xcode<br>Xcode文档插件</p>
</li>
</ol>
<h3 id="Mac工具">Mac工具</h3><blockquote>
<p>如果你去到一位熟练的木匠的工作室，你总是能发现他/她有一堆工具来完成不同的任务。</p>
<p>软件开发同样如此。你可以从软件开发者如何使用工具中看出他水准如何。有经验的开发者精于使用工具。对你目前所使用的工具不断研究，同时了解一些替代品的使用，当你目前所用的工具无法满足你的需要时可以填补空缺。</p>
</blockquote>
<h4 id="灵感">灵感</h4><ol>
<li><a href="http://pttrns.com/" target="_blank" rel="external">pttrns</a> - 一个很棒的按任务分类的iOS屏幕设计图库。举例来说，如果你想看其他应用如何处理活动feed，在这儿你可以找到一堆的例子。</li>
<li><a href="http://tappgala.com/" target="_blank" rel="external">TappGala</a> - 另一个很棒的优美应用设计的集合站。它不是按任务来分类的，只是一个优秀应用的列表，你可以在此获取灵感。</li>
<li><a href="http://cocoacontrols.com/" target="_blank" rel="external">Cocoa Controls</a> - 一些很棒的你可以用在你的iOS应用中的组件（代码）的列表。有时你可以找到一段优秀代码来节省时间，有时你也可以学习其他开发者是如何完成某个功能的。订阅他们的每周一报吧，都是精华，极少糟粕。</li>
<li><a href="http://www.iicns.com/" target="_blank" rel="external">IICNS</a> - 真正优秀图标的集合。获取灵感吧，但不要抄袭。</li>
<li><a href="http://www.dribbble.com/search?q=ios" target="_blank" rel="external">Dribbble</a> - 最优秀的设计师们在上面展示他们的作品。真正的精品。</li>
<li><a href="http://capptivate.co/" target="_blank" rel="external">Capptivate</a> - 给人灵感的设计作品图库。有些带有动画。感谢你，@joaopmaia！</li>
</ol>
<h5 id="设计">设计</h5><ul>
<li><a href="http://celestialteapot.com/mocks" target="_blank" rel="external">Mocks</a> ($) 一个简单应用的快速创建iOS应用原型的工具。自带一些默认控件，你可以快速搭建原型。</li>
<li><a href="http://giveabrief.com/" target="_blank" rel="external">Briefs</a> ($) 一个很有用的应用，可以让你创建应用原型，将原型连起来形成交互。你可以部署到真实设备上，看看在你手上是什么样的感觉。</li>
<li><a href="http://www.flyingmeat.com/acorn/" target="_blank" rel="external">Acorn</a> ($) Photoshop的有力竞争者，比ps便宜多了。我发现自己最近用Photoshop越来越少了。该项目在积极的开发维护中。</li>
<li><a href="http://www.bohemiancoding.com/sketch/" target="_blank" rel="external">Sketch</a> ($)一个基于矢量的画图工具，随着屏幕尺寸和像素密度的改变，这个工具越来越有用。只需要设计一次，然后可以根据需要进行缩放。同时还带有一- 个很强大的导出系统。对于Sketch示例项目，请看Sketchmine。我的 screencast on Sketch上有视频演示。</li>
<li><a href="http://www.teehanlax.com/tools/ios7/" target="_blank" rel="external">iOS 7 PSD by Teehan+Lax</a>如果你（或者你的设计师）用Photoshop的话，这是个超有用的资源。也有 iOS 6版本的。</li>
<li><a href="http://bjango.com/articles/actions/" target="_blank" rel="external">Bjango’s Photoshop Actions</a>如果你用Photoshop来设计iOS应用的话绝对能帮你省时间。一次点击即可重设画布大小，缩放200%（或50%），设置全局亮度为90等等。他们的 - 博客中也有许多Photoshop的工作技巧。</li>
<li><a href="http://xscopeapp.com/" target="_blank" rel="external">xScope</a> ($) –一把不可或缺的瑞士军刀，指导，像素放大镜，屏幕度量等等。想知道某个像素点的颜色值？想知道某个Mac应用的一个按钮和窗口之间有多少像- 素？xScope都能帮你。可以看下他们为镜像设计所开发的iPhone应用，看镜像设计在你的苹果设备上是多么的像素完美。</li>
<li><a href="http://glyphish.com/" target="_blank" rel="external">Glyphish</a> ($)一个很赞的有很多你的iOS应用可以使用的高质量图标的集合。苹果提供的内置图标并不多，所有拥有这么一个囊括各种概念的图标集合很有用- 。我还在寻找关于婴儿的一些图标。Glyphish是以包的形式发布的，最新的包里有iOS7的“细线条”图标，当设计iOS7应用的时候很有用。</li>
<li><a href="https://github.com/AlexDenisov/FontasticIcons" target="_blank" rel="external">Fontastic Icons for iOS</a> 一个使用图标字体的开源类集合，例如iOS应用中的Font Awesome。可以在任何像素维度上快速简便的得到一个图标。由于字 体在本质上可以轻松缩放，用这种办法可以很方便的在不同平台使用的图标，而无需根据不同尺寸导出不同的版本。</li>
<li><a href="http://paintcodeapp.com/" target="_blank" rel="external">PaintCode</a> ($) -一个基于向量的画图工具，可以将你的作品导出为Core Graphics源代码。用来学习Core Graphics绘图是非常棒的，同时如果你想要动态绘图也是非常方便。我的screencast on PaintCode上有视屏演示。</li>
<li><a href="https://itunes.apple.com/us/app/edge-insets/id622650418?mt=12" target="_blank" rel="external">Edge Insets</a> ($)  一个帮助你定义可重用图片边距的简单工具。在Mac App Store上有售。</li>
<li><a href="http://www.zambetti.com/projects/liveview/" target="_blank" rel="external">LiveView</a>  一个iOS上的远程屏幕查看器，在你的设备上可以立马轻松地看到你的设计图。谢谢你，@_funkyboy！</li>
<li><a href="http://bjango.com/mac/skalapreview/" target="_blank" rel="external">Skala Preview</a> ($) 另一个很棒的可以在真实设备上快速看到你的设计图的工具。Bjango的朋友们很给力，这个应用物有所值。谢谢你，jn40！</li>
</ul>
<h4 id="源代码控制">源代码控制</h4><ul>
<li>Git - 如果你没有使用源代码控制的话，停下手中的活立马做出改变吧。我使用git做任何事情，我超爱它的。</li>
<li>Kaleidoscope ($) – 最棒的diff/merge工具。三路合并，看着很漂亮。我每天都用。</li>
<li>p4merge - 一个免费的、简陋的Kaleidoscope的替代品。强大的三路合并功能，但找下载链接不容易啊。我每次要找的时候都觉得在他们网站上藏的很深啊。</li>
<li>Git X - 一个简单强大的GUI工具，可以看到git的时间线，轻松简便地实现暂存区提交。我通常在终端上使用git，但当我需要将暂存区的改变做一次提交的时- 候就会想到这个应用。这是原来（已经废弃）的GitX的一个衍生品，我在这个衍生品列表上找到的。</li>
<li>Source Tree - 一个免费功能很全的Git应用。我没用过是因为我喜欢命令行的方式，但如果你喜欢用GUI工具的话，可以看看这个。</li>
</ul>
<h4 id="剖析应用">剖析应用</h4><ul>
<li><a href="http://pmt.sourceforge.net/pngcrush/" target="_blank" rel="external">pngcrush</a> - 这个实用工具可以压缩解压缩PNG文件，当你想那些App Store上应用里的图片时很有用。只要打开iTunes，查看本地应用列表，对图标右键在Finder中打开。然后打开应用，你可以看到一堆PNG文件，但你没法查看它们。使用了pngcrush你可以将它们全部提取出来，然后用预览来查看。</li>
<li><a href="https://github.com/boctor/idev-recipes/tree/master/Utilities/appcrush" target="_blank" rel="external">appcrush.rb</a> - 这个很方便的ruby脚本可以针对所有图片将以上过程自动化。只需将它指向你磁盘上的一个.app文件，它就会将所有图片提取到你桌面上的一个文件夹里。很方便地可以知道你手机上的应用如何完成某些设计的。我的<a href="http://nsscreencast.com/episodes/20-dissecting-apps" target="_blank" rel="external">my screencast on dissecting apps</a>上有视频演示。</li>
<li>Charles ($, 免费功能受限的试用版) – 我不知道它的界面或者图标为何如此丑陋，但是Charles是对于任何开发者来说都非常重要的一个工具。Charles作为一个代理，允许你监视进出你iPhone模拟器的网络流量。你同样可以通过将手机的代理设置为你Mac上正在运行的Charles来监控你设备上的流量。字签名的SSL证书，请求&amp;响应断点，请求/响应查看器，Charles真心是大赞。一个必须拥有的工具。再次，我的dissecting apps上视频演示。</li>
</ul>
<h4 id="编辑器">编辑器</h4><p>我知道你在想什么，难道不是所有iOS开发者都用Xcode吗？答案是大多数都使用。但从我和Xcode的恩恩怨怨来看，我相信很有必要来考虑下有哪些替代品。</p>
<ul>
<li>AppCode - Jetbrains（ReSharper for .NET的制作公司）的一款功能全面的IDE。强大的重构工具和功能可以帮助你更快地写代码。快速识别死代码，当你使用了相关代码时自动插入#import语句，轻松选取变量、方法以及类。我唯一希望的是它能成为Xcode的一个插件。</li>
<li>Vim - 等一下， vim？真的么？确实是真的，有人在vim里做所有的Objective-C开发。我并不是其中之一，但我喜欢用vim开发ruby。就因为如此，我很喜欢…</li>
<li>Xvim - 一个Xcode插件，能使用vim中的keybindings。感觉不错，‘nuff说。</li>
<li>OMColorSense -<em> </em>另一个Xcode插件，当你的光标停留在某个代码行如：[UIColor redColor]上的时候，它会在一小块区域里展示出代码中的颜色。点击颜色选项卡会打开颜色选择器，你在上面做的任何改变都会在代码里得到反映，相应代码改为[UIColor colorWithRed:… green… blue… alpha:… ]。当我开着这个功能写代码，别人看到的时候总是问我：“哇哦！这是啥玩意！”</li>
<li>KSImageNamed - 另一个Xcode插件，可以在你打下[UIImage imageNamed:…]的时候，自动补全bundle中图片的文件名。有了它，就可以避免那些不小心打错图片名导致方法返回nil，然后你花10分钟去检查为什么图片没有展示出来的问题了。</li>
<li>CocoaPods Xcode Plugin - 这个插件增加了一个菜单项可以和CocoaPods交互。如果你不想用命令行的话很有用。</li>
<li>Alcatraz Package Manager - 一个很棒的元插件，可以让你通过轻点鼠标轻松安装其他的Xcode配色方案和插件。</li>
<li>Code Runner ($) – 一个轻量级的代码感知文本编辑器，知道怎么编译和运行多种语言的代码。想快速测试一段Objective-C代码，又不想创建一整个Xcode项目？试试Code Runner吧。</li>
</ul>
<h4 id="文档">文档</h4><p>啊哈，文档，每个人最爱的话题。文档很重要，因此请注意一下，我们可以让你生活变得简单一些。</p>
<ul>
<li>appledoc - 想自动生成苹果官方那样的文档吗？不用再找了。自动在你的项目中定义超链接符号，使用特殊格式的代码注释来提取内容。生成正式文档和HTML网页。</li>
<li>Dash ($) – 一个必须拥有的API文档查看器和代码片段管理器。它很好用，允许你下载并搜索各种语言和框架的API文档，而且速度很快。最快访问文档的方式。为了使搜索更快，我把Dash和Alfred集成起来使用。</li>
</ul>
<h4 id="依赖管理">依赖管理</h4><p>是的，这里只列举了一个工具。我不想引入真正的第三方库列表，因为它们属于完全不同的另一个列表。当我们谈到依赖管理的时候，最最重要的就是：</p>
<p>CocoaPods - 管理Objective-C项目的重要工具。允许你轻松快速地将第三方库集成到你的应用中。它是通过创建另一个静态库工程，然后自动链接到你的工程来实现的。有成千上万个可用的pod，可以轻松地为你的项目增加那些不属于你（或者私有）的第三方库支持。我在我的每个项目里都用了CocoaPods。</p>
<h4 id="诊断调试">诊断调试</h4><p>有时候我们正在开发应用，我们想更好的了解到底发生了什么，修bug或者改善性能。</p>
<ul>
<li>Cocoa Lumberjack - 一个更强大的NSLog，Cocoa Lumberjack提供了高级日志行为，比如记录日志到文件、网络，根据日志级别来筛选（info,debug,warn,error）。在NSScreencast Episode 61中有提到。</li>
<li>DCIntrospect - 当你在模拟器上调试的时候链接到你应用中的超强大的工具。一旦你这么做了，你可以按下空格键来取得一些很有用的视图调试支持。查看屏幕上视图元素的精确维度，打印视图层次，甚至水平或垂直移动视图。</li>
<li>Pony Debugger - 另一个你可以嵌入一个库到你调试版本中的工具，Pony Debugger实际上使用了Chrome的开发工具来查看设备上发出的网络请求，还有一个基本的Core Data浏览器。很难描述，请看我的screencast on Pony - Debugger吧。</li>
<li>Runscope ($) – Runscope是一个网络服务，可以捕捉请求，记录日志，给你关于你的API的有用数据。因为它是个HTTP通道API， 搭建简单，你只需要更换你的主机名就行了。</li>
<li>SimPholders - 快速简单的访问你的模拟器文件夹。根据iOS版本来浏览，然后是应用名，可以直接在Finder中打开文件夹。</li>
<li>Spark Inspector - 在调试模式运行你的应用时，可以用3D来展示调试你的视图层次。这个应用你真的要看到了才会真正明白它的价值。它能帮助你了解你的应用是由哪些视图组成的。它还带有一个通知中心监视器，你可以轻松看到发出了哪些NSNotification，谁在观察它们。另一个监控NSNotification的应用是Reveal。</li>
</ul>
<h4 id="图像">图像</h4><ul>
<li>ImageAlpha - 一个Mac应用，可以让你将24位带透明度的PNG图转成8位的带alpha通道的PNG图。通常8位PNG图不带有alpha通道，因此如果你的图片可以用8位来表示（比如一个单色的按钮）的话，你可以通过把25位PNG转成8位的来节省很多空间。</li>
<li>ImageOptim - 另一个Mac应用，可以压缩PNG图片来节省空间。大多数PNG文件可以省掉几个百分点的大小，有时甚至30%或更多。图片更小意味着应用尺寸更小，运行时加载它们所使用的内存也更小。</li>
<li>Prepo - 一个Mac上的小应用，可以将图片快速变换为你需要的多个尺寸。只需要拖动一个大图标文件（比如，1024<em>1024）到Prepo，它就会生成512</em>512的iTunesArtwork，114*114的 Icon@2x.png，以及其他的尺寸和文件名。</li>
<li>Slender ($) -一个很棒的应用，可以分析你的应用，找出各种问题，比如缺少视网膜屏的图片，没用到的图片，能压缩的图片。使用Slender去除掉那些没用的图片，可以为你的iPhone应用节省好多空间。</li>
</ul>
<h4 id="后台服务">后台服务</h4><p>最终你的iOS应用很可能会和服务器通信分享数据、获取新内容、发送推送通知等等。虽然你都可以手动去做，但你或许想要更方便的解决方案。</p>
<ul>
<li>Helios - Helios是一个开源的框架，为iOS应用提供了基础的后台服务，从数据同步、推送通知到应用内购买以及passbook集成。它建立在许多开源ruby gem的基础上，因此如果你想要的话可以挑选构建你自己的栈。看一下Nomad CLI，有很多好用的相关工具。</li>
<li>Windows Azure Mobile Services - 你可以把它想象成在云端的一个可编程数据库。建表，用JavasScript来读取、插入、删除，增加额外的功能。实现推送通知相当简单。</li>
<li>Urban Airship - 我现在在用Urban Airship来实现推送通知。很容易集成，用户量不大的话是免费的。</li>
<li>Parse - 这是另一个云端数据服务，但是它提供了很多API以及有一个在线数据浏览器。我们一个很小的应用用了Parse，感觉不错。</li>
</ul>
<h4 id="分析">分析</h4><p>这里还有些别的选择，但没有一个让我觉得有冲动把flurry换掉的。我乐于听取意见，欢迎在评论里告诉我吧。</p>
<p>Flurry - 我用flurry很长时间了，它可以提供用户使用我的应用的有用的分析数据。想知道什么时候可以停止支持iOS5么？Flurry会给你数据供你们讨论。</p>
<h4 id="部署">部署</h4><ul>
<li>Deploymate ($) – 还需要支持iOS4，但是你在用iOS6 SDK编译？当你使用了一些在你的部署目标上不存在的符号时，Deploymate会警告你的。</li>
<li>Cupertino - Nomad CLI工具之一，Cupertino为你提供了命令行接口来管理苹果Provisioning Portal上的设备及profile。举例来说，只要键入ios devices:list就可以看到你帐号里的当前设备列表。可以用来自动化许多过程。</li>
<li>Hockey App ($) – 管理你ad-hoc版本发布的不错服务。测试人员可以得到一个链接，无线安装新的测试版本。它还提供了健壮的崩溃报告功能，你可以轻松应对你应用中的崩溃。</li>
<li>TestFlight - 一个类似于Hockey App的免费应用。我们使用TestFlight已经取得了很大成功，轻松发布应用，从用户那收集反馈。我唯一希望他们能对这个服务进行收费。它还包括了分析和崩溃报告功能，但我们没有用到那些功能。</li>
<li>iOS Simulator Cropper - 一个拍模拟器屏幕快照的简单方法，可以选择带或者不带状态栏，带或者不带机器外壳等等。对于App Store或者普通市场上的一些截屏很有用。</li>
<li>Status Magic ($) – 拍出更好的app store截屏图。没有什么比App Store上带有低电量或者低信号标识的截屏图更让你的应用看起来糟糕的了。Status Magic让你充分定制你的状态栏，包括去除一些元素，把时间改成苹果喜欢的“9:41 AM”那样，等等。</li>
<li>Crashlytics -对于你正在开发中的应用来说是个很棒的崩溃报告工具。在发布版里自动上传dSYM文件，因此你的崩溃日志会为你自动符号化并组织好，你可以专注于最关键的部分。</li>
</ul>
<h4 id="测试">测试</h4><p>我认为我们作为一个社区对测试关注得还不够。有很多不错的工具可用，大多数都很好用，我们没有借口不为我们的应用写一些测试。</p>
<ul>
<li>Kiwi - 一个不错的Rspec风格的iOS测试框架。基于SenTestingKit建立，因此你只需按下⌘U来运行你的用例。它同样带有健壮的mocking以及stubbing库和断言。</li>
<li>Specta -一个类似于Kiwi的轻量级BDD框架，但是它的expectation语法有一个比Kiwi好的地方：每个变量都隐式装箱：expect(items.count).to.equal(5)。不需要像Kiwi那样将5包装成NSNumber。和Expecta搭配使用效果更好。</li>
</ul>
<p>以下的几个都可以用来执行端到端的验收测试。这些测试会和你的界面交互，点击按钮，滚动，等等。虽然上它们运行会比较慢，但是在大范围内测试会更容易看到所有的模块整合的是否良好。</p>
<ul>
<li>KIF</li>
<li>Calabash</li>
<li>Zucchini</li>
<li>Frank</li>
<li>Bwoken</li>
</ul>
<h4 id="应用分析">应用分析</h4><p>你当然想要知道你的应用能赚多少钱，不是么？有一些解决方案，这儿有些还不错的：</p>
<ul>
<li>App Viz 2 ($) – 一个很有用的Mac应用，可以跟踪你应用的销量。你在本地运行它，它会登录并下载你的销售报告。</li>
<li>App Annie - 一个在线的销售报告工具。我不太乐意把我的认证信息交给除了iTunes以外的第三方，但它确实能确保你的报告是最新的，你无需在本地运行一个程序。在评论中，Josh Brown建议可以创建另一个用户用于iTunes Connect中的分析，这个主意不错。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="iOS_高效开发之道">iOS_高效开发之道</h2><h3 id="Xcode常用快捷键">Xcode常用快捷键</h3><h4 id="导航快捷键">导航快捷键</h4><p>command+1-8：</p>
<blockquote>
<p>打开 Project/Symbol/Find/Issue/Test/Debug/Breakpoint/Log 导航栏</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154043952?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>command+0：</p>
<blockquote>
<p>显示/隐藏 左侧 tool panel</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154051609?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>
<p>option+command+0：</p>
<blockquote>
<p>显示/隐藏 右侧 tool panel</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20150109154138630?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaGl0d2h5bHo=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt=""></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Protocol Pattern]]></title>
    <link href="http://ytlvy.com/2015/09/27/iOS-Protocol-Pattern/"/>
    <id>http://ytlvy.com/2015/09/27/iOS-Protocol-Pattern/</id>
    <published>2015-09-27T13:19:07.000Z</published>
    <updated>2015-09-27T13:19:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="iOS_Protocol_Pattern">iOS Protocol Pattern</h2><h3 id="协议">协议</h3><p>ZOCFeedParserProtocol.h<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">ZOCFeedParserProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span> &lt;ZO<span class="built_in">CFeedParserDelegate</span>&gt; delegate;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSURL</span> *url;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">BOOL</span>)start;</span><br><span class="line">- (<span class="keyword">void</span>)stop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">ZOCFeedParserDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></span><br><span class="line"><span class="keyword">@optional</span></span><br><span class="line">- (<span class="keyword">void</span>)feedParserDidStart:(<span class="keyword">id</span>&lt;ZO<span class="built_in">CFeedParserProtocol</span>&gt;)parser;</span><br><span class="line">- (<span class="keyword">void</span>)feedParser:(<span class="keyword">id</span>&lt;ZO<span class="built_in">CFeedParserProtocol</span>&gt;)parser didParseFeedInfo:(ZO<span class="built_in">CFeedInfoDTO</span> *)info;</span><br><span class="line">- (<span class="keyword">void</span>)feedParser:(<span class="keyword">id</span>&lt;ZO<span class="built_in">CFeedParserProtocol</span>&gt;)parser didParseFeedItem:(ZO<span class="built_in">CFeedItemDTO</span> *)item;</span><br><span class="line">- (<span class="keyword">void</span>)feedParserDidFinish:(<span class="keyword">id</span>&lt;ZO<span class="built_in">CFeedParserProtocol</span>&gt;)parser;</span><br><span class="line">- (<span class="keyword">void</span>)feedParser:(<span class="keyword">id</span>&lt;ZO<span class="built_in">CFeedParserProtocol</span>&gt;)parser didFailWithError:(<span class="built_in">NSError</span> *)error;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure></p>
<h3 id="协议实现">协议实现</h3><p>ZOCFeedParser<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">ZOCFeedParser </span>: NSObject &lt;ZOCFeedParserProtocol&gt;</span><br><span class="line"></span><br><span class="line">- (id)<span class="attribute">initWithURL</span>:(NSURL *)url;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<h3 id="调用">调用</h3><p>ZOCTableViewController<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@interface</span> <span class="attribute">ZOCTableViewController </span>: UITableViewController &lt;ZOCFeedParserDelegate&gt;</span><br><span class="line"></span><br><span class="line">- (instancetype)<span class="attribute">initWithFeedParser</span>:(id&lt;ZOCFeedParserProtocol&gt;)feedParser;</span><br><span class="line"></span><br><span class="line"><span class="variable">@end</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>the view controller can now accept any object that provide some information via the delegate property: this can be a RSS remote feed parser, a local one, a service that read other types of data remotely or even a service that fetch data from the local database;</li>
<li>the feed parser object can be totally reused (as it was before after the first refactoring step);</li>
<li>ZOCFeedParser and ZOCFeedParserDelegate can be reused by other components;</li>
<li>ZOCViewController (UI logic apart) can be reused;</li>
<li>it is easier to test as it’d be possible to use a mock object conforming to the expected protocol.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="iOS_Protocol_Pattern">iOS Protocol Pattern</h2><h3 id="协议">协议</h3><p>ZOCFeedParserProtocol.h<br><figure class="highlight objectivec"]]>
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Integer Promotion]]></title>
    <link href="http://ytlvy.com/2015/09/27/Integer-Promotion/"/>
    <id>http://ytlvy.com/2015/09/27/Integer-Promotion/</id>
    <published>2015-09-27T13:18:17.000Z</published>
    <updated>2015-09-27T13:18:42.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Integer_Promotion">Integer Promotion</h2><p>Almost every programmer has learned about C, and a lot of them use it for their career. It is certainly one of the most popular programming languages on TIOBE (first place in November 2012). Yet, C can be really tricky and behave unexpectedly sometimes. One of those dodgy side of C is integer promotion. See the following example that illustrate the issue:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a==b; <span class="comment">// true, or false?</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C: %d\n"</span>,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You might think the output is 1, yet the answer is 0. Oops.</p>
<a id="more"></a>
<h3 id="C99_SPEC">C99 SPEC</h3><p>In the prior implementation of K&amp;R and C89, arithmetic operands on short and char fell into two major camps and may produce different results from the above C snippet. In C99, integer promotion is clearly defined in following rule (6.3.1.1):</p>
<blockquote>
<p>If an int can represent all values of the original type, the value is converted to an int; otherwise, it is converted to an unsigned int. These are called the integer promotions. All other types are unchanged by the integer promotions.</p>
</blockquote>
<p>Recall that the range of integer types:</p>
<ul>
<li>signed char: -127 to 127</li>
<li>unsigned char: 0 to 255</li>
<li>signed short: -32767 to 32767</li>
<li>unsigned short: 0 to 65535</li>
<li>signed int: -2147483647 to 2147483647</li>
</ul>
<p>You can see that signed and unsigned char, short all can be represented in signed int, so they are all converted to signed int when doing arithmetic operations.</p>
<p>In the previous example, <code>unsigned char a = 0xff</code> is presenting 255. However, <code>char b = 0xff</code> is presenting -1. When both converted to int type, <code>a</code> remains 255, or <code>0x000000ff</code>; <code>b</code> will be <code>0xffffffff</code> which is -1 represented in int type. You can see how it works in this C snippet:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">0xff</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"A: %08x, B: %08x\n"</span>, a, b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The output would be:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">A:</span> <span class="number">000000</span>ff, <span class="string">B:</span> ffffffff</span><br></pre></td></tr></table></figure></p>
<p>This is why the result of expression a==b is 0.</p>
<h3 id="Understand_it_at_assembly_level">Understand it at assembly level</h3><p>When I first understood integer promotion rules, I got even more confused: why is this rule so awkward? To understand why it is designed like so, you must dig into compiled assembly code.</p>
<p>Let’s start with an easy example:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a + b;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The compiled assembly is:</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">movl    <span class="variable">$0</span>, -<span class="number">4</span>(<span class="variable">%rbp</span>)        <span class="comment"># The return value of main is 0</span></span><br><span class="line">movb    <span class="variable">$-</span><span class="number">1</span>, -<span class="number">5</span>(<span class="variable">%rbp</span>)       <span class="comment"># unsigned char a = 0xff;</span></span><br><span class="line">movb    <span class="variable">$-</span><span class="number">1</span>, -<span class="number">6</span>(<span class="variable">%rbp</span>)       <span class="comment"># char b = 0xff;</span></span><br><span class="line">movzbl  -<span class="number">5</span>(<span class="variable">%rbp</span>), <span class="variable">%eax</span></span><br><span class="line">movsbl  -<span class="number">6</span>(<span class="variable">%rbp</span>), <span class="variable">%ecx</span></span><br><span class="line">addl    <span class="variable">%eax</span>, <span class="variable">%ecx</span>          <span class="comment"># int c = a + b</span></span><br><span class="line">movl    <span class="variable">%ecx</span>, -<span class="number">12</span>(<span class="variable">%rbp</span>)     <span class="comment"># store c onto the stack</span></span><br><span class="line">movl    -<span class="number">4</span>(<span class="variable">%rbp</span>), <span class="variable">%eax</span></span><br><span class="line">popq    <span class="variable">%rbp</span></span><br><span class="line">ret                         <span class="comment"># return value 0 from eax</span></span><br></pre></td></tr></table></figure>
<p>If you are not familiar with GAS syntax, you can check out  <a href="https://en.wikibooks.org/wiki/X86_Assembly/GAS_Syntax" target="_blank" rel="external">X86 Assembly/GAS Syntax</a>. GAS assembly instructions are generally suffixed with the letters “b”, “s”, “w”, “l”, “q” or “t” to determine what size operand is being manipulated.</p>
<ul>
<li>b = byte (8 bit)</li>
<li>s = short (16 bit integer) or single (32-bit floating point)</li>
<li>w = word (16 bit)</li>
<li>l = long (32 bit integer or 64-bit floating point)</li>
<li>q = quad (64 bit)</li>
<li>t = ten bytes (80-bit floating point)</li>
</ul>
<p>GAS convention is to push parameter from left-to-right. For instance, movl $0, -4(%rbp) means to move 0x00000000 to address -4(%rbp).</p>
<p>The instruction movzbl means moving a byte to long (32 bit int) with zero fill. movzbl -5(%rbp), %eax take 0xff to %eax and fill the rest with zero. %eax is now 0x000000ff.</p>
<p>The instruction movsbl means moving a byte to long with signed fill. movsbl -6(%rbp), %ecx take 0xff to %eax and fill the rest with signed value, which will cause %ecx to be 0xffffffff. Finally, addl %eax, %ecx do the add operation, and movl %ecx, -12(%rbp) store the result onto the stack.</p>
<p>Now, you understand that integer promotion is a rule how C types being mapped directly to machine instructions. All arithmetics operands are applied to smaller integers after they are transformed into int with signed or unsigned fill. You can think it this way: though short and char are stored in one or two byte, they are treated as int when you use it with arithmetic operations. The rule how they are transformed to int is called integer promotion.</p>
<h3 id="What_is_type_systems">What is type systems</h3><p>Type is the methods that interpret and process your data. Sounds familiar to OOP? Definiing a class IS defining a method. In C, expressions on different data type produces different instructions. What instruction to generate? Depends on the data type. (int is different than float, for example).</p>
<p>A chunk of data in memory or register can mean anything on a CPU. The type system defines how operators works on different types. Given the example below:</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="number">0x00007ffffffffcc0</span>;</span><br><span class="line"><span class="keyword">int</span>  i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span>* q = p + i; <span class="comment">// =&gt; 0x00007fffffffffcc4 because the type "pointer to int"</span></span><br><span class="line">                <span class="comment">// defines the multiplier of the offset is 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* r = p + q; <span class="comment">// Invalid in C type system.</span></span><br></pre></td></tr></table></figure>
<p>When adding an integer to a pointer, the compiler knows the offset multiplier by the type of the pointer points to. If <code>p</code> where defined as <code>char* p</code>, then the multiplier would be 1. Also, the <code>+</code> operator only make sense to add an offset to a pointer, therefore adding two pointer together is invalid in C syntax.</p>
<h3 id="Review_C_integer_promotion_rules">Review C integer promotion rules</h3><p>The standard integer promotion rules in C99 is listed below</p>
<blockquote>
<p>If an int can represent all values of the original type, the value is converted to an int; otherwise, it is converted to an unsigned int. These are called the integer promotions. All other types are unchanged by the integer promotions.</p>
</blockquote>
<p>This is called value preserving. On machine level, the arithmetic works best on a whole register (or 32 bit register). Remember that C’s philosophy is to make your program runs as fast as possible, so it loads your small data chunk into the whole register, then do the calculation.</p>
<p>However, things worked differently on K&amp;R C. It’s was defined as unsigned preserving. When mixing a signed and unsigned integer, the result is unsigned type. Below is the example copied from Expert C Programming book.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( -<span class="number">1</span> &lt; (<span class="keyword">unsigned</span> <span class="keyword">char</span>) <span class="number">1</span> ) &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"C dialect after ANSI C, including C89, C99, and after\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Pre ANSI C (K&amp;R) dialect. -1 is treated as unsigned value 0xFFFFFFFF and thus greater than 1 ! \n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mixing_unsigned_and_signed_integer_in_modern_C">Mixing unsigned and signed integer in modern C</h3><p>Although most of the time C will preserve the value of the type for you, you can still get surprising result. When the signed integer can’t hold the unsigned value, everything is converted to unsigned integer.</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( -<span class="number">1</span> &lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>) ) &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"-1 is less than 4\n"</span>);</span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"-1 is treated as 0xffffffff. Because sizeof returns size_t which is an unsigned int\n"</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>
<p>This program will execute the else branch and print:<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">1</span> <span class="keyword">is</span> treated <span class="keyword">as</span> <span class="number">0xffffffff</span>. Because <span class="keyword">sizeof</span> returns size_t which <span class="keyword">is</span> an unsigned <span class="keyword">int</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Conclusion">Conclusion</h3><p>Always be careful when you mix unsigned and signed integer in expressions. When possible, type cast it to signed int. C is designed to make program fast, but not safe for beginners. Additional checks would create a lot of overhead in the runtime, so the developer need to know the system and language well to avoid shooting at their own foot. Another possible reason may be that the original C developers were all operating system writers and compiler writers. Therefore, the mappings between Assembly and C langauge is straight forward to them.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Integer_Promotion">Integer Promotion</h2><p>Almost every programmer has learned about C, and a lot of them use it for their career. It is certainly one of the most popular programming languages on TIOBE (first place in November 2012). Yet, C can be really tricky and behave unexpectedly sometimes. One of those dodgy side of C is integer promotion. See the following example that illustrate the issue:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> a = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">char</span> b = <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">int</span> c = a==b; <span class="comment">// true, or false?</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"C: %d\n"</span>,c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You might think the output is 1, yet the answer is 0. Oops.</p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Crash example]]></title>
    <link href="http://ytlvy.com/2015/09/27/Crash-example/"/>
    <id>http://ytlvy.com/2015/09/27/Crash-example/</id>
    <published>2015-09-27T13:17:17.000Z</published>
    <updated>2015-09-27T13:18:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Crash_Bug">Crash Bug</h2><p>1) ios7 下没有 <code>ContainString</code> API</p>
<p>2) NSDictionary &amp; NSArray nil insert </p>
<p>3) 数组越界 NSArray <code>out of bounds</code></p>
<p>4) <code>substringwithrange</code> out of bounds</p>
<p>5) <code>GPUImageView presentBufferForDisplay</code> — 内存泄露 或者 app 进入后台</p>
<p>6) <code>locationOfTouch: inView:</code> </p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">if</span> (gestureRecognizer)<span class="tag">numberOfTouches</span> &gt; <span class="tag">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>7) “[NSPlaceholderMutableString initWithString:]: nil argument” - NSString的<code>initWithString:</code>或者<code>stringWithString:</code> 传入了 nil 参数</p>
<p>8) 调用为 nil 的block<br><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="comment">(block)</span> &#123;</span><br><span class="line">    block<span class="comment">()</span>;    <span class="comment">//确定不为空之后才放心地调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>9) 调用了不存在的方法<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">if</span> ([a <span class="attribute">respondsToSelector</span>:<span class="variable">@selector</span>(aaa)]) &#123;</span><br><span class="line">    <span class="attr_selector">[a aaa]</span>;            <span class="comment">//确定有该方法之后才放心地调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10) 在cellForRowAtIndexPath中返回了nil</p>
<p>出现这种情况的原因有：</p>
<p><code>numberOfRowsInSection</code>返回的数目不正确，导致行数比<code>cellForRowAtIndexPath</code>预期的多，于是<code>cellForRowAtIndexPath</code>就不能正确返回超出预期的cell了。<br><code>cellForRowAtIndexPath</code>中逻辑有误，漏了一些情况，导致有些cell不能正确返回。</p>
<p>11) NSJSONSerialization 识别失败 为 NSNull </p>
<p>12) <code>tableView:commitEditingStyle:forRowAtIndexPath:</code> indexPath 传入了 nil. </p>
<blockquote>
<p>Check for a nil indexPath in tableView: commitEditingStyle: forRowAtIndexPath:, even though Apple doesn’t document it as possible. from <a href="https://twitter.com/tewha/status/469537407801368576" target="_blank" rel="external">@tewha</a><br><a href="http://www.openradar.appspot.com/16386709" target="_blank" rel="external">tableView:commitEditingStyle:forRowAtIndexPath is called with indexPath == nil when deleting</a> </p>
</blockquote>
<p>13) dismissViewControllerAnimated crash<br>if (![self isBeingDismissed]) {<br>    [self dismissViewControllerAnimated:YES completion:^{<br>    }];<br>}</p>
<p>14) gpus_ReturnNotPermittedKillClient 错误 </p>
<blockquote>
<p>Anytime you see gpus_ReturnNotPermittedKillClient in a stack trace, you’re most likely being killed for trying to render OpenGL ES content while your application is in the background or is transitioning to the background. To avoid this, you’ll want to make sure that the camera feed is suspended as soon as your application is notified that it is going to the background and resume when you come back to the foreground.</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)observeGlobalNotifications</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(onApplicationWillResignActive) name:<span class="built_in">UIApplicationWillResignActiveNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span> selector:<span class="keyword">@selector</span>(onApplicationDidBecomeActive) name:<span class="built_in">UIApplicationDidBecomeActiveNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)unobserveGlobalNotifications</span><br><span class="line">&#123;</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationWillResignActiveNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">    [[<span class="built_in">NSNotificationCenter</span> defaultCenter] removeObserver:<span class="keyword">self</span> name:<span class="built_in">UIApplicationDidBecomeActiveNotification</span> object:<span class="literal">nil</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onApplicationWillResignActive</span><br><span class="line">&#123;     </span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.camera</span> pauseCameraCapture];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.camera</span> stopCameraCapture];</span><br><span class="line"></span><br><span class="line">    runSynchronouslyOnVideoProcessingQueue(^&#123;</span><br><span class="line">        glFinish();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)onApplicationDidBecomeActive</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.camera</span> resumeCameraCapture];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.camera</span> startCameraCapture];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>15) NSNotification</p>
<ol>
<li>在init 中注册 在dealloc中 注销</li>
<li>在主线程发送</li>
<li>小心 多次注册 不要再viewDidLoad中注册 会导致多次注册</li>
</ol>
<p>16) init dealloc 中不要使用 property 调用 直接用 ivars 调用方式</p>
<p>实例:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)destroy</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.placeholderImage</span> = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>此 set 方法后续调用了另一个方法 该方法设置了一个delegate = self. 但是 self 已经进行释放了 所以 crash</p>
<blockquote>
<p>Cannot form weak reference to instance (0x615000436a00) of class CycleScrollView</p>
</blockquote>
<p>17)  drawing code in an autoreleasepool<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">    <span class="built_in">UIGraphicsBeginImageContext</span>(<span class="keyword">self</span><span class="variable">.view</span><span class="variable">.frame</span><span class="variable">.size</span>);</span><br><span class="line">    [drawImage<span class="variable">.image</span> drawInRect:<span class="built_in">CGRectMake</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.width</span>, <span class="keyword">self</span><span class="variable">.view</span><span class="variable">.frame</span><span class="variable">.size</span><span class="variable">.height</span>)];</span><br><span class="line">    <span class="built_in">CGContextSetLineCap</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>(), k<span class="built_in">CGLineCapRound</span>);</span><br><span class="line">    <span class="built_in">CGContextSetLineWidth</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>(), <span class="number">5.0</span>);</span><br><span class="line">    <span class="built_in">CGContextSetRGBStrokeColor</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>(), <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line">    <span class="built_in">CGContextBeginPath</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>());</span><br><span class="line">    <span class="built_in">CGContextMoveToPoint</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>(), lastPoint<span class="variable">.x</span>, lastPoint<span class="variable">.y</span>);</span><br><span class="line">    <span class="built_in">CGContextAddLineToPoint</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>(), currentPoint<span class="variable">.x</span>, currentPoint<span class="variable">.y</span>);</span><br><span class="line">    <span class="built_in">CGContextStrokePath</span>(<span class="built_in">UIGraphicsGetCurrentContext</span>());</span><br><span class="line">    drawImage<span class="variable">.image</span> = <span class="built_in">UIGraphicsGetImageFromCurrentImageContext</span>();</span><br><span class="line">    <span class="built_in">UIGraphicsEndImageContext</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>18) SDWebImage </p>
<p>didReceiveMemoryWarning<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SDImageCache *imageCache = [SDImageCache sharedImageCache]<span class="comment">;</span></span><br><span class="line">[imageCache clearMemory]<span class="comment">;</span></span><br><span class="line">[imageCache clearDisk]<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>19) NSTimer invalidate</p>
<p>UIView<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-(void)willMoveToSupervie<span class="variable">w:</span>(UIView *)newSuperview - sent immediately before the <span class="keyword">view</span> <span class="keyword">is</span> added <span class="keyword">as</span> <span class="keyword">a</span> subview <span class="keyword">to</span> another <span class="keyword">view</span>; newSuperview may <span class="keyword">be</span> nil when you <span class="built_in">remove</span> the <span class="keyword">view</span> from its superview;</span><br><span class="line">-(void)willMoveToWindo<span class="variable">w:</span>(UIWindow *)newWindow - sent immediately before the <span class="keyword">view</span> (<span class="built_in">or</span> its superview) <span class="keyword">is</span> added <span class="keyword">to</span> <span class="keyword">a</span> window; newWindow may <span class="keyword">be</span> nil when you <span class="built_in">remove</span> the <span class="keyword">view</span> from <span class="keyword">a</span> window;</span><br><span class="line">-(void)didMoveToSuperview - sent immediately after the <span class="keyword">view</span> <span class="keyword">is</span> inserted into <span class="keyword">a</span> <span class="keyword">view</span> hierarchy;</span><br><span class="line">-(void)didMoveToWindow - sent immediately after the <span class="keyword">view</span> gets its window property <span class="keyword">set</span>. -</span><br></pre></td></tr></table></figure></p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="typename">void</span>)<span class="string">willMoveToWindow:</span>(UIWindow *)newWindow &#123;</span><br><span class="line">    [<span class="keyword">super</span> <span class="string">willMoveToWindow:</span>newWindow];</span><br><span class="line">    <span class="keyword">if</span> (newWindow == (id)[NSNull <span class="literal">null</span>] || newWindow == nil) &#123;</span><br><span class="line">        [scrollTimer invalidate];</span><br><span class="line">        <span class="comment">//            scrollTimer = nil;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (scrollTimer &amp;&amp; scrollTimer.isValid) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        scrollTimer = [NSTimer <span class="string">scheduledTimerWithTimeInterval:</span>autoScrollInterval <span class="string">target:</span>self <span class="string">selector:</span><span class="annotation">@selector</span>(showNextHeadImage) <span class="string">userInfo:</span>nil <span class="string">repeats:</span>YES];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>20) couldn’t add the Keychain Item</p>
<p>添加以下配置语句<br><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">self</span>.keychainItemWrapper <span class="built_in">set</span>Object:@<span class="string">"MY_APP_CREDENTIALS"</span> <span class="keyword">for</span>Key:(id)kSecAttrService];</span><br><span class="line">//@<span class="string">"MY_APP_CREDENTIALS"</span> can be <span class="literal">any</span> string.</span><br></pre></td></tr></table></figure></p>
<p>21) SDWebImage 内存问题 </p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[[SDImageCache sharedImageCache]</span> <span class="rule"><span class="attribute">setShouldDecompressImages</span>:<span class="value">NO]</span></span>;</span><br><span class="line"><span class="attr_selector">[[SDWebImageDownloader sharedDownloader]</span> <span class="rule"><span class="attribute">setShouldDecompressImages</span>:<span class="value">NO]</span></span>;</span><br></pre></td></tr></table></figure>
<p>22) 类型转化 防止未知 方法重名 Bug</p>
<p>比如:<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="literal">result</span> = [[someArray objectAtIndex:<span class="number">0</span>] currentPoint];</span><br></pre></td></tr></table></figure></p>
<p>可能导致系统调用 <code>NSBezierPath</code> 的 <code>currentPoint</code> 方法 而不是我们自己的类.修复如下:  引出了 泛类型问题</p>
<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="literal">result</span> = [(<span class="type">MyClass</span> *)[someArray objectAtIndex:<span class="number">0</span>] currentPoint];</span><br></pre></td></tr></table></figure>
<p>23) 过滤控制字符<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">+(NSString *)filterControl:(NSString *)<span class="keyword">source</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> NSArray *controlChars;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> dispatch_once_t once_token;</span><br><span class="line">    </span><br><span class="line">    dispatch_once(&amp;once_token, ^&#123;</span><br><span class="line">        controlChars = @[@<span class="string">"\x00"</span>, @<span class="string">"\x01"</span>, @<span class="string">"\x02"</span>, @<span class="string">"\x03"</span>, @<span class="string">"\x04"</span>, @<span class="string">"\x05"</span>, @<span class="string">"\x06"</span>, @<span class="string">"\x07"</span>, @<span class="string">"\x08"</span>, @<span class="string">"\x09"</span>, @<span class="string">"\x0a"</span>, @<span class="string">"\x0b"</span>, @<span class="string">"\x0c"</span>, @<span class="string">"\x0d"</span>, @<span class="string">"\x0e"</span>, @<span class="string">"\x0f"</span>, @<span class="string">"\x10"</span>, @<span class="string">"\x11"</span>, @<span class="string">"\x12"</span>, @<span class="string">"\x13"</span>, @<span class="string">"\x14"</span>, @<span class="string">"\x15"</span>, @<span class="string">"\x16"</span>, @<span class="string">"\x17"</span>, @<span class="string">"\x18"</span>, @<span class="string">"\x19"</span>, @<span class="string">"\x1a"</span>, @<span class="string">"\x1b"</span>, @<span class="string">"\x1c"</span>, @<span class="string">"\x1d"</span>, @<span class="string">"\x1e"</span>, @<span class="string">"\x1f"</span>, @<span class="string">"\x7f"</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (uint n = <span class="number">0</span>; n &lt; [controlChars <span class="keyword">count</span>]; ++n)</span><br><span class="line">        <span class="keyword">source</span> = [<span class="keyword">source</span> stringByReplacingOccurrencesOfString:[controlChars objectAtIndex:n] withString:@<span class="string">" "</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">source</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dataString = <span class="comment">[dataString stringByTrimmingCharactersInSet:<span class="comment">[NSCharacterSet controlCharacterSet]</span>]</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">[NSCharacterSet whitespaceCharacterSet]</span></span><br><span class="line"><span class="comment">[NSCharacterSet whitespaceAndNewlineCharacterSet]</span></span><br><span class="line"><span class="comment">[NSCharacterSet illegalCharacterSet]</span></span><br><span class="line"><span class="comment">[NSCharacterSet symbolCharacterSet]</span></span><br></pre></td></tr></table></figure>
<p>24) NSString stringWithUtf8String crash NSInvalidArgumentException’, reason: ‘<em>*</em> +[NSString stringWithUTF8String:]: NULL cString’</p>
<p>判定 Utf8String 是否为 NULL </p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Crash_Bug">Crash Bug</h2><p>1) ios7 下没有 <code>ContainString</code> API</p>
<p>2) NSDictionary &amp; NSArray nil insert </p>
<p>3) 数组越界 NSArray <code>out of bounds</code></p>
<p>4) <code>substringwithrange</code> out of bounds</p>
<p>5) <code>GPUImageView presentBufferForDisplay</code> — 内存泄露 或者 app 进入后台</p>
<p>6) <code>locationOfTouch: inView:</code> </p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">if</span> (gestureRecognizer)<span class="tag">numberOfTouches</span> &gt; <span class="tag">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CoreAudio base]]></title>
    <link href="http://ytlvy.com/2015/09/27/CoreAudio-base/"/>
    <id>http://ytlvy.com/2015/09/27/CoreAudio-base/</id>
    <published>2015-09-27T13:01:47.000Z</published>
    <updated>2015-09-27T13:16:36.000Z</updated>
    <content type="html"><![CDATA[<h1 id="CoreAudio_-&gt;_基本知识">CoreAudio -&gt; 基本知识</h1><p>自从开始Cocoa编程到现在，总会有人问，iOS，Mac有哪些框架，Cocoa与Cocoa Touch有什么区别？苹果官网早有详细的介绍,见 Mac iOS</p>
<p>最近在研究CoreAudio&gt;AudioUnit.framework音频处理部分，这部分内容文档少的可怜，可参照的内容有《CoreAudio Overview Mac/iOS》，Sample Code, WWDC, Apple Mailing List. 剩下的就只剩头文件注释和函数返回的错误码了。就像解密一样，如果你知道什么是成功，然后再有较为完备的试错方案，那你离成功应该不远了，剩下的只是时间的问题。</p>
<p>查文档的时候，有些内容Google一下，甚至只有几页内容。大部分时候都是连续打开20几个链接，却很少发现有价值的内容。有些算法相当神奇，听都没听过，更遗憾的是，我的笨拙的耳朵完全无法区分这对音频有哪些影响。但还是对音频有一定的理解,总结如下：</p>
<h2 id="基本术语">基本术语</h2><ul>
<li><strong>Sample(采样)</strong>：某个频道中单次捕获的音频数值（如图，单个紫色方块）</li>
<li><strong>Frame(一帧)</strong>：同一时间不同声道获取的采样值，例如，对于双声道，一帧包含两个数字，左声道和右声道（如图，第一列的多个声道中的3个紫色方块）</li>
<li><strong>Packet(包)</strong>：由一个或多个连续帧(Frame)组成, 在线性PCM中，一包总是只包含一帧，但对于其他压缩格式，一包要包含多个帧</li>
<li><strong>Sample Rate(采样率)</strong>：单个声道一秒内有多少个采样(如图，每个声道一秒内有多少个紫色方块)，例如，CD的采样率为44.1KHz(samples / sec) </li>
<li><strong>Bit Depth(位深)</strong>：采样值用多少位的数字来表示，例如CD的采样值用16-bit整形来表示 (bits / sample) </li>
<li><strong>Bit rate(比特率)</strong> = <strong>Bit_Depth x Sample_Rate (bits / sec</strong>) PCM bit rate is constant while oompressed format often usae a variable bit rate</li>
</ul>
<a id="more"></a>
<p><img src="http://deanmon-blogmedia.stor.sinaapp.com/ios_core_audio_pcm_concepts.png" alt=""></p>
<h2 id="What_is_linear(什么是线性的)？">What is linear(什么是线性的)？</h2><p>在线性PCM数据中，表示声源信息的采样值是线性变化的，例如，标准CD采用16-bit来表示声源信息，一共有65，536中可能的值，来表示无声和最大值，如同日常的楼梯一样，每个相邻的差值总是相同的。</p>
<h2 id="CoreAudio音频格式-AudioStreamBasicDescription(ASBD)">CoreAudio音频格式-AudioStreamBasicDescription(ASBD)</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ASBD描述音频基本信息(采样率，数据格式，包大小, 声道等)</span></span><br><span class="line"><span class="keyword">struct</span> AudioStreamBasicDescription</span><br><span class="line">&#123;</span><br><span class="line">    Float64 mSampleRate;</span><br><span class="line">    <span class="built_in">UInt32</span>  mFormatID;</span><br><span class="line">    <span class="built_in">UInt32</span>  mFormatFlags;</span><br><span class="line">    <span class="built_in">UInt32</span>  mBytesPerPacket;</span><br><span class="line">    <span class="built_in">UInt32</span>  mFramesPerPacket;</span><br><span class="line">    <span class="built_in">UInt32</span>  mBytesPerFrame;</span><br><span class="line">    <span class="built_in">UInt32</span>  mChannelsPerFrame;</span><br><span class="line">    <span class="built_in">UInt32</span>  mBitsPerChannel;    <span class="comment">//对于压缩音频格式, 若BitsPerChannel非固定值时,0</span></span><br><span class="line">    <span class="built_in">UInt32</span>  mReserved;          <span class="comment">//总是0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AudioStreamBasicDescription  AudioStreamBasicDescription;</span><br></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对于一些压缩格式没有固定的包大小，则需要以下数据结构</span></span><br><span class="line"><span class="keyword">struct</span>  AudioStreamPacketDescription &#123;</span><br><span class="line">    SInt64  mStartOffset;             <span class="comment">//起始偏移量</span></span><br><span class="line">    <span class="built_in">UInt32</span>  mVariableFramesInPacket;  <span class="comment">//包中帧数量,若(bit-rate)为固定值时，0</span></span><br><span class="line">    <span class="built_in">UInt32</span>  mDataByteSize;            <span class="comment">//数据字节大小</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> AudioStreamPacketDescription AudioStreamPacketDescription;</span><br></pre></td></tr></table></figure>
<h2 id="Core_Audio_Canonical_Audio_Data_Formats(Core_Audio标准音频格式)：">Core Audio Canonical Audio Data Formats(Core Audio标准音频格式)：</h2><p>标准格式的意义可能是：</p>
<ul>
<li>要求作为数据转换的中转数据格式</li>
<li>该音频格式已被Core Audio优化</li>
<li>若没有指定格式，该标准音频格式为默认格式(实践一些Audio Unit并不是这个默认格式,甚至不支持这个格式)</li>
</ul>
<h3 id="Input/Output(输入输出):">Input/Output(输入输出):</h3><p>OSX: Linear PCM with 32-bit floating point samples<br>iOS: Linear PCM with 16-bit integer samples</p>
<h3 id="Audio_unit_and_audio_processing(音频处理)：">Audio unit and audio processing(音频处理)：</h3><p><strong>AudioFormatFlagsAudioUnitCanonical</strong></p>
<p>OSX: Noninterleaved linear PCM with 32-bit floating point samples<br>iOS: Noninterleaved linear PCM with 8.24-bit fixed-point samples</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AudioStreamBasicDescription</span> </span>&#123;                         </span><br><span class="line">    mSampleRate       = <span class="number">44100.0</span>;                             <span class="comment">//采样率</span></span><br><span class="line">    mFormatID         = kAudioFormatLinearPCM;               <span class="comment">//音频格式Linear PCM         </span></span><br><span class="line">    mFormatFlags      = kAudioFormatFlagsAudioUnitCanonical; <span class="comment">//上述的标准格式</span></span><br><span class="line">    mBytesPerPacket   = <span class="number">1</span> * <span class="built_in">sizeof</span> (<span class="type">AudioUnitSampleType</span>);    <span class="comment">// 8 WTF</span></span><br><span class="line">    mFramesPerPacket  = <span class="number">1</span>;                                   <span class="comment">//Linear PCM每包只有1帧</span></span><br><span class="line">    mBytesPerFrame    = <span class="number">1</span> * <span class="built_in">sizeof</span> (<span class="type">AudioUnitSampleType</span>);    <span class="comment">// 8  WTF</span></span><br><span class="line">    mChannelsPerFrame = <span class="number">2</span>;                                   <span class="comment">// 2个声道</span></span><br><span class="line">    mBitsPerChannel   = <span class="number">8</span> * <span class="built_in">sizeof</span> (<span class="type">AudioUnitSampleType</span>);    <span class="comment">// 32</span></span><br><span class="line">    mReserved         = <span class="number">0</span>;                                   <span class="comment">// 0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="AudioBufferList(Inter-leaved_vs_non-interleaved)">AudioBufferList(Inter-leaved vs non-interleaved)</h2><ul>
<li><strong>Inter-leaved</strong>: 如果一个流数据中包含多个声道，多用于播放(play back)，便于同时读取多个声道信息</li>
<li><strong>Non-interleaved</strong>: 多用于音频处理(DSP), 这样可以专注处理其中某一个声道</li>
</ul>
<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*!</span><br><span class="line">    <span class="doctag">@struct</span>         AudioBufferList</span><br><span class="line">    <span class="doctag">@abstract</span>       A variable length array of AudioBuffer structures.</span><br><span class="line">    <span class="doctag">@field</span>          mNumberBuffers</span><br><span class="line">                        The number of AudioBuffers in the mBuffers array.</span><br><span class="line">    <span class="doctag">@field</span>          mBuffers</span><br><span class="line">                        A variable length array of AudioBuffers.</span><br><span class="line">*/</span></span><br><span class="line">struct AudioBufferList</span><br><span class="line">&#123;</span><br><span class="line">    UInt32      mNumberBuffers;</span><br><span class="line">    AudioBuffer mBuffers[<span class="number">1</span>]; <span class="comment">// this is a variable length array of mNumberBuffers elements</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#if defined(__cplusplus) &amp;&amp; CA_STRICT</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    AudioBufferList() &#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//  Copying and assigning a variable length struct is problematic so turn their use into a</span></span><br><span class="line">    <span class="comment">//  compile time error for eacy spotting.</span></span><br><span class="line">    AudioBufferList(<span class="keyword">const</span> AudioBufferList&amp;);</span><br><span class="line">    AudioBufferList&amp;    operator=(<span class="keyword">const</span> AudioBufferList&amp;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line">    <span class="doctag">@struct</span>         AudioBuffer</span><br><span class="line">    <span class="doctag">@abstract</span>       A structure to hold a buffer of audio data.</span><br><span class="line">    <span class="doctag">@field</span>          mNumberChannels</span><br><span class="line">                        The number of interleaved channels in the buffer.</span><br><span class="line">    <span class="doctag">@field</span>          mDataByteSize</span><br><span class="line">                        The number of bytes in the buffer pointed at by mData.</span><br><span class="line">    <span class="doctag">@field</span>          mData</span><br><span class="line">                        A pointer to the buffer of audio data.</span><br><span class="line">*/</span></span><br><span class="line">struct AudioBuffer</span><br><span class="line">&#123;</span><br><span class="line">    UInt32  mNumberChannels;</span><br><span class="line">    UInt32  mDataByteSize;</span><br><span class="line">    void*   mData;</span><br><span class="line">&#125;;</span><br><span class="line">typedef struct AudioBuffer  AudioBuffer;</span><br></pre></td></tr></table></figure>
<p>Inter-leaved vs non-interleaved:</p>
<p>以双声道为例</p>
<p><img src="http://deanmon-blogmedia.stor.sinaapp.com/ios_core_audio_pcm_concepts_interleaved_versus_noninterleaved.png" alt=""></p>
<h2 id="8-24-Fixed_Point">8.24-Fixed Point</h2><p>一下为音频8-24 fixed-point 转换为float的部分截图</p>
<p><img src="http://deanmon-blogmedia.stor.sinaapp.com/ios_core_audio_pcm_concepts_xcode_memory_snapshot.png" alt=""></p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(lldb) x -s4 -fb -c<span class="number">4 0x04d1</span>c000</span><br><span class="line"><span class="number">0x04d1c00</span>0: <span class="number">0b00000000</span><span class="number">000011000111</span><span class="number">00101000100</span>0</span><br><span class="line"><span class="number">0x04d1c00</span>4: <span class="number">0b00000000</span><span class="number">000000101001</span><span class="number">100111001000</span></span><br><span class="line"><span class="number">0x04d1c00</span>8: <span class="number">0b00000000</span><span class="number">00001101001</span><span class="number">0111001011100</span></span><br><span class="line"><span class="number">0x04d1c00</span>c: <span class="number">0b00000000</span><span class="number">00000100101</span><span class="number">1011110110100</span></span><br><span class="line">(lldb) x -s4 -fh -c<span class="number">4 0x04d1</span>c000</span><br><span class="line"><span class="number">0x04d1c00</span>0: <span class="number">0x000c72</span><span class="number">88 0x00029</span><span class="number">9c8 0x00</span>0d2e5c <span class="number">0x0004b7</span>b4  </span><br><span class="line">  </span><br><span class="line">interleaved</span><br><span class="line">L+R(8.24) </span><br><span class="line"><span class="number">0x04d1c00</span>0: <span class="number">0b00000000</span> <span class="number">000011000111</span><span class="number">00101000100</span>0  float(<span class="number">0b00001100</span><span class="number">011100101000</span>1000)/2**24 = <span class="number">0.04862260</span><span class="number">818481445</span> L</span><br><span class="line"><span class="number">0x04d1c00</span>4: <span class="number">0b00000000</span> <span class="number">000000101001</span><span class="number">100111001000</span>  float(<span class="number">0b000000101</span><span class="number">00110011100100</span>0)/2**24 = <span class="number">0.0101590156</span><span class="number">55517578</span> R</span><br><span class="line"><span class="number">0x04d1c00</span>8: <span class="number">0b00000000</span> <span class="number">00001101001</span><span class="number">0111001011100</span>  float(<span class="number">0b00001101</span><span class="number">001011100101</span>1100)/2**24 = <span class="number">0.05148863</span><span class="number">7924194336</span> L</span><br><span class="line"><span class="number">0x04d1c00</span>c: <span class="number">0b00000000</span> <span class="number">00000100101</span><span class="number">1011110110100</span>  float(<span class="number">0b00000100</span><span class="number">10110111101101</span>00)/2**24 = <span class="number">0.01842808</span><span class="number">723449707</span> R</span><br><span class="line"></span><br><span class="line">non-interleaved</span><br><span class="line">L(float) </span><br><span class="line"><span class="number">0x04d12000</span>: <span class="number">0b0011110101</span><span class="number">0001110010100</span><span class="number">010000000</span></span><br><span class="line"><span class="number">0x04d12004</span>: <span class="number">0b0011110101</span><span class="number">010010111001</span><span class="number">0111000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x04d12000</span>: <span class="number">0.0486226</span></span><br><span class="line"><span class="number">0x04d12004</span>: <span class="number">0.0514886</span></span><br><span class="line"></span><br><span class="line">//R(float) binary and float</span><br><span class="line"><span class="number">0x04d24000</span>: <span class="number">0b001111000</span><span class="number">010011001110</span><span class="number">01000000000</span></span><br><span class="line"><span class="number">0x04d24004</span>: <span class="number">0b001111001</span><span class="number">001011011110</span><span class="number">11010000000</span></span><br><span class="line"></span><br><span class="line"><span class="number">0x04d24000</span>: <span class="number">0.010159</span></span><br><span class="line"><span class="number">0x04d24004</span>: <span class="number">0.0184281</span></span><br></pre></td></tr></table></figure>
<h2 id="音频的文件类型与数据类型_$_afconvert">音频的文件类型与数据类型 $ afconvert</h2><p>在MAC的Shell中，Core Audio提供命令行工具afconvert，如下，命令与结果给你一个初步的概念，CoreAudio支持那些格式预编码<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">$ afconvert <span class="comment">--help-formats</span></span><br><span class="line"><span class="comment">#解释：若data_formats不是字符串，则表示LPCM数据 [BE|LE]&#123;F|[U]I&#125;&#123;8|16|24|32|64&#125;</span></span><br><span class="line"><span class="comment">#BE = Big Endian</span></span><br><span class="line"><span class="comment">#LE = Little Endian</span></span><br><span class="line"><span class="comment">#F = 浮点型 UI = 无符号整形 I = 整形</span></span><br><span class="line"><span class="comment">#8|16|24|32|64 = 位深(bit depth)</span></span><br><span class="line">Audio <span class="built_in">file</span> <span class="operator">and</span> data formats:</span><br><span class="line">    <span class="string">'3gpp'</span> = <span class="number">3</span>GP Audio (.<span class="number">3</span>gp)<span class="comment"> //可识别文件后缀名</span></span><br><span class="line">               data_formats: <span class="string">'Qclp'</span> <span class="string">'aac '</span> <span class="string">'aace'</span> <span class="string">'aacf'</span> <span class="string">'aach'</span> <span class="string">'aacl'</span> </span><br><span class="line">                             <span class="string">'aacp'</span> <span class="string">'samr'</span><span class="comment"> //可能的数据编码格式</span></span><br><span class="line">    <span class="string">'3gp2'</span> = <span class="number">3</span>GPP-<span class="number">2</span> Audio (.<span class="number">3</span>g2)</span><br><span class="line">               data_formats: <span class="string">'Qclp'</span> <span class="string">'aac '</span> <span class="string">'aace'</span> <span class="string">'aacf'</span> <span class="string">'aach'</span> <span class="string">'aacl'</span> </span><br><span class="line">                             <span class="string">'aacp'</span> <span class="string">'samr'</span> </span><br><span class="line">    <span class="string">'adts'</span> = AAC ADTS (.aac, .adts)</span><br><span class="line">               data_formats: <span class="string">'aac '</span> <span class="string">'aach'</span> <span class="string">'aacp'</span> </span><br><span class="line">    <span class="string">'ac-3'</span> = AC3 (.ac3)</span><br><span class="line">               data_formats: <span class="string">'ac-3'</span> </span><br><span class="line">    <span class="string">'AIFC'</span> = AIFC (.aifc, .aiff, .aif)</span><br><span class="line">               data_formats: I8 BEI16 BEI24 BEI32 BEF32 BEF64 UI8 <span class="string">'ulaw'</span> </span><br><span class="line">                             <span class="string">'alaw'</span> <span class="string">'MAC3'</span> <span class="string">'MAC6'</span> <span class="string">'ima4'</span> <span class="string">'QDMC'</span> <span class="string">'QDM2'</span> </span><br><span class="line">                             <span class="string">'Qclp'</span> <span class="string">'agsm'</span> </span><br><span class="line">    <span class="string">'AIFF'</span> = AIFF (.aiff, .aif)</span><br><span class="line">               data_formats: I8 BEI16 BEI24 BEI32 </span><br><span class="line">    <span class="string">'amrf'</span> = AMR (.amr)</span><br><span class="line">               data_formats: <span class="string">'samr'</span> </span><br><span class="line">    <span class="string">'m4af'</span> = Apple MPEG-<span class="number">4</span> Audio (.m4a, .m4r)</span><br><span class="line">               data_formats: <span class="string">'aac '</span> <span class="string">'aace'</span> <span class="string">'aacf'</span> <span class="string">'aach'</span> <span class="string">'aacl'</span> <span class="string">'aacp'</span> </span><br><span class="line">                             <span class="string">'alac'</span> <span class="string">'paac'</span> </span><br><span class="line">    <span class="string">'m4bf'</span> = Apple MPEG-<span class="number">4</span> AudioBooks (.m4b)</span><br><span class="line">               data_formats: <span class="string">'aac '</span> <span class="string">'aace'</span> <span class="string">'aacf'</span> <span class="string">'aach'</span> <span class="string">'aacl'</span> <span class="string">'aacp'</span> </span><br><span class="line">                             <span class="string">'paac'</span> </span><br><span class="line">    <span class="string">'caff'</span> = CAF (.caf)</span><br><span class="line">               data_formats: <span class="string">'.mp1'</span> <span class="string">'.mp2'</span> <span class="string">'.mp3'</span> <span class="string">'QDM2'</span> <span class="string">'QDMC'</span> <span class="string">'Qclp'</span> </span><br><span class="line">                             <span class="string">'Qclq'</span> <span class="string">'aac '</span> <span class="string">'aace'</span> <span class="string">'aacf'</span> <span class="string">'aach'</span> <span class="string">'aacl'</span> </span><br><span class="line">                             <span class="string">'aacp'</span> <span class="string">'alac'</span> <span class="string">'alaw'</span> <span class="string">'dvi8'</span> <span class="string">'ilbc'</span> <span class="string">'ima4'</span> </span><br><span class="line">                             I8 BEI16 BEI24 BEI32 BEF32 BEF64 LEI16 LEI24 </span><br><span class="line">                             LEI32 LEF32 LEF64 <span class="string">'ms\x00\x02'</span> <span class="string">'ms\x00\x11'</span> </span><br><span class="line">                             <span class="string">'ms\x001'</span> <span class="string">'paac'</span> <span class="string">'samr'</span> <span class="string">'ulaw'</span> </span><br><span class="line">    <span class="string">'MPG1'</span> = MPEG Layer <span class="number">1</span> (.mp1, .mpeg, .mpa)</span><br><span class="line">               data_formats: <span class="string">'.mp1'</span> </span><br><span class="line">    <span class="string">'MPG2'</span> = MPEG Layer <span class="number">2</span> (.mp2, .mpeg, .mpa)</span><br><span class="line">               data_formats: <span class="string">'.mp2'</span> </span><br><span class="line">    <span class="string">'MPG3'</span> = MPEG Layer <span class="number">3</span> (.mp3, .mpeg, .mpa)</span><br><span class="line">               data_formats: <span class="string">'.mp3'</span> </span><br><span class="line">    <span class="string">'mp4f'</span> = MPEG-<span class="number">4</span> Audio (.mp4)</span><br><span class="line">               data_formats: <span class="string">'aac '</span> <span class="string">'aace'</span> <span class="string">'aacf'</span> <span class="string">'aach'</span> <span class="string">'aacl'</span> <span class="string">'aacp'</span> </span><br><span class="line">    <span class="string">'NeXT'</span> = NeXT/Sun (.snd, .au)</span><br><span class="line">               data_formats: I8 BEI16 BEI24 BEI32 BEF32 BEF64 <span class="string">'ulaw'</span> </span><br><span class="line">    <span class="string">'Sd2f'</span> = Sound Designer II (.sd2)</span><br><span class="line">               data_formats: I8 BEI16 BEI24 BEI32 </span><br><span class="line">    <span class="string">'WAVE'</span> = WAVE (.wav)</span><br><span class="line">               data_formats: UI8 LEI16 LEI24 LEI32 LEF32 LEF64 <span class="string">'ulaw'</span> </span><br><span class="line">                             <span class="string">'alaw'</span></span><br></pre></td></tr></table></figure></p>
<p>可以看到.caf的文件支持所有类型的数据格式，我们可以将以下MP3文件转成Caf(LEI16)文件：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ afconvert aviation+youweremyeverything<span class="class">.mp3</span> -d LEI16 output.caf</span><br></pre></td></tr></table></figure>
<h3 id="音频文件信息$_afinfo">音频文件信息$ afinfo</h3><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$ afinfo aviation+youweremyeverything.mp3</span><br><span class="line"></span><br><span class="line"><span class="code"> </span></span><br><span class="line">File:           aviation+youweremyeverything.mp3</span><br><span class="line">File type ID:   MPG3</span><br><span class="line"><span class="header">Num Tracks:     1</span><br><span class="line">----</span></span><br><span class="line">Data format:     2 ch,  44100 Hz, <span class="emphasis">'.mp3'</span> (0x00000000) 0 bits/channel, 0 bytes/packet, 1152 frames/packet, 0 bytes/frame</span><br><span class="line"><span class="code">                no channel layout.</span></span><br><span class="line">estimated duration: 311.570438 sec</span><br><span class="line">audio bytes: 4985127</span><br><span class="line">audio packets: 11927</span><br><span class="line">bit rate: 128000 bits per second</span><br><span class="line">packet size upper bound: 1052</span><br><span class="line">maximum packet size: 418</span><br><span class="line">audio data file offset: 2475</span><br><span class="line"><span class="header">optimized</span><br><span class="line">----</span></span><br></pre></td></tr></table></figure>
<p>面对那么多的参数，起码这个命令给你个感觉，该音频文件都有哪些参数</p>
<h3 id="音频播放$_afplay">音频播放$ afplay</h3><p>afplay aviation+youweremyeverything.mp3 </p>
<p>电子语音$ say</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">say</span> hello world</span><br></pre></td></tr></table></figure>
<p>很酷的命令，是吧！可以从命令行播放core audio能识别的音频，我喜欢的歌：《you were my everything》</p>
<p>PS：此外还有命令afclip afhash afmtodit, 此时还不知道这些是干什么用的，以后知道了再补上 </p>
<h3 id="CoreAudio_Helper_API_—_AudioToolBox(CoreAudio辅助API)">CoreAudio Helper API — AudioToolBox(CoreAudio辅助API)</h3><p>播放音频文件，通常需要将文件音频转码为canonical data(见Part I),才能用于播发，处理等操作。<br>相反录音，通常将canonical data转换成文件格式写入磁盘。</p>
<p>2x包含解码的API：</p>
<p>AudioQueue API能够将音频文件转码能LPCM用于播放<br>Extended Audio File Services API 能够将音频文件转成PCM, 或者将PCM直接转成压缩文件写入磁盘</p>
<p>3x播放引擎：1.AudioQueue 2.Audio Unit 3.OpenAL</p>
<h3 id="AUAudioFilePlayer_property">AUAudioFilePlayer property</h3><ul>
<li>kAudioUnitProperty_ScheduleStartTimeStamp</li>
<li>kAudioUnitProperty_ScheduledFilePrime</li>
<li>kAudioUnitProperty_ScheduledFileRegion</li>
</ul>
<ol>
<li><p>The StartTime is exactly what you’d think it is: it defines the beginning of the playback timeline for all slices/regions that you’re scheduling for that audio unit.</p>
</li>
<li><p>Since the audio data needs to be pulled into RAM prior to playing, “priming” basically tells the system to begin reading the audio file (the specified number of frames) into memory.</p>
</li>
<li><p>You have the option of playing just a part of a file (beginning some number of frames into the file and/or ending some number of frames before the end of the file). These are called “regions” and this is the property you use if you want to play just a portion (or region) of an audio file.</p>
</li>
</ol>
<p>Have a look at AudioUnitProperties.h:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Start Time</span><br><span class="line"></span><br><span class="line">The audio unit will <span class="operator">not</span> play <span class="keyword">any</span> slices following initialization <span class="operator">or</span> reset, <span class="keyword">until</span> its <span class="built_in">start</span> <span class="built_in">time</span> has been <span class="built_in">set</span>. The <span class="built_in">start</span> <span class="built_in">time</span> establishes <span class="operator">the</span> beginning <span class="operator">of</span> <span class="operator">a</span> timeline: <span class="operator">the</span> timestamps <span class="operator">of</span> all slices <span class="operator">in</span> <span class="operator">the</span> schedule are <span class="built_in">relative</span> <span class="built_in">to</span> <span class="operator">the</span> <span class="built_in">start</span> <span class="built_in">time</span>.</span><br><span class="line"></span><br><span class="line">Set <span class="operator">a</span> <span class="built_in">start</span> <span class="built_in">time</span> <span class="keyword">by</span> setting <span class="operator">the</span> kAudioUnitProperty_ScheduleStartTimeStamp property <span class="operator">with</span> <span class="operator">an</span> AudioTimeStamp structure. If <span class="operator">the</span> timestamp <span class="operator">contains</span> <span class="operator">a</span> valid sample <span class="built_in">time</span> (timestamp.mFlags &amp; kAudioTimeStampSampleTimeValid), <span class="keyword">then</span> playback <span class="operator">begins</span> when <span class="operator">the</span> timestamp passed <span class="built_in">to</span> <span class="operator">the</span> AudioUnitRender <span class="function"><span class="keyword">function</span> <span class="title">reaches</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">sample</span> <span class="title">time</span>. <span class="title">If</span> <span class="title">the</span> <span class="title">specified</span> <span class="title">sample</span> <span class="title">time</span> <span class="title">is</span> -<span class="title">1</span>, <span class="title">playback</span> <span class="title">begins</span> <span class="title">on</span> <span class="title">the</span> <span class="title">next</span> <span class="title">render</span> <span class="title">cycle</span>.</span></span><br><span class="line"></span><br><span class="line">If <span class="operator">the</span> <span class="built_in">start</span> timestamp does <span class="operator">not</span> contain <span class="operator">a</span> valid sample <span class="built_in">time</span>, but does contain <span class="operator">a</span> valid host <span class="built_in">time</span> (timestamp.mFlags &amp; kAudioTimeStampHostTimeValid), <span class="keyword">then</span> <span class="operator">the</span> specified host <span class="built_in">time</span> is translated <span class="built_in">to</span> <span class="operator">the</span> sample <span class="built_in">time</span> <span class="keyword">at</span> which playback will begin. A host <span class="built_in">time</span> <span class="operator">of</span> <span class="number">0</span> means <span class="string">"start on the next render cycle."</span></span><br><span class="line"></span><br><span class="line">The kAudioUnitProperty_ScheduleStartTimeStamp property may be queried <span class="built_in">to</span> obtain <span class="operator">the</span> <span class="built_in">time</span> <span class="keyword">at</span> which playback began. If <span class="operator">the</span> <span class="built_in">start</span> <span class="built_in">time</span> has <span class="operator">not</span> yet been reached, <span class="operator">the</span> timestamp returned will be whatever <span class="operator">the</span> host application <span class="keyword">last</span> <span class="built_in">set</span>.</span><br><span class="line"></span><br><span class="line">Priming</span><br><span class="line"></span><br><span class="line">You should <span class="built_in">set</span> kAudioUnitProperty_ScheduledFilePrime <span class="keyword">after</span> scheduling initial <span class="built_in">file</span> regions <span class="built_in">to</span> be played <span class="operator">and</span> <span class="keyword">before</span> starting playback. This SetProperty call will begin reading <span class="operator">the</span> audio <span class="built_in">files</span> <span class="operator">and</span> <span class="operator">not</span> <span class="constant">return</span> <span class="keyword">until</span> <span class="operator">the</span> <span class="built_in">number</span> <span class="operator">of</span> frames specified <span class="keyword">by</span> <span class="operator">the</span> property <span class="built_in">value</span> have been <span class="built_in">read</span>.</span><br><span class="line"></span><br><span class="line">Scheduling Regions</span><br><span class="line"></span><br><span class="line">To schedule <span class="operator">the</span> playback <span class="operator">of</span> <span class="operator">a</span> region <span class="operator">of</span> <span class="operator">an</span> audio <span class="built_in">file</span>, <span class="built_in">set</span> <span class="operator">the</span> kAudioUnitProperty_ScheduledFileRegion property. This is <span class="operator">a</span> ScheduledAudioFileRegion structure. mTimeStamp.mSampleTime must be valid <span class="operator">and</span> is interpreted <span class="built_in">relative</span> <span class="built_in">to</span> <span class="operator">the</span> unit<span class="string">'s start time -- the start time semantics (using kAudioUnitProperty_ScheduleStartTimeStamp) are identical to those of AUScheduledSoundPlayer. Unlike the ScheduledAudioSlice structures, the unit makes copies of ScheduledAudioFileRegions, so you may create them on the stack or otherwise reuse/dispose of them immediately after scheduling them.</span></span><br></pre></td></tr></table></figure></p>
<h2 id="参考：">参考：</h2><ol>
<li>CoreAudio Official Link</li>
<li><a href="http://trac.bookofhook.com/bookofhook/trac.cgi/wiki/IntroductionToFixedPointMath" target="_blank" rel="external">Introduction to Fixed Point Math</a></li>
<li><a href="http://lists.apple.com/archives/coreaudio-api/2011/Feb/msg00083.html" target="_blank" rel="external">MailList: coreaudio-api@lists.apple.com:</a></li>
<li>GIT and APPLE SAMPLE CODE</li>
<li><a href="http://audacity.sourceforge.net/manual-1.2/effects_reverb.html" target="_blank" rel="external">reverb音效</a> <a href="http://www.freesoftwaremagazine.com/articles/understanding_surround_and_binaural_sound" target="_blank" rel="external">surround音效</a></li>
<li><a href="http://www.deluge.co/?q=content/coreaudio-iphone-creating-graphic-equalizer" target="_blank" rel="external">N-band EQ</a></li>
<li><a href="http://book.douban.com/subject/4238740/" target="_blank" rel="external">“Learning Core Audio”</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="CoreAudio_-&gt;_基本知识">CoreAudio -&gt; 基本知识</h1><p>自从开始Cocoa编程到现在，总会有人问，iOS，Mac有哪些框架，Cocoa与Cocoa Touch有什么区别？苹果官网早有详细的介绍,见 Mac iOS</p>
<p>最近在研究CoreAudio&gt;AudioUnit.framework音频处理部分，这部分内容文档少的可怜，可参照的内容有《CoreAudio Overview Mac/iOS》，Sample Code, WWDC, Apple Mailing List. 剩下的就只剩头文件注释和函数返回的错误码了。就像解密一样，如果你知道什么是成功，然后再有较为完备的试错方案，那你离成功应该不远了，剩下的只是时间的问题。</p>
<p>查文档的时候，有些内容Google一下，甚至只有几页内容。大部分时候都是连续打开20几个链接，却很少发现有价值的内容。有些算法相当神奇，听都没听过，更遗憾的是，我的笨拙的耳朵完全无法区分这对音频有哪些影响。但还是对音频有一定的理解,总结如下：</p>
<h2 id="基本术语">基本术语</h2><ul>
<li><strong>Sample(采样)</strong>：某个频道中单次捕获的音频数值（如图，单个紫色方块）</li>
<li><strong>Frame(一帧)</strong>：同一时间不同声道获取的采样值，例如，对于双声道，一帧包含两个数字，左声道和右声道（如图，第一列的多个声道中的3个紫色方块）</li>
<li><strong>Packet(包)</strong>：由一个或多个连续帧(Frame)组成, 在线性PCM中，一包总是只包含一帧，但对于其他压缩格式，一包要包含多个帧</li>
<li><strong>Sample Rate(采样率)</strong>：单个声道一秒内有多少个采样(如图，每个声道一秒内有多少个紫色方块)，例如，CD的采样率为44.1KHz(samples / sec) </li>
<li><strong>Bit Depth(位深)</strong>：采样值用多少位的数字来表示，例如CD的采样值用16-bit整形来表示 (bits / sample) </li>
<li><strong>Bit rate(比特率)</strong> = <strong>Bit_Depth x Sample_Rate (bits / sec</strong>) PCM bit rate is constant while oompressed format often usae a variable bit rate</li>
</ul>]]>
    
    </summary>
    
      <category term="Audio" scheme="http://ytlvy.com/tags/Audio/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Assembly]]></title>
    <link href="http://ytlvy.com/2015/09/27/Assembly/"/>
    <id>http://ytlvy.com/2015/09/27/Assembly/</id>
    <published>2015-09-27T13:00:54.000Z</published>
    <updated>2015-09-27T13:01:16.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Assembly">Assembly</h2><h3 id="MOV">MOV</h3><p>MOV A, B            === B =&gt; A</p>
<h3 id="LEA">LEA</h3><p>LEA A, B            === B =&gt; A</p>
<ol>
<li><blockquote>
<p>LEA, the only instruction that performs memory addressing calculations but doesn’t actually address memory. LEA accepts a standard memory addressing operand, but does nothing more than store the calculated memory offset in the specified register, which may be any general purpose register.<br>What does that give us? Two things that ADD doesn’t provide:</p>
<ol>
<li>the ability to perform addition with either two or three operands, and</li>
<li>the ability to store the result in any register; not just one of the source operands.</li>
</ol>
</blockquote>
</li>
<li><p>As others have pointed out, LEA (load effective address) is often used as a “trick” to do certain computations, but that’s not its primary purpose. The x86 instruction set was designed to support high-level languages like Pascal and C, where arrays—especially arrays of ints or small structs—are common. Consider, for example, a struct representing (x, y) coordinates:</p>
</li>
</ol>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span><br><span class="line"></span>&#123;</span><br><span class="line">     int xcoord;</span><br><span class="line">     int ycoord;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>Now imagine a statement like:</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> y = points[i].ycoord;</span><br></pre></td></tr></table></figure>
<p>where points[] is an array of Point. Assuming the base of the array is already in EBX, and variable i is in EAX, and xcoord and ycoord are each 32 bits (so ycoord is at offset 4 bytes in the struct), this statement can be compiled to:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">MOV</span> <span class="number">EDX</span>, [<span class="number">EBX</span> + <span class="number">8</span>*<span class="number">EAX</span> + <span class="number">4</span>]    <span class="comment">; right side is "effective address"</span></span><br></pre></td></tr></table></figure>
<p>which will land y in EDX. The scale factor of 8 is because each Point is 8 bytes in size. Now consider the same expression used with the “address of” operator &amp;:</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> *p = &amp;points[i].ycoord;</span><br></pre></td></tr></table></figure>
<p>In this case, you don’t want the value of ycoord, but its address. That’s where LEA (load effective address) comes in. Instead of a MOV, the compiler can generate</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">LEA</span> <span class="literal">ESI</span>, [<span class="number">EBX</span> + <span class="number">8</span>*<span class="number">EAX</span> + <span class="number">4</span>]</span><br></pre></td></tr></table></figure>
<p>which will load the address in ESI.</p>
<h4 id="section_data">section data</h4><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">section</span> <span class="string">.data</span></span><br><span class="line">    <span class="preprocessor">align</span> <span class="number">16</span></span><br><span class="line"><span class="label">    v1:</span>     <span class="pseudo">dd</span> <span class="number">1.1</span>, <span class="number">2.2</span>, <span class="number">3.3</span>, <span class="number">4.4</span>   <span class="comment">; Four Single precision floats 32 bits each</span></span><br><span class="line"><span class="label">    v1dp:</span>   <span class="pseudo">dq</span> <span class="number">1.1</span>, <span class="number">2.2</span>     <span class="comment">; Two Double precision floats 64 bits each</span></span><br><span class="line"><span class="label">    v2:</span>     <span class="pseudo">dd</span> <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, <span class="number">8.8</span></span><br><span class="line"><span class="label">    v2s1:</span>   <span class="pseudo">dd</span> <span class="number">5.5</span>, <span class="number">6.6</span>, <span class="number">7.7</span>, -<span class="number">8.8</span></span><br><span class="line"><span class="label">    v2s2:</span>   <span class="pseudo">dd</span> <span class="number">5.5</span>, <span class="number">6.6</span>, -<span class="number">7.7</span>, -<span class="number">8.8</span></span><br><span class="line"><span class="label">    v2s3:</span>   <span class="pseudo">dd</span> <span class="number">5.5</span>, -<span class="number">6.6</span>, -<span class="number">7.7</span>, -<span class="number">8.8</span></span><br><span class="line"><span class="label">    v2s4:</span>   <span class="pseudo">dd</span> -<span class="number">5.5</span>, -<span class="number">6.6</span>, -<span class="number">7.7</span>, -<span class="number">8.8</span></span><br><span class="line"><span class="label">    num1:</span>   <span class="pseudo">dd</span> <span class="number">1.2</span></span><br><span class="line"><span class="label">    v3:</span>     <span class="pseudo">dd</span> <span class="number">1.2</span>, <span class="number">2.3</span>, <span class="number">4.5</span>, <span class="number">6.7</span>   <span class="comment">; No longer 16 byte aligned</span></span><br><span class="line"><span class="label">    v3dp:</span>   <span class="pseudo">dq</span> <span class="number">1.2</span>, <span class="number">2.3</span>     <span class="comment">; No longer 16 byte aligned</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">section</span> <span class="string">.bss</span></span><br><span class="line"><span class="label">    mask1:</span>  <span class="pseudo">resd</span> <span class="number">1</span></span><br><span class="line"><span class="label">    mask2:</span>  <span class="pseudo">resd</span> <span class="number">1</span></span><br><span class="line"><span class="label">    mask3:</span>  <span class="pseudo">resd</span> <span class="number">1</span></span><br><span class="line"><span class="label">    mask4:</span>  <span class="pseudo">resd</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">section</span> <span class="string">.text</span></span><br><span class="line"><span class="label">    _start:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;</span></span><br><span class="line"><span class="comment">;   op  dst,  src</span></span><br><span class="line"><span class="comment">;</span></span><br><span class="line">                <span class="comment">;</span></span><br><span class="line">                <span class="comment">; SSE</span></span><br><span class="line">                <span class="comment">;</span></span><br><span class="line">                <span class="comment">; Using movaps since vectors are 16 byte aligned</span></span><br><span class="line">    <span class="keyword">movaps</span>  <span class="literal">xmm0</span>, [v1]  <span class="comment">; Move four 32-bit(single precision) floats to xmm0 </span></span><br><span class="line">    <span class="keyword">movaps</span>  <span class="literal">xmm1</span>, [v2]</span><br><span class="line">    <span class="keyword">movups</span>  <span class="literal">xmm2</span>, [v3]  <span class="comment">; Need to use movups since v3 is not 16 byte aligned</span></span><br><span class="line">    <span class="comment">;movaps xmm3, [v3]  ; This would seg fault if uncommented </span></span><br><span class="line">    <span class="keyword">movss</span>   <span class="literal">xmm3</span>, [num1]    <span class="comment">; Move 32-bit float num1 to the least significant element of xmm3</span></span><br><span class="line">    <span class="keyword">movss</span>   <span class="literal">xmm3</span>, [v3]  <span class="comment">; Move first 32-bit float of v3 to the least significant element of xmm3</span></span><br><span class="line">    <span class="keyword">movlps</span>  <span class="literal">xmm4</span>, [v3]  <span class="comment">; Move 64-bits(two single precision floats) from memory to the lower 64-bit elements of xmm4</span></span><br><span class="line">    <span class="keyword">movhps</span>  <span class="literal">xmm4</span>, [v2]  <span class="comment">; Move 64-bits(two single precision floats) from memory to the higher 64-bit elements of xmm4</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">; Source and destination for movhlps and movlhps must be xmm registers</span></span><br><span class="line">    <span class="keyword">movhlps</span> <span class="literal">xmm5</span>, <span class="literal">xmm4</span>  <span class="comment">; Transfers the higher 64-bits of the source xmm4 to the lower 64-bits of the destination xmm5</span></span><br><span class="line">    <span class="keyword">movlhps</span> <span class="literal">xmm5</span>, <span class="literal">xmm4</span>  <span class="comment">; Transfers the lower 64-bits of the source xmm4 to the higher 64-bits of the destination xmm5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">movaps</span>  <span class="literal">xmm6</span>, [v2s1]</span><br><span class="line">    <span class="keyword">movmskps</span> <span class="number">eax</span>, <span class="literal">xmm6</span>  <span class="comment">; Extract the sign bits from four 32-bits floats in xmm6 and create 4 bit mask in eax </span></span><br><span class="line">    <span class="keyword">mov</span> [mask1], <span class="number">eax</span>    <span class="comment">; Should be 8</span></span><br><span class="line">    <span class="keyword">movaps</span>  <span class="literal">xmm6</span>, [v2s2]</span><br><span class="line">    <span class="keyword">movmskps</span> <span class="number">eax</span>, <span class="literal">xmm6</span>  <span class="comment">; Extract the sign bits from four 32-bits floats in xmm6 and create 4 bit mask in eax</span></span><br><span class="line">    <span class="keyword">mov</span> [mask2], <span class="number">eax</span>    <span class="comment">; Should be 12</span></span><br><span class="line">    <span class="keyword">movaps</span>  <span class="literal">xmm6</span>, [v2s3]</span><br><span class="line">    <span class="keyword">movmskps</span> <span class="number">eax</span>, <span class="literal">xmm6</span>  <span class="comment">; Extract the sign bits from four 32-bits floats in xmm6 and create 4 bit mask in eax</span></span><br><span class="line">    <span class="keyword">mov</span> [mask3], <span class="number">eax</span>    <span class="comment">; Should be 14</span></span><br><span class="line">    <span class="keyword">movaps</span>  <span class="literal">xmm6</span>, [v2s4]</span><br><span class="line">    <span class="keyword">movmskps</span> <span class="number">eax</span>, <span class="literal">xmm6</span>  <span class="comment">; Extract the sign bits from four 32-bits floats in xmm6 and create 4 bit mask in eax</span></span><br><span class="line">    <span class="keyword">mov</span> [mask4], <span class="number">eax</span>    <span class="comment">; Should be 15</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">;</span></span><br><span class="line">                <span class="comment">; SSE2</span></span><br><span class="line">                <span class="comment">;</span></span><br><span class="line">    <span class="keyword">movapd</span>  <span class="literal">xmm6</span>, [v1dp]    <span class="comment">; Move two 64-bit(double precision) floats to xmm6, using movapd since vector is 16 byte aligned </span></span><br><span class="line">                <span class="comment">; Next two instruction should have equivalent results to movapd xmm6, [vldp]</span></span><br><span class="line">    <span class="keyword">movhpd</span>  <span class="literal">xmm6</span>, [v1dp+<span class="number">8</span>]  <span class="comment">; Move a 64-bit(double precision) float into the higher 64-bit elements of xmm6 </span></span><br><span class="line">    <span class="keyword">movlpd</span>  <span class="literal">xmm6</span>, [v1dp]    <span class="comment">; Move a 64-bit(double precision) float into the lower 64-bit elements of xmm6</span></span><br><span class="line">    <span class="keyword">movupd</span>  <span class="literal">xmm6</span>, [v3dp]    <span class="comment">; Move two 64-bit floats to xmm6, using movupd since vector is not 16 byte aligned</span></span><br></pre></td></tr></table></figure>
<h4 id="NOP_机器码">NOP 机器码</h4><p>0x90</p>
<h4 id="AT&amp;T_格式">AT&amp;T 格式</h4><p>AT&amp;T 语法颠倒了源和目的操作数的位置, 目的操作数在源操作数之后。寄存器操作数要有个%的前缀,<br>立即数操作数要有个$符号的前缀。 存储器操作数的大小取决于操作码的最后一个字符。 它们是b<br>(8-bit), w(16-bit), 和 l(32-bit)</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">movw %<span class="number">bx</span>,  %<span class="number">ax</span>          //<span class="keyword">mov</span> <span class="number">ax</span>,  <span class="number">bx</span></span><br><span class="line">xorl %<span class="number">eax</span>, %<span class="number">eax</span>         //<span class="keyword">xor</span> <span class="number">eax</span>, <span class="number">eax</span></span><br><span class="line">movw <span class="number">$1</span>,   %<span class="number">ax</span>          //<span class="keyword">mov</span> <span class="number">ax</span>,  <span class="number">1</span></span><br><span class="line">movb X,    %<span class="number">ah</span>          //<span class="keyword">mov</span> <span class="number">ah</span>,  <span class="preprocessor">byte</span> <span class="preprocessor">ptr</span> X</span><br><span class="line">movw X,    %<span class="number">ax</span>          //<span class="keyword">mov</span> <span class="number">ax</span>,  <span class="preprocessor">word</span> <span class="preprocessor">ptr</span> X</span><br><span class="line">movl X,    %<span class="number">eax</span>         //<span class="keyword">mov</span> <span class="number">eax</span>, X</span><br></pre></td></tr></table></figure>
<p>S和D分辨代表源和目的操作数后缀。<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">movswl <span class="variable">%ax</span>, <span class="variable">%ecx</span>        <span class="comment">// movsx ecx, ax</span></span><br><span class="line">cbtw                    <span class="comment">// cbw</span></span><br><span class="line">cwtl                    <span class="comment">// cwde </span></span><br><span class="line">cwtd                    <span class="comment">// cwd</span></span><br><span class="line">cltd                    <span class="comment">// cdq</span></span><br><span class="line">lcall  <span class="variable">$S</span>, <span class="variable">$O</span>           <span class="comment">// call far S:O</span></span><br><span class="line">ljmp   <span class="variable">$S</span>, <span class="variable">$O</span>           <span class="comment">// jump far S:O</span></span><br><span class="line">lret   <span class="variable">$V</span>               <span class="comment">// ret far V</span></span><br></pre></td></tr></table></figure></p>
<p>section: [base + index*scale + disp] 被写成:  section:disp(base,  index, scale) </p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">movl <span class="number">4</span>(%<span class="literal">ebp</span>), %<span class="number">eax</span>               // <span class="keyword">mov</span> <span class="number">eax</span>,    [<span class="literal">ebp</span>+<span class="number">4</span>]</span><br><span class="line">addl (%<span class="number">eax</span>, %<span class="number">eax</span>, <span class="number">4</span>), %<span class="number">ecx</span>       // <span class="keyword">add</span> <span class="number">ecx</span>,    [<span class="number">eax</span> + <span class="number">eax</span>*<span class="number">4</span>]</span><br><span class="line">movb <span class="number">$4</span>, %<span class="literal">fs</span>(%<span class="number">eax</span>)               // <span class="keyword">mov</span> <span class="literal">fs</span>:<span class="number">eax</span>, <span class="number">4</span></span><br><span class="line">movl _array(, %<span class="number">eax</span>, <span class="number">4</span>),  %<span class="number">eax</span>    // <span class="keyword">mov</span> <span class="number">eax</span>,    [<span class="number">4</span>*<span class="number">eax</span> + array]</span><br><span class="line">movw _array(%<span class="number">ebx</span>, %<span class="number">eax</span>, <span class="number">4</span>), %<span class="number">cx</span>  // <span class="keyword">mov</span> <span class="number">cx</span>,     [<span class="number">ebx</span> + <span class="number">4</span>*<span class="number">eax</span> + array]</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Assembly">Assembly</h2><h3 id="MOV">MOV</h3><p>MOV A, B            === B =&gt; A</p>
<h3 id="LEA">LEA</h3><p>LEA A, B            === B =&gt; A</p>
<ol>
<li><blockquote>
<p>LEA, the only instruction that performs memory addressing calculations but doesn’t actually address memory. LEA accepts a standard memory addressing operand, but does nothing more than store the calculated memory offset in the specified register, which may be any general purpose register.<br>What does that give us? Two things that ADD doesn’t provide:</p>
<ol>
<li>the ability to perform addition with either two or three operands, and</li>
<li>the ability to store the result in any register; not just one of the source operands.</li>
</ol>
</blockquote>
</li>
<li><p>As others have pointed out, LEA (load effective address) is often used as a “trick” to do certain computations, but that’s not its primary purpose. The x86 instruction set was designed to support high-level languages like Pascal and C, where arrays—especially arrays of ints or small structs—are common. Consider, for example, a struct representing (x, y) coordinates:</p>
</li>
</ol>
<figure class="highlight capnproto"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span><br><span class="line"></span>&#123;</span><br><span class="line">     int xcoord;</span><br><span class="line">     int ycoord;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[awesome shell]]></title>
    <link href="http://ytlvy.com/2015/09/27/awesome-shell/"/>
    <id>http://ytlvy.com/2015/09/27/awesome-shell/</id>
    <published>2015-09-27T12:59:33.000Z</published>
    <updated>2015-09-27T13:00:03.000Z</updated>
    <content type="html"><![CDATA[<h1 id="终极_Shell">终极 Shell</h1><p><img src="http://macshuo.com/wp-content/uploads/2013/07/zsh1.png" alt=""></p>
<p>在开始今天的 MacTalk 之前，先问两个问题吧：</p>
<p>1、相对于其他系统，Mac 的主要优势是什么？<br>2、你们平时用哪种 Shell？<br>……</p>
<p>第一个童靴可以坐下了，Mac 的最大优势是 GUI 和命令行的完美结合，不要把所有注意力放在 Mac 性感的腰身和明媚的显示屏上好吧，这不是妹纸！第二个童靴你可以出去面壁了，讲了这么多期 MacTalk 你告诉我还在用 Windows 的 cmd， 你让 Mac 君情何以堪？哪怕你就说在用 Linux 的 Bash 我也就原谅你了，踢飞！</p>
<p>上次在「如何学习一门编程语言」里提到了 Shell，也有读者问到 Shell 的问题，所以这次给大家说说 Shell 的事。</p>
<p>我在「趣谈个人建站」里介绍过一点 Shell，自己的东西借用下不丢人，把扯淡的拿掉，干货留下，就是如下内容：</p>
<p>Shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。</p>
<p>Linux/Unix提供了很多种Shell，为毛要这么多Shell？难道用来炒着吃么？那我问你，你同类型的衣服怎么有那么多件？花色，质地还不一样。写程序比买衣服复杂多了，而且程序员往往负责把复杂的事情搞简单，简单的事情搞复杂。牛程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等，想知道你的系统有几种shell，可以通过以下命令查看：</p>
<a id="more"></a>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="regexp">/etc/</span>shells</span><br></pre></td></tr></table></figure>
<p>显示如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/bin/</span>bash</span><br><span class="line"><span class="regexp">/bin/</span>csh</span><br><span class="line"><span class="regexp">/bin/</span>ksh</span><br><span class="line"><span class="regexp">/bin/</span>sh</span><br><span class="line"><span class="regexp">/bin/</span>tcsh</span><br><span class="line"><span class="regexp">/bin/</span>zsh</span><br></pre></td></tr></table></figure>
<p>在 Linux 里执行这个命令和 Mac 略有不同，你会发现 Mac 多了一个 zsh，也就是说 OS X 系统预装了个 zsh，这是个神马 Shell 呢？</p>
<p>目前常用的 Linux 系统和 OS X 系统的默认 Shell 都是 bash，但是真正强大的 Shell 是深藏不露的 zsh， 这货绝对是马车中的跑车，跑车中的飞行车，史称『终极 Shell』，但是由于配置过于复杂，所以初期无人问津，很多人跑过来看看 zsh 的配置指南，什么都不说转身就走了。直到有一天，国外有个穷极无聊的程序员开发出了一个能够让你快速上手的zsh项目，叫做「oh my zsh」，Github 网址是：<a href="https://github.com/robbyrussell/oh-my-zsh。这玩意就像「X天叫你学会" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh。这玩意就像「X天叫你学会</a> C++」系列，可以让你神功速成，而且是真的。</p>
<p>好，下面我们看看如何安装、配置和使用 zsh。</p>
<h2 id="安装zsh">安装zsh</h2><p>如果你用 Mac，就可以直接看下一节<br>如果你用 Redhat Linux，执行：sudo yum install zsh<br>如果你用 Ubuntu Linux，执行：sudo apt-get install zsh<br>如果你用 Windows……去洗洗睡吧。</p>
<p>安装完成后设置当前用户使用 zsh：chsh -s /bin/zsh，根据提示输入当前用户的密码就可以了。</p>
<h2 id="安装oh_my_zsh">安装oh my zsh</h2><p>首先安装 git，安装方式同上，把 zsh 换成 git 即可。</p>
<p>安装「oh my zsh」可以自动安装也可以手动安装。</p>
<p>自动安装：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http<span class="variable">s:</span>//github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/raw/master/tools/install.<span class="keyword">sh</span> -O - | <span class="keyword">sh</span></span><br></pre></td></tr></table></figure></p>
<p>手动安装：<br><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh</span><br><span class="line">cp ~/.oh-my-zsh/templates/zshrc.zsh-<span class="keyword">template</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p>
<p>都不复杂，安装完成之后退出当前会话重新打开一个终端窗口，你就可以见到这个彩色的提示了：</p>
<p><img src="http://macshuo.com/wp-content/uploads/2013/07/zsh11.png" alt=""></p>
<h2 id="配置">配置</h2><p>zsh 的配置主要集中在用户当前目录的.zshrc里，用 vim 或你喜欢的其他编辑器打开.zshrc，在最下面会发现这么一行字：</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># Customize to your needs…</span></span><br></pre></td></tr></table></figure>
<p>可以在此处定义自己的环境变量和别名，当然，oh my zsh 在安装时已经自动读取当前的环境变量并进行了设置，你可以继续追加其他环境变量。</p>
<p>接下来进行别名的设置，我自己的部分配置如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> cls=<span class="string">'clear'</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -l'</span></span><br><span class="line"><span class="built_in">alias</span> la=<span class="string">'ls -a'</span></span><br><span class="line"><span class="built_in">alias</span> vi=<span class="string">'vim'</span></span><br><span class="line"><span class="built_in">alias</span> javac=<span class="string">"javac -J-Dfile.encoding=utf8"</span></span><br><span class="line"><span class="built_in">alias</span> grep=<span class="string">"grep --color=auto"</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> html=mate   <span class="comment"># 在命令行直接输入后缀为 html 的文件名，会在 TextMate 中打开</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> rb=mate     <span class="comment"># 在命令行直接输入 ruby 文件，会在 TextMate 中打开</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> py=vi       <span class="comment"># 在命令行直接输入 python 文件，会用 vim 中打开，以下类似</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> js=vi</span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> c=vi</span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> java=vi</span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> txt=vi</span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> gz=<span class="string">'tar -xzvf'</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> tgz=<span class="string">'tar -xzvf'</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> zip=<span class="string">'unzip'</span></span><br><span class="line"><span class="built_in">alias</span> <span class="operator">-s</span> bz2=<span class="string">'tar -xjvf'</span></span><br></pre></td></tr></table></figure>
<p>zsh 的牛粪之处在于不仅可以设置通用别名，还能针对文件类型设置对应的打开程序，比如：</p>
<p>alias -s html=mate，意思就是你在命令行输入 hello.html，zsh会为你自动打开 TextMat 并读取 hello.html； alias -s gz=’tar -xzvf’，表示自动解压后缀为 gz 的压缩包。</p>
<p>总之，只有想不到，木有做不到，吓尿了吧。</p>
<p>设置完环境变量和别名之后，基本上就可以用了，如果你是个主题控，还可以玩玩 zsh 的主题。在 .zshrc 里找到ZSH_THEME，就可以设置主题了，默认主题是：</p>
<figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ZSH_THEME</span>=<span class="string">”robbyrussell”</span></span><br></pre></td></tr></table></figure>
<p>oh my zsh 提供了数十种主题，相关文件在~/.oh-my-zsh/themes目录下，你可以随意选择，也可以编辑主题满足自己的变态需求，我采用了默认主题robbyrussell，不过做了一点小小的改动：</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PROMPT='<span class="envvar">%&#123;$fg_bold[red]%</span>&#125;➜ <span class="envvar">%&#123;$fg_bold[green]%</span>&#125;<span class="envvar">%p%</span>&#123;$fg[cyan]<span class="envvar">%&#125;%</span>d <span class="envvar">%&#123;$fg_bold[blue]%</span>&#125;$(git_prompt_info)<span class="envvar">%&#123;$fg_bold[blue]%</span>&#125;% <span class="envvar">%&#123;$reset_color%</span>&#125;&gt;'</span><br><span class="line">#PROMPT='<span class="envvar">%&#123;$fg_bold[red]%</span>&#125;➜ <span class="envvar">%&#123;$fg_bold[green]%</span>&#125;%p <span class="envvar">%&#123;$fg[cyan]%</span>&#125;%c <span class="envvar">%&#123;$fg_bold[blue]%</span>&#125;$(git_prompt_info)<span class="envvar">%&#123;$fg_bold[blue]%</span>&#125; % <span class="envvar">%&#123;$reset_color%</span>&#125;'</span><br></pre></td></tr></table></figure>
<p>对照原来的版本，我把 c 改为 d，c 表示当前目录，d 表示绝对路径，另外在末尾增加了一个「 &gt; 」，改完之后的效果是这样的：</p>
<p><img src="http://macshuo.com/wp-content/uploads/2013/07/zsh2.png" alt=""></p>
<p>大家可以尝试进行改造，也算个趣事。</p>
<p>最后我们来说说插件。</p>
<h2 id="插件">插件</h2><p><code>h my zsh</code> 项目提供了完善的插件体系，相关的文件在<code>~/.oh-my-zsh/plugins</code>目录下，默认提供了100多种，大家可以根据自己的实际学习和工作环境采用，想了解每个插件的功能，只要打开相关目录下的 zsh 文件看一下就知道了。插件也是在<code>.zshrc</code>里配置，找到<code>plugins</code>关键字，你就可以加载自己的插件了，系统默认加载 git ，你可以在后面追加内容，如下：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">plugins=<span class="list">(<span class="keyword">git</span> textmate ruby autojump osx mvn gradle)</span></span><br></pre></td></tr></table></figure></p>
<p>下面简单介绍几个：</p>
<ol>
<li><p>git：当你处于一个 git 受控的目录下时，Shell 会明确显示 「git」和 branch，如上图所示，另外对 git 很多命令进行了简化，例如 gco=’git checkout’、gd=’git diff’、gst=’git status’、g=’git’等等，熟练使用可以大大减少 git 的命令长度，命令内容可以参考~/.oh-my-zsh/plugins/git/git.plugin.zsh</p>
</li>
<li><p>textmate：mr可以创建 ruby 的框架项目，tm finename 可以用 textmate 打开指定文件。</p>
</li>
<li><p>osx：tab 增强，quick-look filename 可以直接预览文件，man-preview grep 可以生成 grep手册 的pdf 版本等。</p>
</li>
<li><p>autojump：zsh 和 autojump 的组合形成了 zsh 下最强悍的插件，今天我们主要说说这货。</p>
</li>
</ol>
<p>首先安装autojump，如果你用 Mac，可以使用 brew 安装：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span>install autojump</span><br></pre></td></tr></table></figure>
<p>如果是 Linux，去下载 autojump 的最新版本，比如：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone <span class="string">git:</span><span class="comment">//github.com/joelthelion/autojump.git</span></span><br></pre></td></tr></table></figure>
<p>解压缩后进入目录，执行</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./<span class="keyword">install</span>.py</span><br></pre></td></tr></table></figure>
<p>最后把以下代码加入<code>.zshrc：</code></p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[[ -s ~/.autojump/etc/profile.d/autojump.sh ]]</span> &amp;&amp; . ~/.autojump/etc/profile.d/autojump.sh</span><br></pre></td></tr></table></figure>
<p>至此，安装、配置、插件三位一体，终极 Shell 全面登场。退出终端会话重新登录，开始感受 zsh 的训疾如风！</p>
<h2 id="使用_zsh">使用 zsh</h2><ol>
<li><p>兼容 bash，原来使用 bash 的兄弟切换过来毫无压力，该咋用咋用。</p>
</li>
<li><p>强大的历史纪录功能，输入 grep 然后用上下箭头可以翻阅你执行的所有 grep 命令。</p>
</li>
<li><p>智能拼写纠正，输入gtep mactalk * -R，系统会提示：zsh: correct ‘gtep’ to ‘grep’ [nyae]? 比妹纸贴心吧，她们向来都是让你猜的……</p>
</li>
<li><p>各种补全：路径补全、命令补全，命令参数补全，插件内容补全等等。触发补全只需要按一下或两下 tab 键，补全项可以使用 ctrl+n/p/f/b上下左右切换。比如你想杀掉 java 的进程，只需要输入 kill java + tab键，如果只有一个 java 进程，zsh 会自动替换为进程的 pid，如果有多个则会出现选择项供你选择。ssh + 空格 + 两个tab键，zsh会列出所有访问过的主机和用户名进行补全</p>
</li>
<li><p>智能跳转，安装了autojump之后，zsh 会自动记录你访问过的目录，通过 j + 目录名 可以直接进行目录跳转，而且目录名支持模糊匹配和自动补全，例如你访问过hadoop-1.0.0目录，输入j hado 即可正确跳转。j –stat 可以看你的历史路径库。</p>
</li>
<li><p>目录浏览和跳转：输入 d，即可列出你在这个会话里访问的目录列表，输入列表前的序号，即可直接跳转。</p>
</li>
<li><p>在当前目录下输入 .. 或 … ，或直接输入当前目录名都可以跳转，你甚至不再需要输入 cd 命令了。</p>
</li>
<li><p>通配符搜索：ls -l <em>*/</em>.sh，可以递归显示当前目录下的 shell 文件，文件少时可以代替 find，文件太多就歇菜了。</p>
</li>
<li><p>更强的别名：请参考配置一节。</p>
</li>
<li><p>插件支持：请参考插件一节。</p>
</li>
</ol>
<p>……</p>
<p>看完这篇文章，你就知道，zsh一出，无人再与争锋！终极二字不是盖的。</p>
<p>如果你是个正在使用 shell程序员，如果你依然准备使用 bash，那就去面壁和忏悔吧，别说你订阅过 MacTalk！</p>
<p>感谢那位开发了 oh my zsh 的无聊程序员，他可能没有因此收获物质上的利益，但是他的代码提升了无数程序员的效率，节省了大量的时间，我们说，程序员改变世界！</p>
<p>MacTalk 写的多了，朋友和家人都不太理解，这玩意赚不了钱争不了名，写来何用？我想，能够学习、编码、写作，并做出一点帮助别人的东西，总好过炒股炒房的价值吧，尽管人家比咱「富」多了……</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="终极_Shell">终极 Shell</h1><p><img src="http://macshuo.com/wp-content/uploads/2013/07/zsh1.png" alt=""></p>
<p>在开始今天的 MacTalk 之前，先问两个问题吧：</p>
<p>1、相对于其他系统，Mac 的主要优势是什么？<br>2、你们平时用哪种 Shell？<br>……</p>
<p>第一个童靴可以坐下了，Mac 的最大优势是 GUI 和命令行的完美结合，不要把所有注意力放在 Mac 性感的腰身和明媚的显示屏上好吧，这不是妹纸！第二个童靴你可以出去面壁了，讲了这么多期 MacTalk 你告诉我还在用 Windows 的 cmd， 你让 Mac 君情何以堪？哪怕你就说在用 Linux 的 Bash 我也就原谅你了，踢飞！</p>
<p>上次在「如何学习一门编程语言」里提到了 Shell，也有读者问到 Shell 的问题，所以这次给大家说说 Shell 的事。</p>
<p>我在「趣谈个人建站」里介绍过一点 Shell，自己的东西借用下不丢人，把扯淡的拿掉，干货留下，就是如下内容：</p>
<p>Shell是Linux/Unix的一个外壳，你理解成衣服也行。它负责外界与Linux内核的交互，接收用户或其他应用程序的命令，然后把这些命令转化成内核能理解的语言，传给内核，内核是真正干活的，干完之后再把结果返回用户或应用程序。</p>
<p>Linux/Unix提供了很多种Shell，为毛要这么多Shell？难道用来炒着吃么？那我问你，你同类型的衣服怎么有那么多件？花色，质地还不一样。写程序比买衣服复杂多了，而且程序员往往负责把复杂的事情搞简单，简单的事情搞复杂。牛程序员看到不爽的Shell，就会自己重新写一套，慢慢形成了一些标准，常用的Shell有这么几种，sh、bash、csh等，想知道你的系统有几种shell，可以通过以下命令查看：</p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Reveal1.5.1-config]]></title>
    <link href="http://ytlvy.com/2015/09/27/Reveal1-5-1-config/"/>
    <id>http://ytlvy.com/2015/09/27/Reveal1-5-1-config/</id>
    <published>2015-09-27T12:57:53.000Z</published>
    <updated>2015-09-27T12:58:18.000Z</updated>
    <content type="html"><![CDATA[<h2 id="最新Reveal_1-5-1_详细配置实战">最新Reveal 1.5.1 详细配置实战</h2><h3 id="Reveal公共配置">Reveal公共配置</h3><p>在当前用户目录下，打开终端中新建一个.lldbinit文件,位置是~/.lldbinit。<br>命令是: <code>vim ~/.lldbinit</code></p>
<p>然后粘贴下面代码保存：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">command alias reveal_load_sim expr (<span class="keyword">void</span>*)dlopen(<span class="string">"/Applications/Reveal.app/Contents/SharedSupport/iOS-Libraries/libReveal.dylib"</span>, <span class="number">0x2</span>);</span><br><span class="line"></span><br><span class="line">command alias reveal_load_dev expr (<span class="keyword">void</span>*)dlopen([(<span class="built_in">NSString</span>*)[(<span class="built_in">NSBundle</span>*)[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"libReveal"</span> ofType:<span class="string">@"dylib"</span>] cStringUsingEncoding:<span class="number">0x4</span>], <span class="number">0x2</span>);</span><br><span class="line"></span><br><span class="line">command alias reveal_start expr (<span class="keyword">void</span>)[(<span class="built_in">NSNotificationCenter</span>*)[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"IBARevealRequestStart"</span> object:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">command alias reveal_stop expr (<span class="keyword">void</span>)[(<span class="built_in">NSNotificationCenter</span>*)[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"IBARevealRequestStop"</span> object:<span class="literal">nil</span>];</span><br></pre></td></tr></table></figure></p>
<h3 id="连接到模拟器调试">连接到模拟器调试</h3><p>在项目代理中的application:didFinishLaunchingWithOptions:方法中，进行以下几步，</p>
<ol>
<li>添加一个断点，并右击编辑</li>
<li>单击“Action”右边的“+”，输入“reveal_load_sim”</li>
<li>勾选上“Option” 上的选项 “Automatically continue after evaluating”,</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-efd3c90a0222e253.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后运行APP在模拟器，打开Reveal就可以看到左上角有个连接调试。</p>
<h3 id="连接到真机调试">连接到真机调试</h3><ol>
<li>添加Reveal链接动态库到我们工程：在Reveal菜单“Help”-&gt;”Show Reveal Library in Finder” 找到动态库后拖拽到工程中；</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-62a93777652c1065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>把这2个文件直接拉到下面</p>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-67302b500f46992e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>成功拉到库中</p>
<ol>
<li>注意Xcode默认是将其设置到“Link Binary With Libraries”中，需要删除它，并添加到 “Copy Bundle Resources”下面；</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-da34f7567ebd834f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原来位置"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-a236d8e05c59a29d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="选中上面的libReveal.dylib,直接拽拉到下面"></p>
<ol>
<li>选中 Build Settings栏找到Linking下面的Other Linker Flags setting:</li>
</ol>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-e48e3976ae254be8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="当前选项为空"></p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-ObjC -lz -framework Reveal</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-9aaf294a1f34edc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<ol>
<li>在项目代理中的application:didFinishLaunchingWithOptions:方法中，进行以下几步，</li>
</ol>
<p>第一：添加一个断点，并右击编辑<br>第二：单击“Action”右边的“+”，输入“reveal_load_dev”<br>第三：勾选上“Option” 上的选项 “Automatically continue after evaluating”,</p>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-10ab9560cc4d4c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>按command+R编译项目，在Reveal中可以看到:</p>
<p><img src="http://upload-images.jianshu.io/upload_images/99517-c474c84f0f453909.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="最新Reveal_1-5-1_详细配置实战">最新Reveal 1.5.1 详细配置实战</h2><h3 id="Reveal公共配置">Reveal公共配置</h3><p>在当前用户目录下，打开终端中新建一个.lldbinit文件,位置是~/.lldbinit。]]>
    </summary>
    
      <category term="Tool" scheme="http://ytlvy.com/tags/Tool/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[QQ LRC]]></title>
    <link href="http://ytlvy.com/2015/09/01/QQ-LRC/"/>
    <id>http://ytlvy.com/2015/09/01/QQ-LRC/</id>
    <published>2015-09-01T13:59:14.000Z</published>
    <updated>2015-09-01T14:30:04.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://blog.0xbbc.com/2015/03/qq%E9%9F%B3%E4%B9%90%E7%9A%84qrc%E6%AD%8C%E8%AF%8D%E5%88%86%E6%9E%90/" target="_blank" rel="external">reference</a></p>
<h2 id="QQ音乐的QRC歌词分析">QQ音乐的QRC歌词分析</h2><h3 id="QRC_Sample">QRC Sample</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;QrcInfos&gt;</span><br><span class="line">&lt;QrcHeadInfo SaveTime="<span class="number">1400298876</span>" Version="100"/&gt;</span><br><span class="line">&lt;LyricInfo LyricCount="1"&gt;</span><br><span class="line">&lt;Lyric_1 LyricType="1" LyricContent="[ti:<span class="keyword">A</span> Sky Full of Stars]</span><br><span class="line">[ar:Coldplay]</span><br><span class="line">[al:Ghost Stories]</span><br><span class="line">[by:]</span><br><span class="line">[offset:0]</span><br><span class="line">[<span class="number">750,1330</span>]<span class="keyword">A</span> (<span class="number">750,180</span>)Sky (<span class="number">930,180</span>)Full (<span class="number">1110,150</span>)of (<span class="number">1260,180</span>)Stars (<span class="number">1440,140</span>)- (<span class="number">1580,160</span>)Coldplay(<span class="number">1740,340</span>)</span><br><span class="line">[<span class="number">17598,1070</span>]Cause (<span class="number">17598,230</span>)you're (<span class="number">17828,210</span>)a (<span class="number">18038,250</span>)sky,(<span class="number">18288,380</span>)</span><br><span class="line">[<span class="number">19488,2660</span>]cause (<span class="number">19488,210</span>)you're (<span class="number">19698,260</span>)a (<span class="number">19958,200</span>)sky (<span class="number">20158,1130</span>)full (<span class="number">21288,220</span>)of (<span class="number">21508,260</span>)stars(<span class="number">21768,380</span>)</span><br><span class="line">[<span class="number">25128,2850</span>]I'm (<span class="number">25128,270</span>)gonna (<span class="number">25398,350</span>)give (<span class="number">25748,550</span>)you (<span class="number">27028,220</span>)my (<span class="number">27248,350</span>)heart(<span class="number">27598,380</span>)</span><br><span class="line">[<span class="number">33028,1180</span>]Cause (<span class="number">33028,180</span>)you're (<span class="number">33208,210</span>)a (<span class="number">33418,230</span>)sky,(<span class="number">33648,560</span>)</span><br><span class="line">[<span class="number">34808,2710</span>]cause (<span class="number">34808,430</span>)you're (<span class="number">35238,190</span>)a (<span class="number">35428,460</span>)sky (<span class="number">35888,820</span>)full (<span class="number">36708,190</span>)of (<span class="number">36898,230</span>)stars(<span class="number">37128,390</span>)</span><br><span class="line">[<span class="number">40858,2499</span>]Cause (<span class="number">40858,180</span>)you (<span class="number">41038,190</span>)light (<span class="number">41228,1270</span>)up (<span class="number">42498,200</span>)the (<span class="number">42698,200</span>)path(<span class="number">42898,459</span>)</span><br><span class="line">[<span class="number">48257,4709</span>]I (<span class="number">48257,260</span>)don't (<span class="number">48517,260</span>)care, (<span class="number">48777,460</span>)go (<span class="number">50017,240</span>)on (<span class="number">50257,360</span>)and (<span class="number">50617,220</span>)tear (<span class="number">50837,950</span>)me (<span class="number">51787,520</span>)apart(<span class="number">52307,659</span>)</span><br><span class="line">[<span class="number">55896,2909</span>]I (<span class="number">55896,300</span>)don't (<span class="number">56196,250</span>)care (<span class="number">56446,899</span>)if (<span class="number">57345,390</span>)you (<span class="number">57735,270</span>)do(<span class="number">58005,800</span>)</span><br><span class="line">[<span class="number">63625,1020</span>]Cause (<span class="number">63625,200</span>)in (<span class="number">63825,220</span>)a (<span class="number">64045,210</span>)sky,(<span class="number">64255,390</span>)</span><br><span class="line">[<span class="number">65585,2580</span>]cause (<span class="number">65585,200</span>)in (<span class="number">65785,190</span>)a (<span class="number">65975,180</span>)sky (<span class="number">66155,630</span>)full (<span class="number">67405,190</span>)of (<span class="number">67595,200</span>)stars(<span class="number">67795,370</span>)</span><br><span class="line">[<span class="number">69215,1130</span>]I (<span class="number">69215,200</span>)think (<span class="number">69415,160</span>)I (<span class="number">69575,170</span>)saw (<span class="number">69745,260</span>)you(<span class="number">70005,340</span>)</span><br><span class="line">[<span class="number">102247,1010</span>]Cause (<span class="number">102247,240</span>)you're (<span class="number">102487,210</span>)a (<span class="number">102697,220</span>)sky,(<span class="number">102917,340</span>)</span><br><span class="line">[<span class="number">103967,2550</span>]cause (<span class="number">103967,260</span>)you're (<span class="number">104227,190</span>)a (<span class="number">104417,210</span>)sky (<span class="number">104627,330</span>)full (<span class="number">105677,230</span>)of (<span class="number">105907,230</span>)stars(<span class="number">106137,380</span>)</span><br><span class="line">[<span class="number">109717,3710</span>]I (<span class="number">109717,210</span>)want (<span class="number">109927,210</span>)to (<span class="number">110137,200</span>)die (<span class="number">110337,360</span>)in (<span class="number">111527,210</span>)your (<span class="number">111737,220</span>)arms, (<span class="number">111957,440</span>)arms(<span class="number">113107,320</span>)</span><br><span class="line">[<span class="number">117507,4609</span>]Cause (<span class="number">117507,220</span>)you (<span class="number">117727,190</span>)get (<span class="number">117917,190</span>)lighter (<span class="number">118107,350</span>)the (<span class="number">119307,220</span>)more (<span class="number">119527,1090</span>)it (<span class="number">120617,510</span>)gets (<span class="number">121127,390</span>)dark(<span class="number">121517,599</span>)</span><br><span class="line">[<span class="number">125096,2730</span>]I'm (<span class="number">125096,200</span>)going (<span class="number">125296,240</span>)to (<span class="number">125536,340</span>)give (<span class="number">125876,1000</span>)you (<span class="number">126876,200</span>)my (<span class="number">127076,250</span>)heart(<span class="number">127326,500</span>)</span><br><span class="line">[<span class="number">131126,2840</span>]And (<span class="number">131126,450</span>)I (<span class="number">131576,1180</span>)don't (<span class="number">132756,470</span>)care,(<span class="number">133226,740</span>)</span><br><span class="line">[<span class="number">134666,2600</span>]go (<span class="number">134666,210</span>)on (<span class="number">134876,260</span>)and (<span class="number">135136,190</span>)tear (<span class="number">135326,1150</span>)me (<span class="number">136476,370</span>)apart(<span class="number">136846,420</span>)</span><br><span class="line">[<span class="number">140456,2580</span>]And (<span class="number">140456,210</span>)I (<span class="number">140666,290</span>)don't (<span class="number">140956,200</span>)care (<span class="number">141156,690</span>)if (<span class="number">141846,450</span>)you (<span class="number">142296,210</span>)do(<span class="number">142506,530</span>)</span><br><span class="line">[<span class="number">148266,960</span>]Cause (<span class="number">148266,190</span>)in (<span class="number">148456,210</span>)a (<span class="number">148666,190</span>)sky,(<span class="number">148856,370</span>)</span><br><span class="line">[<span class="number">150026,2890</span>]cause (<span class="number">150026,220</span>)in (<span class="number">150246,180</span>)a (<span class="number">150426,200</span>)sky (<span class="number">150626,1220</span>)full (<span class="number">151846,210</span>)of (<span class="number">152056,220</span>)stars(<span class="number">152276,640</span>)</span><br><span class="line">[<span class="number">153956,3280</span>]I (<span class="number">153956,190</span>)think (<span class="number">154146,200</span>)I (<span class="number">154346,340</span>)see (<span class="number">154686,290</span>)you(<span class="number">154976,2260</span>)</span><br><span class="line">[<span class="number">161426,1989</span>]I (<span class="number">161426,210</span>)think (<span class="number">161636,170</span>)I (<span class="number">161806,570</span>)see (<span class="number">162376,460</span>)you(<span class="number">162836,579</span>)</span><br><span class="line">[<span class="number">217294,1340</span>]Because (<span class="number">217294,300</span>)you're (<span class="number">217594,250</span>)a (<span class="number">217844,330</span>)sky,(<span class="number">218174,460</span>)</span><br><span class="line">[<span class="number">219324,2580</span>]you're (<span class="number">219324,240</span>)a (<span class="number">219564,240</span>)sky (<span class="number">219804,1130</span>)full (<span class="number">220934,220</span>)of (<span class="number">221154,280</span>)stars(<span class="number">221434,470</span>)</span><br><span class="line">[<span class="number">222474,1740</span>]Such (<span class="number">222474,260</span>)a (<span class="number">222734,260</span>)Heavenly (<span class="number">222994,570</span>)view(<span class="number">223564,650</span>)</span><br><span class="line">[<span class="number">229794,3499</span>]You're (<span class="number">229794,210</span>)such (<span class="number">230004,200</span>)a (<span class="number">230204,220</span>)Heavenly (<span class="number">230424,709</span>)view(<span class="number">231133,2160</span>)</span><br><span class="line">"/&gt;</span><br><span class="line">&lt;/LyricInfo&gt;</span><br><span class="line">&lt;/QrcInfos&gt;</span><br></pre></td></tr></table></figure>
<p>简单来说就是一份XML文档，</p>
<ol>
<li>根节点是<code>&lt;QrcInfos&gt;</code>。</li>
<li>子节点<code>&lt;QrcHeadInfo SaveTime=&quot;1400298876&quot; Version=&quot;100&quot;/&gt;</code>记录了这份QRC歌词的保存时间和版本号，这里的版本应该是指当前QRC的版本，而非歌词内容的版本。</li>
<li>接下来的<lyricinfo lyriccount="1">记录了这份QRC里面保存的歌词数量。</lyricinfo></li>
<li>然后根据歌词数量，从1开始，对应歌词的节点名为&lt;Lyric_$i<br>其中$i为对应的index。</li>
</ol>
<p>比如，第一个歌词就应该是：</p>
<lyric_1 lyrictype="1" lyriccontent="Lyric Content ... ">

<ol>
<li>LyricContent 前面部分和普通的LRC一样，但是在时间轴部分用了新的格式。</li>
</ol>
<a id="more"></a>
<p>以第一句为例，<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">750</span>,<span class="number">1330</span>]A <span class="list">(<span class="keyword">750</span>,<span class="number">180</span>)</span>Sky <span class="list">(<span class="keyword">930</span>,<span class="number">180</span>)</span>Full <span class="list">(<span class="keyword">1110</span>,<span class="number">150</span>)</span>of <span class="list">(<span class="keyword">1260</span>,<span class="number">180</span>)</span>Stars <span class="list">(<span class="keyword">1440</span>,<span class="number">140</span>)</span>- <span class="list">(<span class="keyword">1580</span>,<span class="number">160</span>)</span>Coldplay<span class="list">(<span class="keyword">1740</span>,<span class="number">340</span>)</span></span></span><br></pre></td></tr></table></figure></p>
<p>即形如：<br><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">[<span class="keyword">time_1</span>,duration_1] Word <span class="number">1</span> <span class="list">(<span class="keyword">time_2</span>, duration_2)</span> Word <span class="number">2</span> <span class="list">(<span class="keyword">time_3</span>, duration_3)</span> Word <span class="number">3</span> ...</span></span><br></pre></td></tr></table></figure></p>
<p>那么这里的<code>time_1</code>是以微秒为单位的，从音乐开始(00:00.00)到这一句的时间</p>
<p><code>duration_1</code>是这一整句歌词的持续时间, <code>1330 = 180 + 180 + 150 + 180 + 140 + 160 + 340</code>;</p>
<p>剩余的time_2, time_3 … 也是从音乐开始(00:00.00)到这一句的时间，不过只有以[]开头的才是一句歌词的开始。 duration_2, duration_3 … 都是紧跟在后面的Word的持续时间。</p>
<p>通过解析这些标记，QQ音乐便可以实现高亮进度准确地跟着歌词。</p>
<h3 id="QRC格式歌词转LRC格式">QRC格式歌词转LRC格式</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import <span class="title">&lt;Foundation/Foundation.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;string&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;regex.h&gt;</span></span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief      把微秒时间转为LRC中的时间</span><br><span class="line"> *</span><br><span class="line"> *  @discussion 并未考虑超过99:59.99的时间</span><br><span class="line"> *</span><br><span class="line"> *  @return     [dd:dd.dd]</span><br><span class="line"> */</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * microseconds_to_LRC_time(<span class="keyword">long</span> <span class="keyword">long</span> microsecond)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">double</span> seconds = microsecond / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="keyword">int</span> min = seconds / <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">double</span> sec = seconds - <span class="number">60</span> * min;</span><br><span class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%02d:%05.2lf"</span>,min,sec]<span class="variable">.UTF8String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">QRC</span> : <span class="title">NSObject</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief  解析QRC到LRC</span><br><span class="line"> *</span><br><span class="line"> *  @param QRCPath QRC文件路径</span><br><span class="line"> *  @param error   出错时返回错误码和原因</span><br><span class="line"> */</span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)ParserQRCDoc:(<span class="built_in">NSString</span> *)QRCPath Error:(<span class="built_in">NSError</span> **)error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">QRC</span></span></span><br><span class="line"></span><br><span class="line">+ (<span class="keyword">void</span>)ParserQRCDoc:(<span class="built_in">NSString</span> *)QRCPath</span><br><span class="line">               Error:(<span class="built_in">NSError</span> **)error</span><br><span class="line">&#123;</span><br><span class="line">    ifstream QRC_file(QRCPath<span class="variable">.UTF8String</span>);</span><br><span class="line">    <span class="keyword">if</span>(!QRC_file)</span><br><span class="line">    &#123;</span><br><span class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@"com.0xBBC.QRC"</span> code:-<span class="number">1</span> userInfo:@&#123;<span class="string">@"Error"</span>:<span class="string">@"No such file"</span>&#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line">    <span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line">    regex_t reg;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\[([0-9]+)"</span>;</span><br><span class="line">    <span class="comment">// 匹配以'['开头, 并且后面跟着数字的就行了</span></span><br><span class="line">    <span class="comment">// 因为是转为LRC, 故提取出每句开始的时间就行</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> z = regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (z != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">        regerror(z, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">        *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@"com.0xBBC.QRC"</span> code:-<span class="number">2</span> userInfo:@&#123;<span class="string">@"Error"</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%s"</span>,ebuf]&#125;];</span><br><span class="line">        regfree(&amp;reg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regmatch_t pm[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">const</span> size_t nmatch = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(getline(QRC_file, str))</span><br><span class="line">    &#123;</span><br><span class="line">        z = regexec(&amp;reg, str<span class="variable">.c_str</span>(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (z == REG_NOMATCH)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">            regerror(z, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">            *error = [[<span class="built_in">NSError</span> alloc] initWithDomain:<span class="string">@"com.0xBBC.QRC"</span> code:-<span class="number">3</span> userInfo:@&#123;<span class="string">@"Error"</span>:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%s"</span>,ebuf]&#125;];</span><br><span class="line">            regfree(&amp;reg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">char</span> * line = str<span class="variable">.c_str</span>();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x]<span class="variable">.rm_so</span> != -<span class="number">1</span>; ++ x)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">char</span> *mstr = strndup(line + pm[x]<span class="variable">.rm_so</span>, pm[x]<span class="variable">.rm_eo</span> - pm[x]<span class="variable">.rm_so</span>);</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> microseconds = atoll(mstr);</span><br><span class="line">                free(mstr);</span><br><span class="line">                printf(<span class="string">"[%s]"</span>,microseconds_to_LRC_time(microseconds));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">BOOL</span> print = <span class="literal">YES</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strlen(line); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (line[i] == <span class="string">'['</span> || line[i] == <span class="string">'('</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    print = <span class="literal">NO</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">']'</span> || line[i] == <span class="string">')'</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    print = <span class="literal">YES</span>;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (print) printf(<span class="string">"%c"</span>,line[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            printf(<span class="string">"n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        fflush(stdout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="keyword">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="built_in">NSError</span> *error;</span><br><span class="line">            [QRC ParserQRCDoc:[<span class="built_in">NSString</span> stringWithUTF8String:argv[i]] Error:&amp;error];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/03/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-03-24-%E4%B8%8B%E5%8D%881.23.31.png" alt=""></p>
<h3 id="QRC与LRC合并">QRC与LRC合并</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br></pre></td><td class="code"><pre><span class="line">#<span class="keyword">import</span> &lt;Foundation/Foundation.h&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;string&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;iostream&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;fstream&gt;</span><br><span class="line">#<span class="keyword">import</span> &lt;regex.h&gt;</span><br><span class="line"> </span><br><span class="line">using namespace std;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief      把微秒时间转为LRC中的时间</span><br><span class="line"> *</span><br><span class="line"> *  @discussion 并未考虑超过99:59.99的时间</span><br><span class="line"> *</span><br><span class="line"> *  @return     [dd:dd.dd]</span><br><span class="line"> */</span></span><br><span class="line"> </span><br><span class="line">const <span class="typename">char</span> * microseconds_to_LRC_time(<span class="typename">long</span> <span class="typename">long</span> microsecond) &#123;</span><br><span class="line">    <span class="typename">double</span> seconds = microsecond / <span class="number">1000.0</span>;</span><br><span class="line">    <span class="typename">int</span> min = seconds / <span class="number">60</span>;</span><br><span class="line">    <span class="typename">double</span> sec = seconds - <span class="number">60</span> * min;</span><br><span class="line">    <span class="keyword">return</span> [NSString <span class="string">stringWithFormat:</span>@<span class="string">"%02d:%05.2lf"</span>,min,sec].UTF8String;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="annotation">@interface</span> <span class="string">QRC :</span> NSObject</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*!</span><br><span class="line"> *  @brief  合并QRC与LRC</span><br><span class="line"> *</span><br><span class="line"> *  @param QRCPath QRC文件路径</span><br><span class="line"> *  @param LRCPath LRC文件路径</span><br><span class="line"> *  @param error   出错时返回错误码和原因</span><br><span class="line"> */</span></span><br><span class="line">+ (<span class="typename">void</span>)<span class="string">ParserQRCDoc:</span>(NSString *)QRCPath <span class="string">CombineLRC:</span>(NSString *)LRCPath <span class="string">Error:</span>(NSError **)error;</span><br><span class="line"><span class="annotation">@end</span></span><br><span class="line"></span><br><span class="line"><span class="annotation">@implementation</span> QRC</span><br><span class="line"></span><br><span class="line">+ (<span class="typename">void</span>)<span class="string">ParserQRCDoc:</span>(NSString *)QRCPath <span class="string">CombineLRC:</span>(NSString *)LRCPath <span class="string">Error:</span>(NSError **)error &#123;</span><br><span class="line">    NSMutableArray * array = [NSMutableArray <span class="keyword">new</span>];</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Handle QRC</span><br><span class="line"></span><br><span class="line">    ifstream QRC_in(QRCPath.UTF8String);</span><br><span class="line">    <span class="keyword">if</span>(!QRC_in) &#123;</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">1</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:@<span class="string">"No such QRC file"</span>&#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    string str;</span><br><span class="line">    <span class="typename">int</span> cflags = REG_EXTENDED;</span><br><span class="line">    regex_t reg;</span><br><span class="line">    const <span class="typename">char</span> * pattern = <span class="string">"^\[([0-9]+)"</span>;</span><br><span class="line">    <span class="comment">// 匹配以'['开头, 并且后面跟着数字的就行了</span></span><br><span class="line">    <span class="comment">// 因为是转为LRC, 故提取出每句开始的时间就行</span></span><br><span class="line"></span><br><span class="line">    <span class="typename">int</span> z = regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">        regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">2</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">        regfree(&amp;reg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    regmatch_t pm[<span class="number">10</span>];</span><br><span class="line">    const size_t nmatch = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(getline(QRC_in, str)) &#123;</span><br><span class="line">        z = regexec(&amp;reg, str.c_str(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (z == REG_NOMATCH) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">            regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">            *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">3</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">            regfree(&amp;reg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            const <span class="typename">char</span> * line = str.c_str();</span><br><span class="line">            <span class="typename">long</span> <span class="typename">long</span> microseconds = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="typename">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x].rm_so != -<span class="number">1</span>; ++ x) &#123;</span><br><span class="line">                <span class="typename">char</span> *mstr = strndup(line + pm[x].rm_so, pm[x].rm_eo-pm[x].rm_so);</span><br><span class="line">                microseconds = atoll(mstr);</span><br><span class="line">                free(mstr);</span><br><span class="line">            &#125;</span><br><span class="line">            BOOL print = YES;</span><br><span class="line">            <span class="typename">char</span> * lrc = (<span class="typename">char</span> *)malloc(sizeof(<span class="typename">char</span>) * <span class="number">512</span>);</span><br><span class="line">            <span class="typename">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="typename">int</span> i = <span class="number">0</span>; i &lt; strlen(line); i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (line[i] == <span class="string">'['</span> || line[i] == <span class="string">'('</span>) &#123;</span><br><span class="line">                    print = NO;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">']'</span> || line[i] == <span class="string">')'</span>) &#123;</span><br><span class="line">                    print = YES;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (print) &#123;</span><br><span class="line">                        lrc[index] = line[i];</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            lrc[index] = <span class="string">''</span>;</span><br><span class="line">            [array <span class="string">addObject:</span>@&#123;@<span class="string">"Time"</span>:[[NSString alloc] <span class="string">initWithFormat:</span>@<span class="string">"%lld"</span>,microseconds],@<span class="string">"Type"</span>:@<span class="string">"QRC"</span>,@<span class="string">"LRC"</span>:[[NSString alloc] <span class="string">initWithCString:</span>lrc <span class="string">encoding:</span>NSUTF8StringEncoding]&#125;];</span><br><span class="line">            free(lrc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Handle LRC</span><br><span class="line"></span><br><span class="line">    ifstream LRC_in(LRCPath.UTF8String);</span><br><span class="line">    <span class="keyword">if</span>(!LRC_in) &#123;</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">4</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:@<span class="string">"No such LRC file"</span>&#125;];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    const <span class="typename">char</span> * LRC_pattern = <span class="string">"^\[([0-9]+):([0-9]+).([0-9]+)"</span>;</span><br><span class="line">    z = regcomp(&amp;reg, LRC_pattern, cflags);</span><br><span class="line">    <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">        regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">        *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">5</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">        regfree(&amp;reg);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(getline(LRC_in, str)) &#123;</span><br><span class="line">        z = regexec(&amp;reg, str.c_str(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (z == REG_NOMATCH) printf(<span class="string">"%sn"</span>,str.c_str());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (z != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="typename">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">            regerror(z, &amp;reg, ebuf, sizeof(ebuf));</span><br><span class="line">            *error = [[NSError alloc] <span class="string">initWithDomain:</span>@<span class="string">"com.0xBBC.QRC"</span> <span class="string">code:</span>-<span class="number">6</span> <span class="string">userInfo:</span>@&#123;@<span class="string">"Error"</span>:[NSString <span class="string">stringWithFormat:</span>@<span class="string">"%s"</span>,ebuf]&#125;];</span><br><span class="line">            regfree(&amp;reg);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            const <span class="typename">char</span> * line = str.c_str();</span><br><span class="line">            <span class="typename">long</span> <span class="typename">long</span> microseconds = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="typename">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x].rm_so != -<span class="number">1</span>; ++ x)&#123;</span><br><span class="line">                <span class="typename">char</span> *mstr = strndup(line + pm[x].rm_so, pm[x].rm_eo-pm[x].rm_so);</span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">1</span>) microseconds += atoll(mstr) * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>) microseconds += atoll(mstr) * <span class="number">1000</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>) microseconds += atoll(mstr) * <span class="number">10</span>;</span><br><span class="line">                free(mstr);</span><br><span class="line">            &#125;</span><br><span class="line">            BOOL print = YES;</span><br><span class="line">            <span class="typename">char</span> * lrc = (<span class="typename">char</span> *)malloc(sizeof(<span class="typename">char</span>) * <span class="number">512</span>);</span><br><span class="line">            <span class="typename">int</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="typename">int</span> i = <span class="number">0</span>; i &lt; strlen(line); i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (line[i] == <span class="string">'['</span> || line[i] == <span class="string">'('</span>)&#123;</span><br><span class="line">                    print = NO;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line[i] == <span class="string">']'</span> || line[i] == <span class="string">')'</span>)&#123;</span><br><span class="line">                    print = YES;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (print)&#123;</span><br><span class="line">                        lrc[index] = line[i];</span><br><span class="line">                        index++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            lrc[index] = <span class="string">''</span>;</span><br><span class="line">            NSString * LRC_Content = [[NSString alloc] <span class="string">initWithCString:</span>lrc <span class="string">encoding:</span>NSUTF8StringEncoding];</span><br><span class="line">            <span class="keyword">if</span> (LRC_Content.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                [array <span class="string">addObject:</span>@&#123;@<span class="string">"Time"</span>:[[NSString alloc] <span class="string">initWithFormat:</span>@<span class="string">"%lld"</span>, microseconds], @<span class="string">"Type"</span> : @<span class="string">"LRC"</span>, @<span class="string">"LRC"</span> : LRC_Content&#125;];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Sort LRC &amp; QRC</span><br><span class="line"></span><br><span class="line">    [array <span class="string">sortUsingComparator:</span>^NSComparisonResult(NSDictionary * obj1, NSDictionary * obj2) &#123;</span><br><span class="line">        <span class="typename">long</span> <span class="typename">long</span> t1 = [[obj1 <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue];</span><br><span class="line">        <span class="typename">long</span> <span class="typename">long</span> t2 = [[obj2 <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue];</span><br><span class="line">        <span class="keyword">if</span> (t1 &gt; t2) <span class="keyword">return</span> NSOrderedDescending;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t1 == t2) <span class="keyword">return</span> NSOrderedSame;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> NSOrderedAscending;</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">#pragma mark</span><br><span class="line">#pragma mark - Combine</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="typename">int</span> i = <span class="number">1</span>; i &lt; array.count; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (abs([[[array <span class="string">objectAtIndex:</span>i - <span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue] - [[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]) &lt; <span class="number">600</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ([[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Type"</span>] <span class="string">isEqualToString:</span>@<span class="string">"QRC"</span>]) &#123;</span><br><span class="line">                printf(<span class="string">"[%s] %s %sn"</span>,microseconds_to_LRC_time([[[array <span class="string">objectAtIndex:</span>i-<span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]),[(NSString *)[[array <span class="string">objectAtIndex:</span>i-<span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String],[(NSString *)[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                printf(<span class="string">"[%s] %s %sn"</span>,microseconds_to_LRC_time([[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]),[(NSString *)[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String],[(NSString *)[[array <span class="string">objectAtIndex:</span>i-<span class="number">1</span>] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String]);</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            printf(<span class="string">"[%s] %sn"</span>,microseconds_to_LRC_time([[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"Time"</span>] longLongValue]),[(NSString *)[[array <span class="string">objectAtIndex:</span>i] <span class="string">valueForKey:</span>@<span class="string">"LRC"</span>] UTF8String]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@end</span></span><br><span class="line"></span><br><span class="line"><span class="typename">int</span> main(<span class="typename">int</span> argc, const <span class="typename">char</span> * argv[]) &#123;</span><br><span class="line">    <span class="annotation">@autoreleasepool</span> &#123;</span><br><span class="line">        <span class="typename">int</span> limition = argc;</span><br><span class="line">        <span class="keyword">if</span> (argc % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">            limition -= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="typename">int</span> i = <span class="number">1</span>; i &lt; limition; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            NSError *error;</span><br><span class="line">            [QRC <span class="string">ParserQRCDoc:</span>[NSString <span class="string">stringWithUTF8String:</span>argv[i]] <span class="string">CombineLRC:</span>[NSString <span class="string">stringWithUTF8String:</span>argv[i+<span class="number">1</span>]] <span class="string">Error:</span>&amp;error];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="合并多个LRC文件">合并多个LRC文件</h3><p>参数就是LRC文件的路径，非时间标签为处理。默认误差范围是600ms，以第一个LRC文件为准。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  main.cpp</span></span><br><span class="line"><span class="comment">//  LRCCombiner</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by BlueCocoa on 15/4/27.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015年 0xBBC. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;string&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;iostream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;fstream&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;regex.h&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;map&gt;</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;vector&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt; lyrics;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">1</span>; index &lt; argc; index++) &#123;</span><br><span class="line">        <span class="function">ifstream <span class="title">LRC_in</span><span class="params">(argv[index])</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!LRC_in) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"[ERROR] Can't open file at %s\n"</span>,argv[index]);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">string</span> str;</span><br><span class="line">        <span class="keyword">int</span> cflags = REG_EXTENDED;</span><br><span class="line">        <span class="keyword">regex_t</span> reg;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">char</span> * pattern = <span class="string">"^\\[([0-9]+).([0-9]+).([0-9]+)"</span>;</span><br><span class="line">        <span class="comment">// 匹配以'['开头, 并且后面跟着数字的就行了</span></span><br><span class="line"></span><br><span class="line">        regcomp(&amp;reg, pattern, cflags);</span><br><span class="line">        <span class="keyword">regmatch_t</span> pm[<span class="number">10</span>];</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">size_t</span> nmatch = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> result;</span><br><span class="line">        <span class="keyword">while</span>(getline(LRC_in, str)) &#123;</span><br><span class="line">            result = regexec(&amp;reg, str.c_str(), nmatch, pm, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (result == REG_NOMATCH) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (result != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">char</span> ebuf[<span class="number">128</span>];</span><br><span class="line">                regerror(result, &amp;reg, ebuf, <span class="keyword">sizeof</span>(ebuf));</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"[ERROR] Error on regexec: %s\n"</span>,ebuf);</span><br><span class="line">                regfree(&amp;reg);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> <span class="keyword">char</span> * line = str.c_str();</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> microseconds = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; nmatch &amp;&amp; pm[x].rm_so != -<span class="number">1</span>; x++) &#123;</span><br><span class="line">                    <span class="keyword">char</span> * mstr = strndup(line + pm[x].rm_so, pm[x].rm_eo-pm[x].rm_so);</span><br><span class="line">                    <span class="keyword">if</span> (pos % <span class="number">3</span> == <span class="number">0</span>) microseconds += atoll(mstr) * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (pos % <span class="number">3</span> == <span class="number">1</span>) microseconds += atoll(mstr) * <span class="number">1000</span>;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        microseconds += atoll(mstr) * <span class="number">10</span>;</span><br><span class="line">                        <span class="keyword">char</span> * lrc = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">512</span>);</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">10</span>; i &lt; <span class="built_in">strlen</span>(line); i++)</span><br><span class="line">                            lrc[i - <span class="number">10</span>] = line[i];</span><br><span class="line">                        <span class="keyword">if</span> (index != <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator lyric = lyrics.begin(); lyric != lyrics.end(); lyric++) &#123;</span><br><span class="line">                                <span class="keyword">long</span> <span class="keyword">long</span> microsecondInRecord = lyric-&gt;first;</span><br><span class="line">                                <span class="keyword">if</span> (microseconds &gt;= microsecondInRecord - <span class="number">300</span> &amp;&amp; microseconds &lt;= microsecondInRecord + <span class="number">300</span>) &#123;</span><br><span class="line">                                    lyrics[microsecondInRecord].push_back(<span class="built_in">string</span>(lrc));</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">else</span> lyrics[microseconds].push_back(<span class="built_in">string</span>(lrc));</span><br><span class="line">                        <span class="built_in">memset</span>(lrc, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>) * <span class="number">512</span>);</span><br><span class="line">                        <span class="built_in">free</span>(lrc);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">free</span>(mstr);</span><br><span class="line">                    pos++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">map</span>&lt;<span class="keyword">long</span> <span class="keyword">long</span>, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&gt;::iterator lyric = lyrics.begin(); lyric != lyrics.end(); lyric++) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> microseconds = lyric-&gt;first;</span><br><span class="line">        <span class="keyword">double</span> seconds = microseconds / <span class="number">1000.0</span>;</span><br><span class="line">        <span class="keyword">int</span> min = seconds / <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">double</span> sec = seconds - <span class="number">60</span> * min;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"[%02d:%05.2lf] "</span>,min,sec);</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; t = lyrics[microseconds];</span><br><span class="line">        t.reserve(argc - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">while</span> (! t.empty()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s "</span>,t.back().c_str());</span><br><span class="line">            t.pop_back();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
</lyric_1>]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://blog.0xbbc.com/2015/03/qq%E9%9F%B3%E4%B9%90%E7%9A%84qrc%E6%AD%8C%E8%AF%8D%E5%88%86%E6%9E%90/">reference</a></p>
<h2 id="QQ音乐的QRC歌词分析">QQ音乐的QRC歌词分析</h2><h3 id="QRC_Sample">QRC Sample</h3><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line">&lt;QrcInfos&gt;</span><br><span class="line">&lt;QrcHeadInfo SaveTime="<span class="number">1400298876</span>" Version="100"/&gt;</span><br><span class="line">&lt;LyricInfo LyricCount="1"&gt;</span><br><span class="line">&lt;Lyric_1 LyricType="1" LyricContent="[ti:<span class="keyword">A</span> Sky Full of Stars]</span><br><span class="line">[ar:Coldplay]</span><br><span class="line">[al:Ghost Stories]</span><br><span class="line">[by:]</span><br><span class="line">[offset:0]</span><br><span class="line">[<span class="number">750,1330</span>]<span class="keyword">A</span> (<span class="number">750,180</span>)Sky (<span class="number">930,180</span>)Full (<span class="number">1110,150</span>)of (<span class="number">1260,180</span>)Stars (<span class="number">1440,140</span>)- (<span class="number">1580,160</span>)Coldplay(<span class="number">1740,340</span>)</span><br><span class="line">[<span class="number">17598,1070</span>]Cause (<span class="number">17598,230</span>)you're (<span class="number">17828,210</span>)a (<span class="number">18038,250</span>)sky,(<span class="number">18288,380</span>)</span><br><span class="line">[<span class="number">19488,2660</span>]cause (<span class="number">19488,210</span>)you're (<span class="number">19698,260</span>)a (<span class="number">19958,200</span>)sky (<span class="number">20158,1130</span>)full (<span class="number">21288,220</span>)of (<span class="number">21508,260</span>)stars(<span class="number">21768,380</span>)</span><br><span class="line">[<span class="number">25128,2850</span>]I'm (<span class="number">25128,270</span>)gonna (<span class="number">25398,350</span>)give (<span class="number">25748,550</span>)you (<span class="number">27028,220</span>)my (<span class="number">27248,350</span>)heart(<span class="number">27598,380</span>)</span><br><span class="line">[<span class="number">33028,1180</span>]Cause (<span class="number">33028,180</span>)you're (<span class="number">33208,210</span>)a (<span class="number">33418,230</span>)sky,(<span class="number">33648,560</span>)</span><br><span class="line">[<span class="number">34808,2710</span>]cause (<span class="number">34808,430</span>)you're (<span class="number">35238,190</span>)a (<span class="number">35428,460</span>)sky (<span class="number">35888,820</span>)full (<span class="number">36708,190</span>)of (<span class="number">36898,230</span>)stars(<span class="number">37128,390</span>)</span><br><span class="line">[<span class="number">40858,2499</span>]Cause (<span class="number">40858,180</span>)you (<span class="number">41038,190</span>)light (<span class="number">41228,1270</span>)up (<span class="number">42498,200</span>)the (<span class="number">42698,200</span>)path(<span class="number">42898,459</span>)</span><br><span class="line">[<span class="number">48257,4709</span>]I (<span class="number">48257,260</span>)don't (<span class="number">48517,260</span>)care, (<span class="number">48777,460</span>)go (<span class="number">50017,240</span>)on (<span class="number">50257,360</span>)and (<span class="number">50617,220</span>)tear (<span class="number">50837,950</span>)me (<span class="number">51787,520</span>)apart(<span class="number">52307,659</span>)</span><br><span class="line">[<span class="number">55896,2909</span>]I (<span class="number">55896,300</span>)don't (<span class="number">56196,250</span>)care (<span class="number">56446,899</span>)if (<span class="number">57345,390</span>)you (<span class="number">57735,270</span>)do(<span class="number">58005,800</span>)</span><br><span class="line">[<span class="number">63625,1020</span>]Cause (<span class="number">63625,200</span>)in (<span class="number">63825,220</span>)a (<span class="number">64045,210</span>)sky,(<span class="number">64255,390</span>)</span><br><span class="line">[<span class="number">65585,2580</span>]cause (<span class="number">65585,200</span>)in (<span class="number">65785,190</span>)a (<span class="number">65975,180</span>)sky (<span class="number">66155,630</span>)full (<span class="number">67405,190</span>)of (<span class="number">67595,200</span>)stars(<span class="number">67795,370</span>)</span><br><span class="line">[<span class="number">69215,1130</span>]I (<span class="number">69215,200</span>)think (<span class="number">69415,160</span>)I (<span class="number">69575,170</span>)saw (<span class="number">69745,260</span>)you(<span class="number">70005,340</span>)</span><br><span class="line">[<span class="number">102247,1010</span>]Cause (<span class="number">102247,240</span>)you're (<span class="number">102487,210</span>)a (<span class="number">102697,220</span>)sky,(<span class="number">102917,340</span>)</span><br><span class="line">[<span class="number">103967,2550</span>]cause (<span class="number">103967,260</span>)you're (<span class="number">104227,190</span>)a (<span class="number">104417,210</span>)sky (<span class="number">104627,330</span>)full (<span class="number">105677,230</span>)of (<span class="number">105907,230</span>)stars(<span class="number">106137,380</span>)</span><br><span class="line">[<span class="number">109717,3710</span>]I (<span class="number">109717,210</span>)want (<span class="number">109927,210</span>)to (<span class="number">110137,200</span>)die (<span class="number">110337,360</span>)in (<span class="number">111527,210</span>)your (<span class="number">111737,220</span>)arms, (<span class="number">111957,440</span>)arms(<span class="number">113107,320</span>)</span><br><span class="line">[<span class="number">117507,4609</span>]Cause (<span class="number">117507,220</span>)you (<span class="number">117727,190</span>)get (<span class="number">117917,190</span>)lighter (<span class="number">118107,350</span>)the (<span class="number">119307,220</span>)more (<span class="number">119527,1090</span>)it (<span class="number">120617,510</span>)gets (<span class="number">121127,390</span>)dark(<span class="number">121517,599</span>)</span><br><span class="line">[<span class="number">125096,2730</span>]I'm (<span class="number">125096,200</span>)going (<span class="number">125296,240</span>)to (<span class="number">125536,340</span>)give (<span class="number">125876,1000</span>)you (<span class="number">126876,200</span>)my (<span class="number">127076,250</span>)heart(<span class="number">127326,500</span>)</span><br><span class="line">[<span class="number">131126,2840</span>]And (<span class="number">131126,450</span>)I (<span class="number">131576,1180</span>)don't (<span class="number">132756,470</span>)care,(<span class="number">133226,740</span>)</span><br><span class="line">[<span class="number">134666,2600</span>]go (<span class="number">134666,210</span>)on (<span class="number">134876,260</span>)and (<span class="number">135136,190</span>)tear (<span class="number">135326,1150</span>)me (<span class="number">136476,370</span>)apart(<span class="number">136846,420</span>)</span><br><span class="line">[<span class="number">140456,2580</span>]And (<span class="number">140456,210</span>)I (<span class="number">140666,290</span>)don't (<span class="number">140956,200</span>)care (<span class="number">141156,690</span>)if (<span class="number">141846,450</span>)you (<span class="number">142296,210</span>)do(<span class="number">142506,530</span>)</span><br><span class="line">[<span class="number">148266,960</span>]Cause (<span class="number">148266,190</span>)in (<span class="number">148456,210</span>)a (<span class="number">148666,190</span>)sky,(<span class="number">148856,370</span>)</span><br><span class="line">[<span class="number">150026,2890</span>]cause (<span class="number">150026,220</span>)in (<span class="number">150246,180</span>)a (<span class="number">150426,200</span>)sky (<span class="number">150626,1220</span>)full (<span class="number">151846,210</span>)of (<span class="number">152056,220</span>)stars(<span class="number">152276,640</span>)</span><br><span class="line">[<span class="number">153956,3280</span>]I (<span class="number">153956,190</span>)think (<span class="number">154146,200</span>)I (<span class="number">154346,340</span>)see (<span class="number">154686,290</span>)you(<span class="number">154976,2260</span>)</span><br><span class="line">[<span class="number">161426,1989</span>]I (<span class="number">161426,210</span>)think (<span class="number">161636,170</span>)I (<span class="number">161806,570</span>)see (<span class="number">162376,460</span>)you(<span class="number">162836,579</span>)</span><br><span class="line">[<span class="number">217294,1340</span>]Because (<span class="number">217294,300</span>)you're (<span class="number">217594,250</span>)a (<span class="number">217844,330</span>)sky,(<span class="number">218174,460</span>)</span><br><span class="line">[<span class="number">219324,2580</span>]you're (<span class="number">219324,240</span>)a (<span class="number">219564,240</span>)sky (<span class="number">219804,1130</span>)full (<span class="number">220934,220</span>)of (<span class="number">221154,280</span>)stars(<span class="number">221434,470</span>)</span><br><span class="line">[<span class="number">222474,1740</span>]Such (<span class="number">222474,260</span>)a (<span class="number">222734,260</span>)Heavenly (<span class="number">222994,570</span>)view(<span class="number">223564,650</span>)</span><br><span class="line">[<span class="number">229794,3499</span>]You're (<span class="number">229794,210</span>)such (<span class="number">230004,200</span>)a (<span class="number">230204,220</span>)Heavenly (<span class="number">230424,709</span>)view(<span class="number">231133,2160</span>)</span><br><span class="line">"/&gt;</span><br><span class="line">&lt;/LyricInfo&gt;</span><br><span class="line">&lt;/QrcInfos&gt;</span><br></pre></td></tr></table></figure>
<p>简单来说就是一份XML文档，</p>
<ol>
<li>根节点是<code>&lt;QrcInfos&gt;</code>。</li>
<li>子节点<code>&lt;QrcHeadInfo SaveTime=&quot;1400298876&quot; Version=&quot;100&quot;/&gt;</code>记录了这份QRC歌词的保存时间和版本号，这里的版本应该是指当前QRC的版本，而非歌词内容的版本。</li>
<li>接下来的<LyricInfo LyricCount="1">记录了这份QRC里面保存的歌词数量。</li>
<li>然后根据歌词数量，从1开始，对应歌词的节点名为&lt;Lyric_$i<br>其中$i为对应的index。</li>
</ol>
<p>比如，第一个歌词就应该是：</p>
<Lyric_1 LyricType="1" LyricContent="Lyric Content ... "/>

<ol>
<li>LyricContent 前面部分和普通的LRC一样，但是在时间轴部分用了新的格式。</li>
</ol>]]>
    
    </summary>
    
      <category term="Media" scheme="http://ytlvy.com/tags/Media/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Microsoft Office 2016 crack]]></title>
    <link href="http://ytlvy.com/2015/09/01/Microsoft-Office-2016-crack/"/>
    <id>http://ytlvy.com/2015/09/01/Microsoft-Office-2016-crack/</id>
    <published>2015-09-01T13:58:26.000Z</published>
    <updated>2015-09-01T14:29:58.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://bbs.feng.com/read-htm-tid-9789140.html" target="_blank" rel="external">reference</a></p>
<h2 id="Microsoft_Office_2016_(15-13-1)_破解步骤">Microsoft Office 2016 (15.13.1) 破解步骤</h2><h3 id=""> </h3><ol>
<li>制作自签名证书，并将其命名为Codesign；制作自签名证书的方法参见：[url=<a href="http://hiderefer.com/?http://bd808.com/blog/2013/10/21" target="_blank" rel="external">http://hiderefer.com/?http://bd808.com/blog/2013/10/21</a> … tificate-for-xcode/]<a href="http://bd808.com/blog/2013/10/21/creati" target="_blank" rel="external">http://bd808.com/blog/2013/10/21/creati</a> … for-xcode/[/url]。</li>
<li>确保Microsoft Office 2016 15.13.1为干净安装的版本，如果希望测试某个App是否可行，可以单独下载该更新，安装一遍。下载位置参见：<a href="https://support.microsoft.com/zh-cn/kb/3082420。" target="_blank" rel="external">https://support.microsoft.com/zh-cn/kb/3082420。</a></li>
<li>执行下面的脚本，一个一个来，不宜一次全部执行。</li>
<li>在执行过程中，会询问要替换现有证书，是否允许，同意替换。</li>
<li>如果在启动过程中出现要联机验证，拒绝就是了。</li>
</ol>
<h3 id="-1"> </h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">read -s -n1 -p  "Patching Microsoft Office Outlook (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>Outlook.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Outlook.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Outlook.app</span><br><span class="line"></span><br><span class="line">read -s -n1 -p  "Patching Microsoft Office Word (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>Word.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Word.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Word.app</span><br><span class="line"></span><br><span class="line">read -s -n1 -p  "Patching Microsoft Office Excel (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>Excel.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Excel.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>Excel.app</span><br><span class="line"></span><br><span class="line">read -s -n1 -p  "Patching Microsoft Office PowerPoint (15.13.1)..."</span><br><span class="line">sudo perl -i -pe 's|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>74<span class="command">\x</span>1D|<span class="command">\x</span>00<span class="command">\x</span>00<span class="command">\x</span>90<span class="command">\x</span>90|' /Applications/Microsoft<span class="command">\ </span>PowerPoint.app/Contents/Frameworks/MicrosoftSetupUI.framework/Versions/Current/MicrosoftSetupUI</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>PowerPoint.app/Contents/Frameworks/MicrosoftSetupUI.framework</span><br><span class="line">sudo codesign -f -s Codesign /Applications/Microsoft<span class="command">\ </span>PowerPoint.app</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://bbs.feng.com/read-htm-tid-9789140.html" target="_blank" rel="external">reference</a></p>
<h2 id="Microsoft_Office_2016_(1]]>
    </summary>
    
      <category term="work" scheme="http://ytlvy.com/tags/work/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Inter-Process Communication]]></title>
    <link href="http://ytlvy.com/2015/09/01/Inter-Process-Communication/"/>
    <id>http://ytlvy.com/2015/09/01/Inter-Process-Communication/</id>
    <published>2015-09-01T13:55:28.000Z</published>
    <updated>2015-09-01T13:55:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Inter-Process_Communication">Inter-Process Communication</h2><h3 id="Mach_Ports">Mach Ports</h3><p>Sending a message<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">natural_t</span> data;</span><br><span class="line"><span class="keyword">mach_port_t</span> port;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">    <span class="keyword">mach_msg_body_t</span> body;</span><br><span class="line">    <span class="keyword">mach_msg_type_descriptor_t</span> type;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line">message.header = (<span class="keyword">mach_msg_header_t</span>) &#123;</span><br><span class="line">    .msgh_remote_port = port,</span><br><span class="line">    .msgh_local_port = MACH_PORT_NULL,</span><br><span class="line">    .msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, <span class="number">0</span>),</span><br><span class="line">    .msgh_size = <span class="keyword">sizeof</span>(message)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.body = (<span class="keyword">mach_msg_body_t</span>) &#123;</span><br><span class="line">    .msgh_descriptor_count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.type = (<span class="keyword">mach_msg_type_descriptor_t</span>) &#123;</span><br><span class="line">    .pad1 = data,</span><br><span class="line">    .pad2 = <span class="keyword">sizeof</span>(data)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mach_msg_return_t</span> error = mach_msg_send(&amp;message.header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>receiving<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mach_port_t</span> port;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">    <span class="keyword">mach_msg_body_t</span> body;</span><br><span class="line">    <span class="keyword">mach_msg_type_descriptor_t</span> type;</span><br><span class="line">    <span class="keyword">mach_msg_trailer_t</span> trailer;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mach_msg_return_t</span> error = mach_msg_receive(&amp;message.header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    <span class="keyword">natural_t</span> data = message.type.pad1;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="CFMachPort_&amp;&amp;_NSMachPort">CFMachPort &amp;&amp; NSMachPort</h3><p>Fortunately, higher-level APIs for Mach ports are provided by Core Foundation and Foundation. CFMachPort / NSMachPort are wrappers on top of the kernel APIs that can be used as a runloop source, while CFMessagePort / NSMessagePort facilitate synchronous communication between two ports.</p>
<p>CFMessagePort is actually quite nice for simple one-to-one communication. In just a few lines of code, a local named port can be attached as a runloop source to have a callback run each time a message is received:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">CFDataRef</span> Callback(<span class="built_in">CFMessagePortRef</span> port,</span><br><span class="line">                          SInt32 messageID,</span><br><span class="line">                          <span class="built_in">CFDataRef</span> data,</span><br><span class="line">                          <span class="keyword">void</span> *info)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFMessagePortRef</span> localPort =</span><br><span class="line">    <span class="built_in">CFMessagePortCreateLocal</span>(<span class="literal">nil</span>,</span><br><span class="line">                             <span class="built_in">CFSTR</span>(<span class="string">"com.example.app.port.server"</span>),</span><br><span class="line">                             Callback,</span><br><span class="line">                             <span class="literal">nil</span>,</span><br><span class="line">                             <span class="literal">nil</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFRunLoopSourceRef</span> runLoopSource =</span><br><span class="line">    <span class="built_in">CFMessagePortCreateRunLoopSource</span>(<span class="literal">nil</span>, localPort, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFRunLoopAddSource</span>(<span class="built_in">CFRunLoopGetCurrent</span>(),</span><br><span class="line">                   runLoopSource,</span><br><span class="line">                   k<span class="built_in">CFRunLoopCommonModes</span>);</span><br></pre></td></tr></table></figure>
<p>Sending data<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFDataRef</span> data;</span><br><span class="line">SInt32 messageID = <span class="number">0x1111</span>; <span class="comment">// Arbitrary</span></span><br><span class="line"><span class="built_in">CFTimeInterval</span> timeout = <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFMessagePortRef</span> remotePort =</span><br><span class="line">    <span class="built_in">CFMessagePortCreateRemote</span>(<span class="literal">nil</span>,</span><br><span class="line">                              <span class="built_in">CFSTR</span>(<span class="string">"com.example.app.port.client"</span>));</span><br><span class="line"></span><br><span class="line">SInt32 status =</span><br><span class="line">    <span class="built_in">CFMessagePortSendRequest</span>(remotePort,</span><br><span class="line">                             messageID,</span><br><span class="line">                             data,</span><br><span class="line">                             timeout,</span><br><span class="line">                             timeout,</span><br><span class="line">                             <span class="literal">NULL</span>,</span><br><span class="line">                             <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span> (status == k<span class="built_in">CFMessagePortSuccess</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="Distributed_Notifications">Distributed Notifications</h3><p>there is also a lesser-known Core Foundation API, CFNotificationCenterGetDistributedCenter that allows notifications to be communicated system-wide as well.</p>
<p>listen for notifications<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> Callback(<span class="built_in">CFNotificationCenterRef</span> center,</span><br><span class="line">                     <span class="keyword">void</span> *observer,</span><br><span class="line">                     <span class="built_in">CFStringRef</span> name,</span><br><span class="line">                     <span class="keyword">const</span> <span class="keyword">void</span> *object,</span><br><span class="line">                     <span class="built_in">CFDictionaryRef</span> userInfo)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterRef</span> distributedCenter =</span><br><span class="line">    <span class="built_in">CFNotificationCenterGetDistributedCenter</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationSuspensionBehavior</span> behavior =</span><br><span class="line">        <span class="built_in">CFNotificationSuspensionBehaviorDeliverImmediately</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterAddObserver</span>(distributedCenter,</span><br><span class="line">                                <span class="literal">NULL</span>,</span><br><span class="line">                                Callback,</span><br><span class="line">                                <span class="built_in">CFSTR</span>(<span class="string">"notification.identifier"</span>),</span><br><span class="line">                                <span class="literal">NULL</span>,</span><br><span class="line">                                behavior);</span><br></pre></td></tr></table></figure></p>
<p>Sending a distributed notification<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> *object;</span><br><span class="line"><span class="built_in">CFDictionaryRef</span> userInfo;</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterRef</span> distributedCenter =</span><br><span class="line">    <span class="built_in">CFNotificationCenterGetDistributedCenter</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">CFNotificationCenterPostNotification</span>(distributedCenter,</span><br><span class="line">                                     <span class="built_in">CFSTR</span>(<span class="string">"notification.identifier"</span>),</span><br><span class="line">                                     object,</span><br><span class="line">                                     userInfo,</span><br><span class="line">                                     <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>
<p>Of all of the ways to link up two applications, distributed notifications are by far the easiest. It wouldn’t be a great idea to use them to send large payloads, but for simple tasks like synchronizing preferences or triggering a data fetch, distributed notifications are perfect.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Inter-Process_Communication">Inter-Process Communication</h2><h3 id="Mach_Ports">Mach Ports</h3><p>Sending a message<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">natural_t</span> data;</span><br><span class="line"><span class="keyword">mach_port_t</span> port;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="keyword">mach_msg_header_t</span> header;</span><br><span class="line">    <span class="keyword">mach_msg_body_t</span> body;</span><br><span class="line">    <span class="keyword">mach_msg_type_descriptor_t</span> type;</span><br><span class="line">&#125; message;</span><br><span class="line"></span><br><span class="line">message.header = (<span class="keyword">mach_msg_header_t</span>) &#123;</span><br><span class="line">    .msgh_remote_port = port,</span><br><span class="line">    .msgh_local_port = MACH_PORT_NULL,</span><br><span class="line">    .msgh_bits = MACH_MSGH_BITS(MACH_MSG_TYPE_COPY_SEND, <span class="number">0</span>),</span><br><span class="line">    .msgh_size = <span class="keyword">sizeof</span>(message)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.body = (<span class="keyword">mach_msg_body_t</span>) &#123;</span><br><span class="line">    .msgh_descriptor_count = <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">message.type = (<span class="keyword">mach_msg_type_descriptor_t</span>) &#123;</span><br><span class="line">    .pad1 = data,</span><br><span class="line">    .pad2 = <span class="keyword">sizeof</span>(data)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">mach_msg_return_t</span> error = mach_msg_send(&amp;message.header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (error == MACH_MSG_SUCCESS) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How Not to Crash]]></title>
    <link href="http://ytlvy.com/2015/09/01/How-Not-to-Crash/"/>
    <id>http://ytlvy.com/2015/09/01/How-Not-to-Crash/</id>
    <published>2015-09-01T13:54:16.000Z</published>
    <updated>2015-09-01T13:54:42.000Z</updated>
    <content type="html"><![CDATA[<h1 id="How_Not_to_Crash">How Not to Crash</h1><h2 id="KVO_and_Manual_Bindings">KVO and Manual Bindings</h2><h3 id="Bindings_循环引用">Bindings 循环引用</h3><p>假定按钮有 <code>title</code> 属性, 此属性和 controller 的 kTitleKey 绑定.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> NSString *kTitleKey = @<span class="string">"title"</span>;</span><br><span class="line">[self.button <span class="string">bind:</span>kTitleKey <span class="string">toObject:</span>self <span class="string">withKeyPath:</span>kTitleKey <span class="string">options:</span>nil];</span><br></pre></td></tr></table></figure>
<p>以上代码会造成 crash.</p>
<p>原因: 绑定 retain 了 <code>toObject</code>, 也就是说 <code>button</code> 持有了 <code>controller</code>, 同时 <code>controller</code> 又持有 <code>button</code><br>从而造成<strong>循环引用</strong>。</p>
<p>第二种可能, 当 controller 被释放后, 如果监听未取消, 也会造成崩溃</p>
<h3 id="KVO_意味着完美">KVO 意味着完美</h3><p>假设我们有个 model 模块, model.title 的改变会更新 controller.title, 然后更新 button.title.</p>
<p>在 controller 中:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.modelObject</span>.​title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)keyPaths​ForValues​AffectingTitle &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:​<span class="string">@"modelObject.title"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>以下情况会造成崩溃: 当 modelObject 被释放后, 因为他还还有 observer.<br>而如果 controller 持有 modelObject 的话, 又多了一个废弃的对象.</p>
<h3 id="不完美解决方案">不完美解决方案</h3><p>controller 有一个方法 <code>invalidate</code> 来打破循环持有. 一旦破坏后, dealloc 方法将被顺利执行.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)invalidate &#123;</span><br><span class="line">  [<span class="keyword">self</span><span class="variable">.button</span> unbind:kTitleKey];</span><br><span class="line">  <span class="keyword">self</span><span class="variable">.modelObject</span> = <span class="literal">nil</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不完美的原因: 引用计数是一个很好的方案, 它保证了在没有扔和强引用的情况下, dealloc 被调用. 这也使得 dealloc 方法成为一个很好的地方来处理 observer 的删除和其他一些事情.</p>
<p>然而当你使用 invalidate 方法时, 等于你手动来解决引用计数的问题. 你需要在适当正确的时间来调用该方法.然而这是很难保证永远不犯错的.</p>
<h3 id="比较好的解决方案">比较好的解决方案</h3><p>在 controller 中放弃使用 <code>keyPaths​ForValues​AffectingTitle</code> 和 <code>bind:​toObject:​withKeyPath:​options:</code>, 采用自定义 setter.</p>
<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- (void)setTitle:(NSString *)<span class="built_in">title</span> &#123;</span><br><span class="line">  _title = <span class="built_in">title</span>;</span><br><span class="line">  self.button.<span class="built_in">title</span> = <span class="built_in">title</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这解决了一半的问题, 当 controller.title 更新时, button.title 也会随之更新</p>
<p>我们不能对 modelObject 做同样的操作, 因为 modelObject 不知道 controller. 所以, 我们采用 controller 来监控 modelObject.title</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[self.modelObject <span class="string">addObserver:</span>self <span class="string">forKeyPath:</span>​kTitleKey <span class="string">options:</span><span class="number">0</span> <span class="string">context:</span>​kTitleContext];</span><br></pre></td></tr></table></figure>
<p>然后再 KVO 方法中 监听 kTitleContext, 然后 <code>self.title = self.modelObject.title</code>. 这样就没有引用循环, 但是需要在 controller 的 <code>dealloc</code> 方法中添加</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[_modelObject <span class="string">removeObserver:</span>​self <span class="string">forKeyPath:</span>kTitleKey <span class="string">context:</span>​kTitleContext];</span><br></pre></td></tr></table></figure>
<h4 id="总结">总结</h4><p>此方案修复了循环引用的问题, 同时也不需要你在特定的时候来手动调用 <code>invalidate</code> 方法, 很安全.</p>
<p>一些建议:</p>
<ol>
<li>不要在任何情况下使用 <code>bind:​toObject:​withKeyPath:​options:</code>. </li>
<li>采用自定义 setter 比采用自定义的 getter 要好, 当处理变化传递的时候</li>
<li>避免采用手动的方式来干预引用计数, 因为我们总会犯错.</li>
</ol>
<h2 id="Mutation_Exceptions">Mutation Exceptions</h2><p>当你遍历一个可变集合时, 突然收到一个遍历过程中,集合被改变的<code>error</code>, 然后程序崩溃.你可以通过一个简单的技巧来避免此类问题: 不要遍历一个可变的集合.</p>
<h3 id="不同意">不同意</h3><p>也许你认为只要不在集合变化的情况下遍历即可, 你也许有足够的认知在你的代码中,可以安全的遍历一个可变的集合.当然,你可以这样想, 你也应该这样想.</p>
<p>然而, 写出不崩溃的代码就是要排除一切可能的情况. 这是关于最小化犯错的机会, 同时最小化在未来的更新中出现错误.</p>
<h3 id="可变集合不应该作为公共接口">可变集合不应该作为公共接口</h3><p>一个对象, 极少乃至不应该出现有可变集合作为公共接口的情况, 可变集合应该在对象的内部.(即使不可避免, 这样的集合也应该被声明为只读状态)</p>
<p>示例如下:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">readonly</span>) <span class="built_in">NSArray</span> *operations;</span><br></pre></td></tr></table></figure></p>
<p>内部:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">NSMutableArray</span> *mutableOperations;</span><br><span class="line"></span><br><span class="line">- (<span class="built_in">NSArray</span> *)operations &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.mutableOperations</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这完全合法, 因为 mutableOperations 是一个 NSMutableArray, 同时也是一个 NSArray.</p>
<h3 id="被声明为不可变集合,_实际上就应该是不可变集合">被声明为不可变集合, 实际上就应该是不可变集合</h3><p>在上面的例子中, 你声明了 <code>operations</code> 作为一个 NSArray (可以安全的遍历), 另外一个人, 也可能是你自己, 在六个月后不会意识到实际上, 返回的是一个可变的集合, 其是不能保证被安全遍历的.</p>
<p>正确的做法:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSArray</span> *)operations &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="keyword">self</span><span class="variable">.mutableOperations</span> <span class="keyword">copy</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你也许会考虑到效率或者内存问题, 然而我能够确认: 我是一个效率极客, 我经过大量<code>Instruments</code>的测试来确认事情反而会更快, 并使用了很少的内存. 同时我也从未发现这会造成任何问题.如果你的应用存在内存问题, 可定不是这个引起的, 你应该关注其他的方面.(也许你认为应该采用 @autoreleasepool 来尽早释放这样备份)</p>
<h3 id="奖励:_不要信任任何人">奖励: 不要信任任何人</h3><p>我曾经修复过一个可变造成的错误, 当遍历 <code>NSTextStorage layoutManagers</code>的时候:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@property</span> (<span class="keyword">readonly</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span> *layoutManagers;</span><br></pre></td></tr></table></figure>
<p>这个属性是 NSArray, 可以安全的遍历, 真好. 然而这是个谎言, 在 debugger 中我发现, 它实际上是一个 NSMutableArray(__NSArrayM). </p>
<p>通常的建议, 当你从其他地方获得一个集合时, 直接遍历他的 copy.</p>
<h2 id="NSNotification">NSNotification</h2><p>通常我更喜欢 NSNotification (比起 KVO 绑定来说). 因为 NSNotification 可以更容易不犯错</p>
<h3 id="造成崩溃仅有的情况">造成崩溃仅有的情况</h3><p>当一个对象注册了一个监听, 然后在没有取消注册的情况下, 此对象被释放了, 然后 app 会在 notification 被 post 的时候崩溃. 这是你应该避免的, 下面是来介绍如何避免的.</p>
<h3 id="The_Big_Rule">The Big Rule</h3><p>我有一个简单, 粗暴的规则: NSNotifications 应该在主线程被 post. 没有例外, 如果一段代码在一个线程中执行, 然后他需要发起通知, 则应该在主线程来发起.</p>
<p>这避免了所有NSNotification在子线程中发起的神奇的 bug, 同时也避免了由取消注册引起的资源竞争.</p>
<p>其实一个应用的所有代码都应该在主线程中被执行的. 在其他线程中执行的代码应该和其他一切隔绝, 同时在多个对象协同工作时, 应该采用 <code>delegate</code> 方式.</p>
<p><strong>确保所有的消息都在主线程被发起(post)</strong>.</p>
<h3 id="Blanket_Unregistering">Blanket Unregistering</h3><p>不应该采用单独释放的方式</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr_selector">[[NSNotificationCenter defaultCenter]</span> <span class="tag">removeObserver</span><span class="pseudo">:self</span> <span class="tag">name</span><span class="pseudo">:kSomeNotificationName</span> <span class="tag">object</span><span class="pseudo">:someObject</span>];</span><br><span class="line"><span class="attr_selector">[[NSNotificationCenter defaultCenter]</span> <span class="tag">removeObserver</span><span class="pseudo">:self</span> <span class="tag">name</span><span class="pseudo">:kSomeOtherNotificationName</span> <span class="tag">object</span><span class="pseudo">:someOtherObject</span>];</span><br></pre></td></tr></table></figure>
<p>应该采用 <code>[[NSNotificationCenter defaultCenter] removeObserver:self];</code> 的方式来取消注册, 以此来避免, 他人由于大意而忘记取消的问题.</p>
<h3 id="Beware_Double_Registrations_小心多次注册">Beware Double Registrations 小心多次注册</h3><p>多次注册会导致被调用多次, 系统没有自动合并的操作.(这种情况在早先的代码中经常出现, 那时人们认为注册应该被写在 viewDidLoad中, 然而记住一件事情, 视图是可能被 unload 和 reloaded, 这也就意味着多次注册)</p>
<p>你的通知回调中应该有防止多次调用的相关逻辑, 同时一个对象也不应该被多次注册同一个消息监听</p>
<h3 id="Register_in_init,_unregister_in_dealloc">Register in init, unregister in dealloc</h3><p>在 init 方法中注册, 在 dealloc 中取消监听.因为一个对象的 init 方法只能被调用一次, 同理 dealloc 也是.我们可以通过这个特点来平衡 注册和取消.</p>
<h3 id="Avoid_addObserverForName">Avoid addObserverForName</h3><p>一些人喜欢 <code>-[NSNotificationCenter addObserverForName:​object:​queue:​usingBlock:]</code>, 因为这看来很时尚, 因为他是基于 block 的.</p>
<p>但这是个坏主意, 你可能确实少写了一个函数, 但是却多持有了一个对象, 同时还需要在合适的时间来调用 <code>removeObserver:</code>. 这意味着空取消是不生效的, 你需要自己来保证其正确性.</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">id</span> observer = [[<span class="built_in">NSNotificationCenter</span> defaultCenter] </span><br><span class="line">                        addObserverForName:<span class="string">@"com.app.livedata.jsonupdated"</span></span><br><span class="line">                          object:<span class="literal">nil</span> </span><br><span class="line">                          queue:[<span class="built_in">NSOperationQueue</span> mainQueue] </span><br><span class="line">                          usingBlock:^(<span class="built_in">NSNotification</span> *notif) &#123;</span><br><span class="line">                              <span class="built_in">NSLog</span>(<span class="string">@"JSONUPDATED"</span>);</span><br><span class="line">                          &#125;];</span><br></pre></td></tr></table></figure>
<p>在 dealloc 中:<br><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[NSNotificationCenter defaultCenter] removeObserver:observer]<span class="comment">;</span></span><br><span class="line">observer = nil<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Threading">Threading</h2><p>简单的规则, 尽量在主线程中操作, 因为现在的设备足够出色. </p>
<h3 id="主线程规则">主线程规则</h3><p>出特殊情况外, 将所有代码在主线程运行, 且仅在主线程运行. </p>
<p>这可以解决很多问题, 例如在主线程 发送通知和取消通知, 在主线程操作 KVO.</p>
<h3 id="Objects_That_Live_in_Their_Own_Little_World">Objects That Live in Their Own Little World</h3><p>如果你发现, 某些操作会造成主线程的阻塞, 必须放到其他线程执行时, 一定要保证这些对象的隔离.例如 JSON 的处理.</p>
<ol>
<li>我不希望 model 层了解 JSON 的存在</li>
<li>我要处理 NSNull, 时间转换, 以及其他一切需要转换的事情</li>
</ol>
<p>我采用 NSOperationQueue 或 GCD queue 来执行 NSData 的转换. (总是采用队列, 不要使用 detachThreadSelector 或者 performSelecotrInBackground)</p>
<p>这些对象被隔离在自己单独的线程中, 他们除了自己和初始化时传入的参数外, 不知道任何的其他外界事物. 一旦在队列中创建, 他们就是不可变的状态, 他们不应该监控任何东西, 也不应该被监听. 这保证了他们是线程安全的.</p>
<h3 id="同时在多个对象协同">同时在多个对象协同</h3><p>某些时候多个对象间需要协同合作, 比如 RSS 分析器. 在这个例子中, 有三个主要对象: <code>SAX praser wrapper</code>, <code>delegate</code>, <code>the intermediate objects the delegate creates</code>(例如返回的对象)</p>
<ol>
<li>The SAX parser wrapper knows about the NSData it was initialized with, and it knows it has a delegate.</li>
<li>The SAX parser delegate knows about the intermediate objects it’s creating.</li>
<li>The intermediate objects don’t know about anything.</li>
</ol>
<p>这时候应该采用 <code>delegate</code> 模式来解决. 以保证对象的隔离以及松散度.</p>
<h3 id="Worst-Case_Scenario">Worst-Case Scenario</h3><p>You really don’t want to update model objects on background threads. It’s a crash-making machine. But testing and profiling may tell you that you need to.</p>
<p>Try to break down the problem. If updating the model is okay except for this one thing — something that involves turning NSData into a UIImage or NSImage, for instance — then move just that slow part to a background task. (Creating an image from data or a file is a perfectly good thing to move off the main thread. It’s easily isolatable.)</p>
<p>It could be that the problem is the database: perhaps you find that it’s otherwise fast to create objects and update properties in memory, even a whole bunch of them. In that case, you might do what I do, which is de-couple the database calls from the main thread. (It’s not that hard: the database code needs to run on a serial background queue, and it should do everything in the exact some order that things happen in the main thread.)</p>
<p>Which is to say: there are options.</p>
<p>But if you still find that you have to update the model on a background thread, then you just have to do it. Remember that the rest of your app is on the main thread, so when posting notifications and so on, do so on the main thread.</p>
<h3 id="Summary">Summary</h3><p>Do everything on the main thread. Don’t even think about queues and background threads. Enjoy paradise!</p>
<p>If, after testing and profiling, you find you do have to move some things to a background queue, pick things that can be perfectly isolated, and make sure they’re perfectly isolated. Use delegates; do not use KVO or notifications.</p>
<p>If, in the end, you still need to do some tricky things — like updating your model on a background queue — remember that the rest of your app is either running on the main thread or is little isolated things that you don’t need to think about while writing this tricky code. Then: be careful, and don’t be optimistic. (Optimists write crashes.)</p>
<h2 id="Threading,_part_2">Threading, part 2</h2><p>The object creating the background task handles the result of the task. This is a hard rule.</p>
<p>Usually the object creating the task is an object that lasts for the lifetime of the app. An example might be an image cache — the cache may get emptied during the lifetime of the app, but the cache object lasts for the duration.</p>
<p>Another example is something like Vesper’s VSAccount object. There’s always a single VSAccount instance. The user may or may not have a server account. The user may change which server account they’re using. But there’s a single VSAccount object which lasts for the lifetime of the app.</p>
<p>(Note: obviously, an app that manages multiple accounts would do things differently. But Vesper manages at most one server account, so this works perfectly well. In Vesper’s case, multiple accounts falls under the YAGNI rule.)</p>
<p>The VSAccount object is responsible for sending http requests to the server and handling the result. It turns JSON into intermediate objects on a background queue.</p>
<p>It calls the JSON processor with NSData-to-process and a callback block. When the processor is finished, it calls that block on the main thread:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(callback)</span> &#123;</span><br><span class="line">  dispatch_async<span class="params">(dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">    callback<span class="params">(parsedObjects)</span></span><br><span class="line">  &#125;)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This is such a common pattern for me — calling a block that takes one parameter on the main queue — that I have a common function for it. The JSON processor really just does something like this:</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BSCallBlockWithParameter<span class="list">(<span class="keyword">callback</span>, parsedObjects)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p><code>BSCallBlockWithParameter</code> looks something like this:</p>
<figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="params">(!callback)</span></span><br><span class="line">  return;</span><br><span class="line">&#125;</span><br><span class="line">dispatch_async<span class="params">(dispatch_get_main_queue<span class="params">()</span>, ^&#123;</span><br><span class="line">  callback<span class="params">(parsedObjects)</span>;</span><br><span class="line">&#125;)</span>;</span><br></pre></td></tr></table></figure>
<p>I use this all the time. Super handy.</p>
<h3 id="The_key_to_making_this_work">The key to making this work</h3><p>I don’t ever want to worry that the object that created the background task might go away, so I create background tasks only from objects that last the lifetime of the app.</p>
<p>You don’t want to get into the situation where an object that creates a background task goes away (or is torn-down partly or completely) before that task is finished and calls back. It’s a potentially complex subject, and I don’t even want to think about it. (I hate the weak-self dance, for starters.)</p>
<p>And that’s exactly the mindset you need when writing code that doesn’t crash: if something is complex, then it’s error-prone. Find a way to make it drop-dead simple.</p>
<p>(You could figure out a complex thing and prove that it’s correct — but will you have doubts later and feel the need to audit that code? Will it break if you breathe on it wrong? Or if someone else touches it?)</p>
<p><strong><em>So I do the simple thing: use objects that won’t get deallocated.</em></strong></p>
<p>But there’s an escape hatch worth remembering: <strong>a callback block can call class methods and C functions safely</strong>. Instance methods are unsafe if the instance disappears — but class methods and C functions are conceptually safe to call.</p>
<p>I don’t use this knowledge very often, but I have found it useful from time to time. Use sparingly if at all.</p>
<h2 id="Properties_and_Accessors">Properties and Accessors</h2><p>This gives me the willies:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)someRandomMethod &#123;</span><br><span class="line">  some stuff…</span><br><span class="line">  <span class="keyword">_t</span>hing = otherThing;</span><br><span class="line">  other stuff…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>You could prove that it’s correct. You’re using ARC, so the proper retains and releases are added. And nobody is observing _thing.</p>
<p>Fine. It’s legal and it works.</p>
<p>Say you realize that thing should be observable. So every place you set thing, you bracket the call:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self willChangeValueForKey:kThingKey]</span><span class="comment">;</span></span><br><span class="line"><span class="setting">_thing = <span class="value">otherThing;</span></span></span><br><span class="line"><span class="title">[self didChangeValueForKey:kThingKey]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>Also legal, also works.</p>
<p>The problem is the future: later today, tomorrow, or in six months, you or somebody else writes a custom setter for thing — maybe because you need something like self.needsDisplay = YES when thing is set — and now you have a bug where the view doesn’t redraw whenever thing changes.</p>
<p>Or worse: perhaps that future custom setter tears down an observer and sets up a new one whenever thing changes. Since you’re setting _thing directly, the observations won’t be maintained properly, and you’ll get crashes.</p>
<p>The answer is a simple rule: use the accessor when getting and setting properties.</p>
<p>In other words, do this:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- (void)someRandomMethod &#123;</span><br><span class="line">  some stuff…</span><br><span class="line">  self.<span class="keyword">thing</span> = otherThing;</span><br><span class="line">  other stuff…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This works whether or not you have a custom setter. When setting thing, you don’t have to care one way or the other.</p>
<p>(Here’s the simple test of a programming rule: if you can’t go wrong by following it, but you can go wrong by not following it, then you should follow it.)</p>
<p>(Don’t worry about the performance issue of going through accessors. I’m a performance junkie, and I’ve never seen this become a problem. If your app develops performance issues, profile it and find out the real cause.)</p>
<h3 id="Exceptions">Exceptions</h3><p>You should not go through the accessor in four places: <strong><em>init methods, dealloc, custom getter, and custom setter</em></strong>. This avoids side effects.</p>
<p>If you need a side effect — removing an observer, for instance, in dealloc — that you’d normally place in the setter, make it a separate method and call it from the setter and from dealloc. (Also consider that adding and removing observers outside of init and dealloc is a possible sign that your code needs refactoring.)</p>
<h3 id="Auto-synthesize">Auto-synthesize</h3><p>Don’t create instance variables, ever. Declare properties instead.</p>
<p>Properties auto-synthesize instance variables. Use @synthesize only when Xcode tells you you need to.</p>
<h3 id="Use_ARC">Use ARC</h3><p>And if you have non-ARC code, upgrade it to use ARC. Manual memory management is error-prone. Even someone with years of experience will make mistakes from time to time, and mistakes can cause crashes (or memory leaks or abandoned memory, at best).</p>
<p>Normally I don’t advocate editing working code that’s running fine — but if you have code that needs maintaining, do yourself and your co-workers a favor and convert it to ARC. (Everybody is going to get worse at manual memory management over time. And there are no points added for being a hero.)</p>
<p>(It is possible to run into performance issues with ARC, particularly if you’re dealing with lots of objects in a loop. Remember to use autorelease pools. And don’t jump to conclusions: use the profiler.)</p>
<p>(Also: the ARC converter may not always do what you want. If you use it, check the changes it makes. Remember that you can convert one file at a time. Targets can have both ARC and non-ARC files.)</p>
<h3 id="Don’t_do-&gt;this">Don’t do-&gt;this</h3><p>This gives me the screaming meemies: thing-&gt;property. No.</p>
<h3 id="dealloc">dealloc</h3><p>If you don’t need dealloc (since you’re using ARC), then don’t create it. There’s no need to set properties to nil in dealloc.</p>
<p>A big exception is delegates: nil out the delegates.</p>
<h3 id="Use_weak">Use weak</h3><p>Weak is awesome. Delegates, for instance, should be weak.</p>
<p>Parents should retain their children, but children should have a weak reference to their parents (if they have a reference at all). Weak gets you out of those invalidate methods where you break retain cycles.</p>
<p>Do not, under any circumstances whatsoever, use unsafe_unretained. It’s a trap. You might as well do this:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#def</span>ine CRASHING_BUG unsafe_unretained</span><br></pre></td></tr></table></figure></p>
<p>It’s literally called unsafe.</p>
<p>Don’t run with scissors. Heck — don’t even touch these scissors. They have a bunch of poison on them.</p>
<h2 id="Dealing_with_Nothing">Dealing with Nothing</h2><p>Consider this line of code:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[thing doStuff]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>If <code>thing</code> is nil, it’s no problem. No crash. Nothing at all happens.</p>
<p>But you can’t generalize from that that nil is okay in all cases:</p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">[self doStuff:thing]</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>If <code>thing</code> is nil, then what happens? If depends on the implementation of <code>doStuff:</code> — <strong>it might crash</strong>. Consider this code:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">menuItem.title = <span class="keyword">thing</span>;</span><br></pre></td></tr></table></figure>
<p>If <code>menuItem</code> is an NSMenuItem, then it crashes when thing is nil. The header for NSMenuItem doesn’t say that, and the documentation only hints at it (“If you do not want a title, use an empty string (@””), not nil.”)</p>
<p>This means you need to make sure thing is non-nil. You may be quite certain that it’s non-nil. But consider a case I once fixed, where thing was the name of a font. There was no reason for me to expect that the system API for getting a font name would ever return nil — except that it did, sometimes (rarely, of course, and never on my machine, no matter what I did).</p>
<p>Things to know:</p>
<ol>
<li><p>Nil receivers are okay — as long as your code is okay with nothing happening.</p>
</li>
<li><p>Nil parameters may or may not be okay. When calling system APIs, the headers and documentation don’t always tell you what could happen. (This may change when they make greater use of nullability annotations.)</p>
</li>
<li><p>Trust no one.</p>
</li>
</ol>
<h3 id="Assertions">Assertions</h3><p>Assertions are a great way of documenting assumptions and requirements, and of making sure those assumptions are true. Assertions should not run in the release build (see the ENABLE_NS_ASSERTIONS Xcode setting).</p>
<p>One of my favorites is NSParameterAssert, which I use almost exclusively as a nil check for parameters that must not be nil.</p>
<p>It’s super-easy to use:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">-</span> (<span class="tag">void</span>)<span class="rule"><span class="attribute">someMethod</span>:<span class="value">(id)someParameter &#123;</span><br><span class="line">  <span class="function">NSParameterAssert</span>(someParameter)</span></span>;</span><br><span class="line">  …<span class="tag">do</span> <span class="tag">whatever</span>…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the future I’ll probably start using nullability annotations and NSParameterAssert. Both. (I’ll also write some Swift code in the future, which is a whole other thing when it comes to nil. But I’m not talking about that today, partly because I’m not yet enough of an expert in Swift to have good advice.)</p>
<p>I also use NSAssert fairly often. NSAssert takes an expression, and a comment — but I’m lazy, and I make the comment nil. (Which is fine in this case.)</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NSAssert<span class="list">(<span class="keyword">something</span> == somethingElse, <span class="literal">nil</span>)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>
<p>(A note about laziness: the lazy programmer doesn’t write crash bugs, because they don’t want to fix them later.)</p>
<h3 id="My_favorite_crashing_bug">My favorite crashing bug</h3><p>Years ago, my app NetNewsWire had a crash-log catcher. At launch it would grab the latest crash log from disk and offer to send it to me.</p>
<p>With some OS X release (10.5, I think) Apple changed the format for crash logs on disk. I think they had been one file per app, and Apple switched to one file per crash. I had to write new code to handle the new format.</p>
<p>I made the change. It went to beta testers, who used the app extensively. Weeks passed. All good.</p>
<p>Then, on the day I released this version, I got a ton of reports from people who said, “It’s crashing on launch! But it works fine after launching it again.”</p>
<p>Here’s the deal: the new code crashed when there were no crash logs at all. And then, on the next launch — now that there’s a crash log — it would not crash. (Yes, a self-healing crashing bug. In the crash log catcher. Such meta.)</p>
<p>Of course this meant that it crashed immediately for all new users, not just for people who’d been lucky enough never to get a crash.</p>
<p>This was a big reminder to me: always consider the case where there’s nothing. Nothing happens all the time. Nothing is pretty normal. But it might take special handling, and it should always be considered.</p>
<h3 id="A_less_cool_crashing_bug">A less cool crashing bug</h3><p>I don’t think this shipped — I think it was just in beta code.</p>
<p>Vesper syncing talks to a server. The server returns JSON data. The Cocoa JSON deserializer turns JSON nulls into NSNull objects.</p>
<p>Vesper was expecting an NSString, and got an NSNull. Vesper tried to call a string method on that NSNull, and it crashed.</p>
<p>On the surface this seems like a tough case, because you can’t be sure that the type of a given object in JSON text will be what you expect. You’re looking for a string and you get an NSNull.</p>
<p>Well, NSNull is one of those things you want to keep as isolated as possible. It’s a walking code smell (though I don’t know what an alternative would be in the case of JSON nulls). (And you should never deliberately use it outside of JSON. Almost never. Super-duper-rare. Like once every few years, and only if you really, really have to. Maybe not even then.)</p>
<p>This is part of why, as I mentioned previously, I like to turn JSON into intermediate objects. A big part of this is centralizing the handling of NSNull objects — I don’t want them to leak out into other parts of the app, where anything they touch turns stinky.</p>
<p>But there’s another point, which is this: whoever wrote the server side is your sworn enemy. He or she hates you very, very much.</p>
<p>Now, in the case of Vesper, that was me. But I still have to code as if the server author has my personal and professional destruction as their sole motivation. (Even though I know the guy, and he’s cool. He likes kittens.) And that doesn’t mean just checking for NSNull — which is normal in JSON anyway — but being careful with the types of every single piece of data.</p>
<p>Anything could be anything, at any time.</p>
<p>(It’s not turtles all the way down. You’re expecting turtles — but that would be too easy. It might be nothing all the way down.)</p>
<h3 id="Total_other_thing">Total other thing</h3><p><strong><em>Initialize your variables</em></strong>. Just do it. If I had a nickel for every crashing bug I’ve fixed just by initializing a variable to nil — well, I’d have some nickels. You want zero nickels.</p>
<p>Not initializing your variables is like playing with gasoline and saying it’s okay because the matches are in your pocket.</p>
<h2 id="Infrastructure">Infrastructure</h2><p>Even if you think your app is crash-free, you need to collect crash logs — because there’s no such thing as crash-free: it can only be free of known crashing bugs.</p>
<p>There are a few different services for this, and the ones I’ve tried are pretty good, so I’m not going to make a specific recommendation.</p>
<p>But there are a few things it should do:</p>
<p>Crash logs should be collected without a user having to find them and send them to you. It should be automatic-ish (users should probably be prompted, if on OS X; on iOS nobody seems to expect a prompt).</p>
<p>There should be a way to group crash logs, and you should get a total for each group, so you know which ones are frequent and which aren’t.</p>
<p>You should be able to mark a group as resolved.</p>
<p>It’s not enough, of course, just to collect crash logs. You should look at them regularly. (I look at crash logs every morning.)</p>
<h3 id="Bug_tracker">Bug tracker</h3><p>Have one.</p>
<p>For my personal projects I use a combination of Lighthouse, OmniOutliner, and pen-and-paper — but you should use whatever works for you, as long as your crashes get into your bug tracker and don’t get lost.</p>
<p>(Lighthouse is a good bug tracker. For mapping out big new features or entire apps I like OmniOutliner, where I can build a tree of things-to-do. For short-term things — for the 10 steps needed to complete a single task — I like pen and paper, since it’s tiring to rely on short-term memory, since pen and paper doesn’t disturb the on-screen context.)</p>
<h3 id="Errors_and_warnings">Errors and warnings</h3><p>Xcode by default doesn’t turn on enough errors and warnings. I strongly recommend Peter Hosey’s set.</p>
<p>The point is to remove doubt from your code.</p>
<p>I go a step further, which I also recommend: I turn on treat warnings as errors. This means that, yes, I can’t even debug locally if there’s a warning — but the discipline is worth it. It means that whenever my app is actually running, there are not even any warnings.</p>
<h3 id="Instruments">Instruments</h3><p>Instruments is wonderful. It’s a very good idea to check how much memory your app allocates, and it’s super-important to check for leaks.</p>
<p>And if you’re getting crashes, it’s a good idea to use the Zombies tool. Your problem might not be related to zombies, but, when in doubt, it’s worth ruling out.</p>
<h2 id="Mindset">Mindset</h2><p>You know the old line about not writing code that’s as clever as you are, because it will take someone even smarter than you to debug it?</p>
<p>I used to think that means I should write code that’s about 80% as clever as I am. Save a little bit for debugging.</p>
<p>But over the years I’ve come to think that I should write code that’s about 10% as clever as I am. And I’ve come to believe that true cleverness is in making code so clear and obvious that it looks like nothing at all.</p>
<p>And that’s why I have rules like do everything on the main thread except for perfectly isolatable things and avoid unsafe_unretained always and so on.</p>
<p>This means I don’t get bonus points for being a code magician. I don’t pull rabbits out of hats and I certainly don’t walk tightropes. I won’t even look at tightropes.</p>
<p>I do difficult things as needed, but the goal even with the difficult things is to write the simplest and most-readable code that I can. If, in the end, the code looks easy — unimpressive, even, as if a middle-school kid could have written it — then good.</p>
<p>In the small, this means that methods tend to be small and focused with little nesting. In the large, architecture and naming is iterated-over until it feels inevitable, as if no thought went into it because it all must have been obvious.</p>
<p>It means not getting too abstract. Explicitness is obviousness. But it also means not getting too non-general, either — there are times when two or three things are really the same thing, and they can be generalized without harming maintainability. (And there are times when they can’t.)</p>
<p>I avoid tight coupling and large structures — except for when the best solution really is for x to know about y.</p>
<p>And I keep learning and getting better.</p>
<h3 id="Time">Time</h3><p>The thing that separates programming from painting, writing, architecture, and composing music is that there is no finished product. There are released versions, yes, but there’s no finishing, there’s only abandoning.</p>
<p>Code exists in time, and maybe across many people — and you don’t even know how long or who. This should never be out of your mind.</p>
<h3 id="Cape,_mask">Cape, mask</h3><p>When I was younger I wanted to be a code magician — or, really, a hero. But I learned that actual software quality is more important than what I imagine other people think of me.</p>
<p>And, more: quality is a reward that’s almost spiritual. It’s an act of devotion, both selfish and unselfish, to something more important than ego.</p>
<p>Selfish because the process of striving for quality makes you a better person. And unselfish because better code and better software is better for other people.</p>
<p>And the first thing other people ask of your software is that, if they launch it, it stays launched. Any programmer who can’t bring themselves to care about that — or who rationalizes away crashing as a fact of life these days — isn’t taking this great fun we are privileged to have seriously enough.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="How_Not_to_Crash">How Not to Crash</h1><h2 id="KVO_and_Manual_Bindings">KVO and Manual Bindings</h2><h3 id="Bindings_循环引用">Bindings 循环引用</h3><p>假定按钮有 <code>title</code> 属性, 此属性和 controller 的 kTitleKey 绑定.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> NSString *kTitleKey = @<span class="string">"title"</span>;</span><br><span class="line">[self.button <span class="string">bind:</span>kTitleKey <span class="string">toObject:</span>self <span class="string">withKeyPath:</span>kTitleKey <span class="string">options:</span>nil];</span><br></pre></td></tr></table></figure>
<p>以上代码会造成 crash.</p>
<p>原因: 绑定 retain 了 <code>toObject</code>, 也就是说 <code>button</code> 持有了 <code>controller</code>, 同时 <code>controller</code> 又持有 <code>button</code><br>从而造成<strong>循环引用</strong>。</p>
<p>第二种可能, 当 controller 被释放后, 如果监听未取消, 也会造成崩溃</p>
<h3 id="KVO_意味着完美">KVO 意味着完美</h3><p>假设我们有个 model 模块, model.title 的改变会更新 controller.title, 然后更新 button.title.</p>
<p>在 controller 中:<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">NSString</span> *)title &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">self</span><span class="variable">.modelObject</span>.​title;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">+ (<span class="built_in">NSSet</span> *)keyPaths​ForValues​AffectingTitle &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="built_in">NSSet</span> setWithObject:​<span class="string">@"modelObject.title"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS Deep study]]></title>
    <link href="http://ytlvy.com/2015/09/01/iOS-Deep-study/"/>
    <id>http://ytlvy.com/2015/09/01/iOS-Deep-study/</id>
    <published>2015-09-01T13:52:55.000Z</published>
    <updated>2015-09-01T14:29:32.000Z</updated>
    <content type="html"><![CDATA[<p><a href="https://blog.0xbbc.com/2015/04/ios-dep%E7%A0%94%E7%A9%B61-%E5%88%9B%E5%BB%BAsection/" target="_blank" rel="external">reference</a></p>
<h1 id="iOS_DEP_研究">iOS DEP 研究</h1><h2 id="创建Section">创建Section</h2><p>将加密的程序放在一个Section中，外壳运行时解密该Section，并执行解密后的程序</p>
<h3 id="通过other_linker_flags创建">通过other linker flags创建</h3><p><a href="http://bbs.iosre.com/t/tweak-app-app-tweak/438" target="_blank" rel="external">这篇文章</a>提到过如何通过创建Section来防止dylib依附。其具体方法是在other linker flags中填入如下内容：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,__RESTRICT,__restrict,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>那么我们要创建自己的Section的话，就可以修改为如下格式：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,SEGMENT_NAME,SECTION_NAME,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<p>这样就可以创建一个size为1，段名字为SEGMENT_NAME，Section名为SECTION_NAME的Section了。</p>
<p>那么因为我们要把加密数据放进去，所以最后一个参数改为我们的加密文件的路径即可。</p>
<p>你可以在ld(1)中的Options that control additional content找到这部分内容。</p>
<a id="more"></a>
<h3 id="通过代码创建">通过代码创建</h3><p>下面来说说怎么用代码创建一个Section。<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">__declspec</span>(<span class="function">allocate</span>(<span class="string">"__0xBBC,__code"</span>))</span><br><span class="line"><span class="tag">void</span> <span class="tag">func</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>随后找个地方用一下func()就行，如果func()没有被调用的话，默认不会编译进可执行文件。</p>
<p>之后都将使用第一种方式创建Section。</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.22.44.png" alt=""></p>
<h2 id="获取vmaddr与ASLR">获取vmaddr与ASLR</h2><p>在创建Section之后，我们需要获取该Section的vmaddr和这个外壳程序运行时的ASLR，然后才能正确跳转。</p>
<h3 id="获取vmaddr">获取vmaddr</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import &lt;mach-o/getsect.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;mach-o/loader.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;unistd.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;stdio.h&gt;</span></span><br><span class="line"><span class="preprocessor">#import &lt;iostream&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __arm64__ || __x86_64__</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SEGMENT_COMMAND segment_command_64</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SECTION section_64</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SEGMENT_COMMAND segment_command</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> SECTION section</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> SEGMENT_COMMAND * myseg = getsegbyname(<span class="string">"__0xBBC"</span>);</span><br><span class="line">        <span class="keyword">if</span> (myseg) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Segment __0xBBC Init Prot: %d\n"</span>,myseg-&gt;initprot);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Segment __0xBBC Max Prot: %d\n"</span>,myseg-&gt;maxprot);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"Segment __0xBBC vmaddr: 0x%llX\n"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)myseg-&gt;vmaddr);</span><br><span class="line">            <span class="keyword">const</span> <span class="keyword">struct</span> SECTION * mysect = getsectbyname(<span class="string">"__0xBBC"</span>, <span class="string">"__code"</span>);</span><br><span class="line">            <span class="keyword">if</span> (mysect) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Section __code flags: %X\n"</span>,mysect-&gt;flags);</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Section __code size: "</span>&lt;&lt;mysect-&gt;size&lt;&lt;<span class="built_in">std</span>::endl;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Section __code addr: 0x%llX\n"</span>,(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span>)mysect-&gt;addr);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>iPod touch 5下的运行结果，64位下会有所不同。</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.37.22.png" alt=""></p>
<p>在MachOView中验证的确是拿到了正确的数据。</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.42.11.png" alt=""></p>
<h3 id="获取ASLR">获取ASLR</h3><p>先引入头文件<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#import</span> &lt;<span class="tag">dlfcn</span><span class="class">.h</span>&gt;</span><br></pre></td></tr></table></figure></p>
<p>然后同样的，针对32位和64位处理一下。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __arm64__ || __x86_64__</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FILE_BASE_ADDR 0x100000000</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">define</span> FILE_BASE_ADDR 0x4000</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>
<p>最后在适当的地方加上：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dl_info info;</span><br><span class="line"><span class="keyword">if</span> (dladdr((<span class="keyword">const</span> <span class="keyword">void</span> *)main, &amp;info))&#123;</span><br><span class="line">    <span class="keyword">int</span> * fbase = (<span class="keyword">int</span>*)info.dli_fbase;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"ASLR: 0x%lX\n"</span>, <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;(fbase) - FILE_BASE_ADDR);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们可以通过在lldb里执行：<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">image <span class="keyword">list</span> -o -<span class="literal">f</span></span><br></pre></td></tr></table></figure></p>
<p>来验证我们所取得的地址的正确性。如下图</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%8812.54.56.png" alt=""></p>
<h2 id="写入Section">写入Section</h2><p>拿到vmaddr和ASLR之后，就可以正确计算出Section的内存地址，然后重新写入数据。不过这里为了演示简便，我们直接把解密之后的数据放在了壳程序的代码中，其实这样调试起来也更方便。</p>
<p>解密之后的数据：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unsignedint sectionData[] = &#123;<span class="number">0xA0E1000E</span>,<span class="number">0xE0800001</span>,<span class="number">0xE12FFF30</span>&#125;<span class="comment">;</span></span><br><span class="line">// Encrypt      Decrypt      ASM</span><br><span class="line">// <span class="number">0xCB927360</span>   <span class="number">0xA0E1000E</span>   <span class="keyword">mov</span>  <span class="literal">r0</span>, lr</span><br><span class="line">// <span class="number">0x8BF3736F</span>   <span class="number">0xE0800001</span>   <span class="keyword">add</span>  <span class="literal">r0</span>, <span class="literal">r0</span>, <span class="literal">r1</span></span><br><span class="line">// <span class="number">0x8A5C8C5E</span>   <span class="number">0xE12FFF30</span>   blx  <span class="literal">r0</span></span><br></pre></td></tr></table></figure></p>
<p>计算正确的内存地址，更改段属性，写入解密数据，最后跳转执行。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">vm_address_t</span> addr = myseg-&gt;vmaddr + <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;(info.dli_fbase) - FILE_BASE_ADDR;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> __arm64__ || __x86_64__</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"__0xBBC,__code at 0x%lX\n"</span>,addr);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"__0xBBC,__code at 0x%X\n"</span>,addr);</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">kern_return_t</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更改段属性为RWE</span></span><br><span class="line">err = vm_protect(<span class="keyword">mach_t</span>ask_self_, addr, myseg-&gt;vmsize, <span class="number">0</span>, VM_PROT_ALL);</span><br><span class="line"><span class="keyword">if</span> (err == KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_protect] KERN_SUCCESS![0]\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_protect] KERN_ERROR![%d]\n"</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写入数据</span></span><br><span class="line">err = vm_write(<span class="keyword">mach_t</span>ask_self_, addr, (<span class="keyword">vm_offset_t</span>)&amp;sectionData, <span class="keyword">sizeof</span>(sectionData));</span><br><span class="line"><span class="keyword">if</span> (err == KERN_SUCCESS) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_write]   KERN_SUCCESS![0]\n"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"[vm_write] KERN_ERROR![%d]\n"</span>,err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转执行</span></span><br><span class="line">(*((<span class="keyword">void</span> (*)())(addr)))();</span><br></pre></td></tr></table></figure>
<p>编译好了之后记得用MachOView改段属性的Max Protect：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.14.06.png" alt=""></p>
<p>执行结果：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.12.59.png" alt=""></p>
<h3 id="更改指令集">更改指令集</h3><p>刚才写入Section之后，虽然是成功运行，没有任何报错，但是我还没有解释清楚那个谜之数据是怎么来的。</p>
<p>虽然在注释里写出了ASM，但是里面其实是有坑的。</p>
<p>解密之后的数据：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">unsignedint sectionData[] = &#123;<span class="number">0xA0E1000E</span>,<span class="number">0xE0800001</span>,<span class="number">0xE12FFF30</span>&#125;<span class="comment">;</span></span><br><span class="line">// Encrypt      Decrypt      ASM</span><br><span class="line">// <span class="number">0xCB927360</span>   <span class="number">0xA0E1000E</span>   <span class="keyword">mov</span>  <span class="literal">r0</span>, lr</span><br><span class="line">// <span class="number">0x8BF3736F</span>   <span class="number">0xE0800001</span>   <span class="keyword">add</span>  <span class="literal">r0</span>, <span class="literal">r0</span>, <span class="literal">r1</span></span><br><span class="line">// <span class="number">0x8A5C8C5E</span>   <span class="number">0xE12FFF30</span>   blx  <span class="literal">r0</span></span><br></pre></td></tr></table></figure></p>
<p>让我们用之前所讲的第一种创建Section的方法写一下吧：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__declspec(allocate(<span class="string">"__0xBBC,__code"</span>))</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * agrv[])</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 确保func()被编译</span></span><br><span class="line">    <span class="keyword">if</span> (ULLONG_MAX == argc) func();</span><br><span class="line">    Dl_info info;</span><br><span class="line">    <span class="keyword">if</span> (dladdr((<span class="keyword">const</span> <span class="keyword">void</span> *)main, &amp;info))&#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="keyword">struct</span> SEGMENT_COMMAND * myseg = getsegbyname(<span class="string">"__0xBBC"</span>);</span><br><span class="line">        <span class="keyword">vm_address_t</span> addr = myseg-&gt;vmaddr + <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;(info.dli_fbase) - FILE_BASE_ADDR;</span><br><span class="line">        (*((<span class="keyword">void</span> (*)())(addr)))();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在MachOView中设置好段属性之后，通过debugserver调试：（在设备上）</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">debugserver</span> -x <span class="keyword">backboard </span>*:<span class="number">1234</span> /segment</span><br></pre></td></tr></table></figure>
<p>在lldb里下一个断点在dladdr上，<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">b</span> dladdr</span><br></pre></td></tr></table></figure></p>
<p>之后一路按’n’，等执行到<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="list">(<span class="keyword"><span class="built_in">*</span></span><span class="list">(<span class="list">(<span class="keyword">void</span> <span class="list">(<span class="keyword"><span class="built_in">*</span></span>)</span><span class="list">()</span>)</span><span class="list">(<span class="keyword">addr</span>)</span>)</span>)</span><span class="list">()</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>如图：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.39.31.png" alt=""></p>
<p>按’si’单步跟进，直到lldb显示：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.39.49.png" alt=""></p>
<p>此时在lldb中使用’dis’，可以看到</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.39.53.png" alt=""></p>
<p>教练，这和Hopper里看到的不一样啊！！！</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.51.03.png" alt=""></p>
<p>其实用’dis -A thumb’就和Hopper里看见的一样了：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%881.40.44.png" alt=""></p>
<p>但是！请注意！</p>
<p>lldb之所以默认从thumb变到ARM的反汇编模式，是因为设备上的CPU模式发生了变化，不信你可以在单步跟进func()之前输入’dis’和’dis -A thumb’，你看到的反汇编结果会是一样的！</p>
<p>于是这就要求我们嵌入在Section的指令必须是ARM的！</p>
<p>那么要怎么生成ARM指令的程序呢，在Xcode上还没找到。。。</p>
<p>thumb指令被当成ARM指令之后，不是可能正常执行的：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%882.23.58.png" alt=""></p>
<h4 id="生成ARM指令的程序">生成ARM指令的程序</h4><p>不过借助LLVM框架还是可以完成的：</p>
<p>nico.m文件：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#import &lt;stdio.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nico</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Nico~Nico~Ni\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译：<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ llc -march arm -mcpu generic nico<span class="class">.ll</span> -o nico<span class="class">.s</span></span><br><span class="line">$ clang nico<span class="class">.s</span> -x assembler -arch armv7 -e _nico -isysroot $(xcrun --sdk iphoneos --show-sdk-path) -o nico</span><br></pre></td></tr></table></figure></p>
<p>这样编译出来的就是ARM指令的程序：</p>
<p><img src="https://dn-0xbbc-blog.qbox.me/wp-content/uploads/2015/04/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7-2015-04-20-%E4%B8%8B%E5%8D%882.18.12.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://blog.0xbbc.com/2015/04/ios-dep%E7%A0%94%E7%A9%B61-%E5%88%9B%E5%BB%BAsection/">reference</a></p>
<h1 id="iOS_DEP_研究">iOS DEP 研究</h1><h2 id="创建Section">创建Section</h2><p>将加密的程序放在一个Section中，外壳运行时解密该Section，并执行解密后的程序</p>
<h3 id="通过other_linker_flags创建">通过other linker flags创建</h3><p><a href="http://bbs.iosre.com/t/tweak-app-app-tweak/438">这篇文章</a>提到过如何通过创建Section来防止dylib依附。其具体方法是在other linker flags中填入如下内容：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,__RESTRICT,__restrict,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure>
<p>那么我们要创建自己的Section的话，就可以修改为如下格式：<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Wl,-sectcreate,SEGMENT_NAME,SECTION_NAME,<span class="regexp">/dev/</span><span class="keyword">null</span></span><br></pre></td></tr></table></figure></p>
<p>这样就可以创建一个size为1，段名字为SEGMENT_NAME，Section名为SECTION_NAME的Section了。</p>
<p>那么因为我们要把加密数据放进去，所以最后一个参数改为我们的加密文件的路径即可。</p>
<p>你可以在ld(1)中的Options that control additional content找到这部分内容。</p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS optimization]]></title>
    <link href="http://ytlvy.com/2015/09/01/iOS-optimization/"/>
    <id>http://ytlvy.com/2015/09/01/iOS-optimization/</id>
    <published>2015-09-01T13:51:44.000Z</published>
    <updated>2015-09-01T14:29:41.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.hrchen.com/2013/05/performance-with-instruments/" target="_blank" rel="external">reference</a></p>
<h2 id="iOS_App性能优化">iOS App性能优化</h2><h3 id="iOS_App的性能关注点">iOS App的性能关注点</h3><p>虽然iPhone的机能越来越好，但是app的功能也越来越复杂，性能从来都是移动开发的核心关注点之一。我们说一个app性能好，不是简单指感觉运行速度快，而应该是指应用启动快速、UI反馈响应及时、列表滚动操作流畅、内存使用合理，当然更不能随随便便Crash啦。工程师开发应用时除了在设计上要避免性能“坑”的出现，在实际遇到“坑”时也要能很快定位原因所在。定位性能问题原因当然不能靠猜，合理的方法是使用工具测量评估出投资回报最高的问题点，然后再加以优化。</p>
<p>本文会从以下几点介绍如何分析和优化iOS app的性能：启动时间、用户响应、内存、图形动画、文件和网络I/O。其中会用到Apple出品的性能分析神器“Instruments”。</p>
<h3 id="启动时间">启动时间</h3><p>应用启动时间长短对用户第一次体验至关重要，同时系统对应用的启动、恢复等状态的运行时间也有严格的要求，在应用超时的情况下系统会直接关闭应用。以下是几个常见场景下系统对app运行时间的要求：</p>
<ul>
<li>Launch 20秒</li>
<li>Resume 10秒</li>
<li>Suspend 10秒</li>
<li>Quit 6秒</li>
<li>Background Task 10分钟</li>
</ul>
<a id="more"></a>
<p>要获取准确的app启动所需时间，最简单的方法时首先在main.c中添加如下代码：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">CFAbsoluteTime</span> StartTime;  </span><br><span class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv) &#123;  </span><br><span class="line">    StartTime = <span class="built_in">CFAbsoluteTimeGetCurrent</span>();</span><br></pre></td></tr></table></figure>
<p>然后在AppDelegate的回调方法application:didFinishLaunchingWithOptions中添加：<br><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dispatch_async<span class="list">(<span class="keyword">dispatch_get_main_queue</span><span class="list">()</span>, ^&#123;</span><br><span class="line">    NSLog<span class="list">(@”Lauched in %f seconds.”,  <span class="list">(<span class="keyword">CFAbsoluteTimeGetCurrent</span><span class="list">()</span> – StartTime)</span>)</span><span class="comment">;</span></span><br><span class="line">&#125;)</span><span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>可能你会觉得为什么这样可拿到系统启动的时间，因为这个dispatch_async中提交的工作会在app主线程启动后的下一个run lopp中运行，此时app已经完成了载入并且将要显示第一帧画面，也就是系统会运行到-[UIApplication _reportAppLaunchFinished]之前。下图是用Instruments工具Time Profiler跑的调用栈，Instruments的使用方法建议看WWDC中与performance相关的session录像，文字写起来太单薄不够直观哈。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/loading_app-1.png" alt=""></p>
<p>从图中我们可以看到在系统调用<code>[UIApplication _reportAppLaunchFinished]</code>之前完成了系统回调<code>application:didFinishLaunchingWithOptions</code>。</p>
<p>App的启动会包括以下几个部分（来自WWDC 2012 Session 235）:</p>
<ol>
<li><p>链接和载入：可以在Time Profile中显示dyld载入库函数，库会被映射到地址空间，同时完成绑定以及静态初始化。</p>
</li>
<li><p>UIKit初始化：如果应用的Root View Controller是由XIB实现的，也会在启动时被初始化。</p>
</li>
<li><p>应用回调：调用UIApplicationDeleagte的回调：application:didFinishLaunchingWithOptions</p>
</li>
<li><p>第一次Core Animation调用：在启动后的方法-[UIApplication _resportAppLaunchFinished]中调用CA::Transaction::commit实现第一帧画面的绘制。</p>
</li>
</ol>
<p>如果你的程序启动很慢，能 做的首先是将与显示第一屏画面无关的操作放到之后执行；如果是用XIB文件load第一屏，XIB文件中的View层也要如果扁平，不要有太多图层。</p>
<h3 id="用户响应">用户响应</h3><p>如何能够让用户觉得你的app响应迅速呢？当然是app用户所触发的操作都能得到立刻响应，即用户事件(User Event)能够被主线程的run loop及时处理。什么是run loop？可以想象成一个处理事件的select多路复用。主线程中的run loop当然主要是为了处理用户产生的事件啦，例如点击、滚动等。以后我们会详细聊聊run loop这个让人迷惑的东东。</p>
<p>要让主线程的run loop更好的响应用户事件，工程师应该尽量减少主线程干重活的时间，尤其是读文件啊，网络操作啊，大量运算啊这类重活，如果是阻塞操作，那就更是大忌了。我们可以用多线程(NSThread、NSOperationQueue, GCD，下一篇Blog就会聊到这多线程)将重活移出主线程，这属于显式并发。还有种隐式并发，例如view和layer的动画、layer的绘制以及PNG图片的解码都是在另一个子线程中执行的。除了使用多线程技术减轻主线程的负担外，减少主线程中阻塞也是提升用户体验的一个方法。使用Instruments中Time Profiler工具中的”Recod thread waiting”选项可以统计出app运行时各个线程中的阻塞系统调用情况，例如文件读写read/write，网络读写send/recv，加锁psynchmutexwait等。Instruments中的System Trace工具则能够记录所有的底层系统调用。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/record_thread_waiting.png" alt=""></p>
<h3 id="内存">内存</h3><p>内存问题从来都是iOS app的老大难问题，搞不好程序就爆了。由于iOS系统没有Swap文件(知道为啥不？留给悬念)，在内存不足时会将只读数据(例如code page)从内存中移出，需要的时候再从disk上读如内存；可读写数据不会被系统从内存中移出，然而如果占用的内存达到一个阈值，系统会发出相应的通知和回调让应用release对象以回收内存，如果仍然不能减少内存使用量，系统会直接关闭应用。尤其是iOS 5.0之后，如果你的app收到了memory warning，那么脑袋也是和其他app一样放在了案板上，随时有可能被kill掉，并不是说一定会先Kill掉在后台的app。</p>
<p>App使用的内存除了我们在堆上分配的内存外（+[NSobject alloc]/malloc），还会有更多使用内存的地方，比如代码和全局数据（TEXT和DATA），线程栈，图片，view 的layer backing store等等。因此处理内存问题，绝不仅仅是我们开发app时尽量少申请内存那么简单。</p>
<p>现在有了超炫的ARC，内存问题相对少了很多，开发效率也得到了提高。但是很多公司的项目仍然由于历史原因采用了手动管理内存，该做的活还是少不了。Xcode自带的静态分析功能可以帮你提前发现一些问题，然而有些内存问题是无法用静态分析来发现的，例如我们不断使用内存没有及时释放的问题，就无法使用静态分析器分析出来。此时可以使用Instruments的Allocations和Leaks工具来检查运行时的的内存使用以及泄露问题。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/allocations.png" alt=""></p>
<p>Allocations工具可以很直观的反应app的内存使用情况，还有个很赞“Mark Heap”功能，在上图左边下半部分中的Heapshot Analysis中。例如你在进入一个页面前点击一下“Mark Heap”，然后再退回上一页面点击一下“Mark Heap”，如果你在进出这个页面里所申请的内存都得到了合理的释放，那么堆的内存增长量就应该降至0（见上图右下部分）。</p>
<p>另一种严重的内存使用问题是引用了已经释放的内存，直接导致应用崩溃，而Allocation有一个选项Enable NSZombie detection能够在应用使用已经释放的内存时标注出来，同时显示错误发生的调用栈信息。这为解决问题提供了最直接的帮助，当然缺点是必须能够重现EXECBADACCESS错误。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/zombies.png" alt=""></p>
<p>工具Leaks可以在应用运行时直接标示出存在内存泄露的代码，如果发生了内存泄露，可以从泄露详细信息中查看泄露的具体对象以及方法调用栈，大部分问题还是很好解决的</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/leak.png" alt=""></p>
<h3 id="图形和动画">图形和动画</h3><p>图形性能对用户体验有直接的影响，Instruments中的Core Animation工具用于测量物理机上的图形性能，通过视图的刷新频率大小来判断应用的图形性能。例如一个复杂的列表滚动时它的刷新率应该努力趋近于60fps才能让用户觉得够流畅，从这个数字也可以算出run loop最长的响应时间应该是16毫秒。</p>
<p>启动Instruments的Core Animation工具后可以发现左下部分有一堆选项，我们来逐个介绍：</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/core_animation.png" alt=""></p>
<p>1) Color Blended Layers</p>
<p>Instruments可以在物理机上显示出被混合的图层Blended Layer(用红色标注)，Blended Layer是因为这些Layer是透明的(Transparent)，系统在渲染这些view时需要将该view和下层view混合(Blend)后才能计算出该像素点的实际颜色，如果这种blended layer很多，那么在滚动列表时就甭想有流畅的效果。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/color_blended_layer.png" alt=""></p>
<p>解决blended layer问题也很简单，检查红色区域view的opaque属性，记得设置成YES；检查backgroundColor属性是不是[UIColor clearColor]，要知道背景颜色为clear color那可是图形性能的大敌，基本意味着blended layer是跑不了的了，为什么？自己思考一下:)</p>
<p>2) Color Hits Green and Misses Red</p>
<p>很多视图Layer由于Shadow、Mask和Gradient等原因渲染很高，因此UIKit提供了API用于缓存这些Layer：[layer setShouldRasterize:YES]，系统会将这些Layer缓存成Bitmap位图供渲染使用，如果失效时便丢弃这些Bitmap重新生成。图层Rasterization栅格化好处是对刷新率影响较小，坏处是删格化处理后的Bitmap缓存需要占用内存，而且当图层需要缩放时，要对删格化后的Bitmap做额外计算。</p>
<p>使用这个选项后时，如果Rasterized的Layer失效，便会标注为红色，如果有效标注为绿色。当测试的应用频繁闪现出红色标注图层时，表明对图层做的Rasterization作用不大。</p>
<p>3) Color Misaligned Images</p>
<p>Misaligned Image表示要绘制的点无法直接映射到频幕上的像素点，此时系统需要对相邻的像素点做anti-aliasing反锯齿计算，增加了图形负担，通常这种问题出在对某些View的Frame重新计算和设置时产生的。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/color_misaligned_image.png" alt=""></p>
<p>上图中被标注为黄色的图层，这是由于图层显示的是被缩放后的图片，如果这些图片是通过网络下载的，可以通过程序更新为确定的绘制大小来解决。还有些系统Navigation Bar和Tool Bar的背景图片使用的是拉伸(Streched)图片，也会被表示为黄色，这是属于正常情况，通常无需修改。这种问题一般对性能影响不大，而是可能会在边缘处虚化。</p>
<p>(4) Color Offscreen-Rendered Yellow</p>
<p>Offscreen-Rendering离屏渲染意思是iOS要显示一个视图时，需要先在后台用CPU计算出视图的Bitmap，再交给GPU做Onscreen-Rendering显示在屏幕上，因为显示一个视图需要两次计算，所以这种Offscreen-Rendering会导致app的图形性能下降。</p>
<p>大部分Offscreen-Rendering都是和视图Layer的Shadow和Mask相关，下列情况会导致视图的Offscreen-Rendering：</p>
<ul>
<li>使用Core Graphics (CG开头的类)。</li>
<li>使用drawRect()方法，即使为空。</li>
<li>将CALayer的属性shouldRasterize设置为YES。</li>
<li>使用了CALayer的setMasksToBounds(masks)和setShadow*(shadow)方法。</li>
<li>在屏幕上直接显示文字，包括Core Text。</li>
<li>设置UIViewGroupOpacity。</li>
</ul>
<p>这篇博文<a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance" target="_blank" rel="external">Designing for iOS: Graphics &amp; Performance对offsreen</a>以及图形性能有个很棒的介绍，</p>
<p>(5) Color Copied Images</p>
<p>Copied Image选项可以标注应用绘制时被Core Animation复制的图片，标注成蓝绿色。虽然我在运行时遇到过，不过个人感觉对图形性能影响不大。</p>
<p>(6) Color Immediately，Flash Updated Regions， Color OpenGL Fast Path Blue</p>
<p>Color Immediately选项表示Instruments在做color-flush操作时取消10毫秒的延时。<br>Flash Updated Regions选项用于用红色示标示出在屏幕上使用GPU计算绘制的图层。<br>Color OpenGL Fast Path Blue选项用于用蓝色标示出在屏幕上由OpenGL compositor绘制的内容。</p>
<p>这三个选项对图形性能的分析意义较小，通常仅作为参考。</p>
<h3 id="文件和网络I/O">文件和网络I/O</h3><p>如果需要对app的文件和网络I/O情况做分析，可以用到这三个Instruments工具System Usage、File Activity和Network。</p>
<p>工具System Usage可以统计出运行状态下应用的文件和网络IO操作数据。例如我们发现应用启动后又一个峰值，这可能存在问题，我们可以利用System Usage工具的详细信息栏查看应用是由于对哪些文件的读写操作导致了峰值。</p>
<p>工具File Activity只能在模拟器中运行，因此数据采集可能不是非常准确。它同样可以详细给出读取的文件属性、大小、载入时间等信息，适合与System Usage配合使用。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/file_activity.png" alt=""></p>
<p>Network工具则可以采集到应用的TCP/IP和UDP的使用信息(传输的数据量、当前所有TCP连接等)，用得不多，做网络使用状况分析时用用还行。</p>
<p><img src="http://www.hrchen.com/content/images/2015/04/instruments_networking.png" alt=""></p>
<h3 id="更多阅读">更多阅读</h3><p>涉及iOS App性能的知识很多，上面只是冰山一角，重点推荐WWDC的session。</p>
<p>WWDC 2012:</p>
<ul>
<li>406: Adopting Automatic Reference Counting</li>
<li>238: iOS App Performance: Graphics and Animations</li>
<li>242: iOS App Performance: Memory</li>
<li>235: iOS App Performance: Responsiveness</li>
<li>409: Learning Instruments</li>
<li>706: Networking Best Practices</li>
<li>514: OpenGL ES Tools and Techniques</li>
<li>506: Optimizing 2D Graphics and Animation Performance</li>
<li>601: Optimizing Web Content in UIWebViews and Websites on iOS</li>
<li>225: Up and Running: Making a Great Impression with Every Launch</li>
</ul>
<p>WWDC 2011:</p>
<ul>
<li>105: Polishing Your App: Tips and tricks to improve the responsiveness and performance</li>
<li>121: Understanding UIKit Rendering</li>
<li>131 performance optimization on iphone os</li>
<li>308: Blocks and Grand Central Dispatch in Practice</li>
<li>323: Introducing Automatic Reference Counting</li>
<li>312: iOS Performance and Power Optimization with Instruments</li>
</ul>
<p>还有几篇不错的blog：</p>
<p><a href="http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/" target="_blank" rel="external">http://oleb.net/blog/2011/11/ios5-tech-talk-michael-jurewitz-on-performance-measurement/</a><br><a href="http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/" target="_blank" rel="external">http://eng.pulse.me/tips-for-improving-performance-of-your-ios-application/</a><br><a href="http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance" target="_blank" rel="external">http://robots.thoughtbot.com/post/36591648724/designing-for-ios-graphics-performance</a><br><a href="http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/" target="_blank" rel="external">http://www.touchwonders.com/en/how-to-make-your-apps-feel-responsive-and-fast-part-2/</a><br><a href="http://disqus.com/" target="_blank" rel="external">comments powered by Disqus</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.hrchen.com/2013/05/performance-with-instruments/">reference</a></p>
<h2 id="iOS_App性能优化">iOS App性能优化</h2><h3 id="iOS_App的性能关注点">iOS App的性能关注点</h3><p>虽然iPhone的机能越来越好，但是app的功能也越来越复杂，性能从来都是移动开发的核心关注点之一。我们说一个app性能好，不是简单指感觉运行速度快，而应该是指应用启动快速、UI反馈响应及时、列表滚动操作流畅、内存使用合理，当然更不能随随便便Crash啦。工程师开发应用时除了在设计上要避免性能“坑”的出现，在实际遇到“坑”时也要能很快定位原因所在。定位性能问题原因当然不能靠猜，合理的方法是使用工具测量评估出投资回报最高的问题点，然后再加以优化。</p>
<p>本文会从以下几点介绍如何分析和优化iOS app的性能：启动时间、用户响应、内存、图形动画、文件和网络I/O。其中会用到Apple出品的性能分析神器“Instruments”。</p>
<h3 id="启动时间">启动时间</h3><p>应用启动时间长短对用户第一次体验至关重要，同时系统对应用的启动、恢复等状态的运行时间也有严格的要求，在应用超时的情况下系统会直接关闭应用。以下是几个常见场景下系统对app运行时间的要求：</p>
<ul>
<li>Launch 20秒</li>
<li>Resume 10秒</li>
<li>Suspend 10秒</li>
<li>Quit 6秒</li>
<li>Background Task 10分钟</li>
</ul>]]>
    
    </summary>
    
      <category term="Optimization" scheme="http://ytlvy.com/tags/Optimization/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iOS locksreen operation]]></title>
    <link href="http://ytlvy.com/2015/09/01/iOS-locksreen-operation/"/>
    <id>http://ytlvy.com/2015/09/01/iOS-locksreen-operation/</id>
    <published>2015-09-01T13:35:18.000Z</published>
    <updated>2015-09-01T13:35:37.000Z</updated>
    <content type="html"><![CDATA[<h2 id="iOS_锁屏操作">iOS 锁屏操作</h2><p>如果你的App不需要” 喜欢/书签”等功能的话，直接使用RemoteControl就行。<br>对于RemoteCommand，一个SEL只能对应一个command。<br>另外就是RemoteCommand的callback会先于RemoteControl，不过也就几ms的间隔。而且使用RemoteControl更方便。</p>
<a id="more"></a>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  ViewController.m</span></span><br><span class="line"><span class="comment">//  mprc</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  Created by BlueCocoa on 15/4/6.</span></span><br><span class="line"><span class="comment">//  Copyright (c) 2015年 0xBBC. All rights reserved.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"> </span><br><span class="line"><span class="preprocessor">#import <span class="title">"ViewController.h"</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;MediaPlayer/MediaPlayer.h&gt;</span></span></span><br><span class="line"><span class="preprocessor">#import <span class="title">&lt;AVFoundation/AVFoundation.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line">@interfaceViewController ()&lt;<span class="built_in">AVAudioPlayerDelegate</span>&gt;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">AVAudioPlayer</span> * player;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">MPRemoteCommand</span> * mprcNext, * mprcPlay, * mprcPause, * mprcPrevious;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">MPFeedbackCommand</span> * mpfbLike, * mpfbDislike, * mpfbBookMark;</span><br><span class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>) <span class="built_in">BOOL</span> bookmark;</span><br><span class="line"><span class="keyword">@end</span></span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@synthesize</span> player;</span><br><span class="line"><span class="keyword">@synthesize</span> mprcNext,mprcPlay,mprcPause,mprcPrevious;</span><br><span class="line"><span class="keyword">@synthesize</span> mpfbLike,mpfbDislike,mpfbBookMark;</span><br><span class="line"><span class="keyword">@synthesize</span> bookmark;</span><br><span class="line"> </span><br><span class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</span><br><span class="line">    [<span class="keyword">super</span> viewDidLoad];</span><br><span class="line">    <span class="built_in">NSError</span> *error;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.player</span> = [[<span class="built_in">AVAudioPlayer</span> alloc] initWithContentsOfURL:[<span class="built_in">NSURLfileURLWithPath</span>:[[<span class="built_in">NSBundle</span> mainBundle] pathForResource:<span class="string">@"1"</span> ofType:<span class="string">@"m4a"</span>]] error:&amp;error];</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,error);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">AVAudioSession</span> *session = [<span class="built_in">AVAudioSession</span> sharedInstance];</span><br><span class="line">    [session setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [session setActive:<span class="literal">YES</span> error:<span class="literal">nil</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setDelegate:<span class="keyword">self</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> prepareToPlay];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> play];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setNumberOfLoops:-<span class="number">1</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.player</span> setVolume:<span class="number">1</span>];</span><br><span class="line">    [[<span class="built_in">UIApplication</span> sharedApplication] beginReceivingRemoteControlEvents];</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcNext</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.nextTrackCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcNext</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(nextTrackCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPlay</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.playCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPlay</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(playCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPause</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.pauseCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPause</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(pauseCommand:)];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mprcPrevious</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.previousTrackCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mprcPrevious</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(previousTrackCommand:)];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbLike</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.likeCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(likeCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setLocalizedTitle:<span class="string">@"喜欢这首歌"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setLocalizedShortTitle:<span class="string">@"喜欢"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbDislike</span> =[<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.dislikeCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(dislikeCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setLocalizedTitle:<span class="string">@"不喜欢这首歌"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setLocalizedShortTitle:<span class="string">@"不喜欢"</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">self</span><span class="variable">.mpfbBookMark</span> = [<span class="built_in">MPRemoteCommandCenter</span> sharedCommandCenter]<span class="variable">.bookmarkCommand</span>;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> addTargetWithHandler:^<span class="built_in">MPRemoteCommandHandlerStatus</span>(<span class="built_in">MPRemoteCommandEvent</span> *event) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">MPRemoteCommandHandlerStatusSuccess</span>;</span><br><span class="line">    &#125;];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMark</span> addTarget:<span class="keyword">self</span> action:<span class="keyword">@selector</span>(bookmarkCommand:)];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMarksetLocalizedTitle</span>:<span class="string">@"书签"</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbBookMarksetLocalizedShortTitle</span>:<span class="string">@"书签"</span>];</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bookmark</span> = <span class="literal">NO</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)bookmarkCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">self</span><span class="variable">.bookmark</span> = !<span class="keyword">self</span><span class="variable">.bookmark</span>;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Bookmark"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)dislikeCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislike</span> setEnabled:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Dislike"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)likeCommand:(<span class="built_in">MPFeedbackCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbLike</span> setEnabled:<span class="literal">NO</span>];</span><br><span class="line">    [<span class="keyword">self</span><span class="variable">.mpfbDislikesetEnabled</span>:<span class="literal">YES</span>];</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Like"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)previousTrackCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Previous Track"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)playCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Play in MPRemoteCommandEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)pauseCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Pause in MPRemoteCommandEvent"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)nextTrackCommand:(<span class="built_in">MPRemoteCommandEvent</span> *)sender</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Next Track"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)remoteControlReceivedWithEvent:(<span class="built_in">UIEvent</span> *)event</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (event<span class="variable">.subtype</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPlay</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Play in RemoteControlEvent"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="built_in">UIEventSubtypeRemoteControlPause</span>:</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"Pause in RemoteControlEvent"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="iOS_锁屏操作">iOS 锁屏操作</h2><p>如果你的App不需要” 喜欢/书签”等功能的话，直接使用RemoteControl就行。<br>对于RemoteCommand，一个SEL只能对应一个command。<br>另外就是RemoteCommand的callback会先于RemoteControl，不过也就几ms的间隔。而且使用RemoteControl更方便。</p>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[code optimization]]></title>
    <link href="http://ytlvy.com/2015/09/01/code-optimization/"/>
    <id>http://ytlvy.com/2015/09/01/code-optimization/</id>
    <published>2015-09-01T13:32:49.000Z</published>
    <updated>2015-09-01T14:28:27.000Z</updated>
    <content type="html"><![CDATA[<p><a href="">reference</a></p>
<h2 id="我是如何收拾代码的">我是如何收拾代码的</h2><h3 id="注释">注释</h3><p>虽说好的代码不用注释,但是那得是好的代码..好记性不如烂笔头，好好写注释可以给自己和自己的小伙伴省下很多时间.<br>注释都是// 或是/<em> 注释 </em>/ ，这样的通用注释不做多说明，这里介绍一些稍带技巧的注释：</p>
<h4 id="参数的注释">参数的注释</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton <span class="keyword">*</span>btnSend;/<span class="keyword">*</span><span class="keyword">*</span><span class="variable">&lt; 发送按钮 */</span></span><br></pre></td></tr></table></figure>
<p>在调用时可以得到提示，在内容比较多时比较好用，我有时候脑子短路要想好一会才能记得当初定义的变量是做什么用的。</p>
<h4 id="方法的注释">方法的注释</h4><p>如果你的方法是没有参数的，只需要写一句注释，那只需要在方法前加注释就行了</p>
<p>type 1<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** table 相关设置 *</span>/</span></span></span><br><span class="line">-(<span class="keyword">void</span>)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>type 2（插件：VVDocument）使用此插件可以很便捷的为自己的代码添加注释<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>!</span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@author joanfen, 15-05-14 12:05:22</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@brief  相关设置</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">-(void)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样的注释 在你调用时会显示你所添加注释，如图<br><a id="more"></a><br><img src="http://static.oschina.net/uploads/space/2015/0514/121231_jCac_735123.png" alt=""></p>
<p>有参数的注释<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>!</span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@Author joanfen, 15-05-13 14:01:51</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@method POST</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@see XRClass</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@brief  链接解析</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@param linkAddressStr 链接地址</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br></pre></td></tr></table></figure></p>
<p>大家使用VVDocument 的插件来写注释就对了。这样的注释自己写起来太费事，没有插件我真不愿意写。</p>
<h4 id="方法分区">方法分区</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#pragma</span> <span class="tag">mark</span> - &lt;注释，也可不写，没有注释时就只显示一条分割线&gt;</span><br><span class="line"><span class="id">#pragma</span> <span class="tag">mark</span> 注释</span><br></pre></td></tr></table></figure>
<p>区别：带 - 的会显示一条分割线</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/162252_0ZSV_735123.png" alt=""></p>
<p>便于简单快速的查找方法</p>
<h4 id="添加提示信息">添加提示信息</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">error</span> &lt;提示信息&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果加上这样的错误提示，在 Build 时 XCode 会提示编译错误：</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/162847_OcyP_735123.png" alt=""></p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/162847_FcKX_735123.png" alt=""></p>
<p>在某部分代码没有完成，而且如果提交会导致问题时可以加上这样的提示信息来提醒自己。</p>
<p>如果你觉得只是想提醒自己来完成，并不需要加上红色的 error 信息，你可以尝试使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">warning</span> &lt;提示信息&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样的话在编译时提示信息是这样的</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/163150_wHPF_735123.png" alt=""></p>
<p>使用场景</p>
<p>在替换某个类时，需要删除原有的代码，再进行替换，每次删除一个我就加一行同样的 warning，最后新的写好之后，搜索这行 waring，将调用方法填充，大大提高效率；</p>
<p>UI 写好了，数据部分还没有好，将逻辑梳理好，方法写好，加上 warning ，包含 deadline，需要完成的工作，在后台数据可测时，再来完成，不写的话有时候真的脑子短路，有时候半天都不记得当时是准备怎么弄的，尤其在开发量大的时候，原谅我是一个容易脑子短路的人，-_-。</p>
<h3 id="使用常量">使用常量</h3><p>常见使用宏，const 常量，枚举等来定义常量，避免将一个数字或者是字符串重复写多次，而是定义成常量，便于统一管理，也减少出错的几率</p>
<p>推荐两篇关于常量的博客： <a href="http://onevcat.com/2014/01/black-magic-in-macro/" target="_blank" rel="external">宏定义的黑魔法</a>， <a href="http://tutuge.me/2015/03/11/Effective-Objective-C-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0-Item-4-%E5%A6%82%E4%BD%95%E6%AD%A3%E7%A1%AE%E5%AE%9A%E4%B9%89%E5%B8%B8%E9%87%8F/" target="_blank" rel="external">如何正确定义常量</a></p>
<h4 id="宏">宏</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="hexcolor">#def</span>ine</span><br></pre></td></tr></table></figure>
<p>宏大家应该都不陌生，这里不展开赘述，请看上面的博文，我在去年看了宏定义的黑魔法这篇博文之后，曾经一度超级喜欢用宏，不管是字符串，方法，还是高度，动画时长这一类常量，我都喜欢用宏来定义，直到我看见了后面的如何正确定义常量这篇博客，我才清醒一点。</p>
<h4 id="const_常量">const 常量</h4><p>现在使用的多得是 const 常量</p>
<p>在方法体内使用<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> CGFloat KCellHight = <span class="number">126.f</span>;</span><br></pre></td></tr></table></figure></p>
<p>在类文件中使用, 在.m 文件中<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">CGFloat</span> KXRBtnSendHeight = <span class="number">44</span>;</span><br></pre></td></tr></table></figure></p>
<p>如果需要提供给外部使用，使用 extern 修饰：</p>
<p>只需要在.h 中使用 extern 外部声明即可<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CGFloat</span> KXRBtnSendHeight;<span class="comment">/**&lt; send按钮高度 */</span></span><br></pre></td></tr></table></figure></p>
<h4 id="枚举">枚举</h4><p>在判断 table 的 section，row，控件的 tag，或是点击的 index，或是自己定义的 type 时，不要直接使用数字判断，如果类型多，使用枚举，少，可以使用上文中的宏或是const 常量</p>
<figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">typedef <span class="class"><span class="keyword">enum</span> : <span class="title">NSUInteger</span> </span>&#123;</span><br><span class="line"><span class="constant">    XRTypeRegular</span> = <span class="number">10</span>,</span><br><span class="line"><span class="constant">    XRTypeSimple</span> = <span class="number">20</span>,</span><br><span class="line">&#125; XRType;</span><br></pre></td></tr></table></figure>
<p>在判断 type 时，使用这样的语法，这是最基本的，看到直接 == 10这样的代码，没有办法忍<br><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="class"><span class="keyword">type</span> </span>== XRTypeRegular)</span><br></pre></td></tr></table></figure></p>
<h3 id="使用_Category_或是基类">使用 Category 或是基类</h3><p>这个部分不是很好给出代码实例，要实例的话想想当初做各级员工结算工资的课程设计吧，只作简要说明。</p>
<p>在逻辑比较繁杂，某个类代码量非常庞大时，可以考虑使用基类，将公有的属性和方法在基类中实现，自己在使用时只需要关注一些单独的逻辑即可，可以大大提高代码效率。</p>
<p>使用 category 是对某个类进行一些简单的扩展，在 category 中定义的方法等同于类的方法，是一样的，为了让功能划分更纯粹一些，一言以蔽之，强迫症。。</p>
<p>给出一个小场景：比如我定义了一个 UITableViewCell 的类，在 A，B，C 的视图控制器中样式都是一样的，但是在D 的视图控制器中需要对它进行一些改造，这样的话就可以在 D 的类中加上一个 Category来进行操作，在 D 中直接调用这个方法即可<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DViewController.h</span></span><br><span class="line"><span class="variable">@interface</span> DViewController&#123;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="variable">@interface</span> <span class="function">ModuleCell</span>(diff)</span><br><span class="line"><span class="function">-</span>(void)<span class="attribute">diffTheCellByParam</span>:(id)param;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DViewController.m</span></span><br><span class="line"><span class="variable">@implementation</span> DViewController</span><br><span class="line"> </span><br><span class="line"><span class="variable">@end</span></span><br><span class="line">#pragma mark - </span><br><span class="line"><span class="variable">@implementation</span> <span class="function">ModuleCell</span>(diff)</span><br><span class="line"><span class="function">-</span>(void)<span class="attribute">diffTheCellByParam</span>:(id)param&#123;</span><br><span class="line">    <span class="comment">// Do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="使用_MVC">使用 MVC</h3><p>MVC 模式是最常见的模式，而且在学习的第一时间就有接触，可能有些人看到这儿觉得，你这不是废话？这谁不知道。</p>
<p>但是我发现在 Objective-C 这个大家庭中，这个模式是遵守的最差的，相信你们一定见过在 ViewController 中写完所有的数据处理，UI 渲染，视图跳转各类动画的经典案例，因为我们就是这类型创造者，新手应该都是这样过来的（只是说明是一个大概率事件，很多资深其他平台开发者转过来时这方面是做的非常好的）。</p>
<ol>
<li><p>把数据的处理（获取，筛选，排序等）工作放在 Model 中，所谓 Model，新建一个继承自 NSObject（一般是 NSObject） 的类，用来处理数据，直接调用即可；</p>
</li>
<li><p>把视图的渲染放在 View 中（简单的视图加载可直接在 Controller 中完成），在遇到比较繁杂，需要几百行代码来完成时，如果你是用 xib或是 storyboard 配合代码，这部分无需这么严格，公用的视图必然是放在 View 中了；</p>
</li>
<li><p>视图控制器 Controller 中只用来调用数据，显示数据，视图的加载，跳转等工作。</p>
</li>
</ol>
<p>视图内容在繁杂时可以考虑使用多个视图控制器联合控制一个页面，如 Apple 的 TabBarController 的工作机理。<br>将视图以 AddChildViewController 的方式添加到当前视图。<br>在 A 控制器中添加 B 控制器的视图，这样 A 同时包含了 A 和 B 的视图，B 视图中得 UI 逻辑依然在 B 中进行处理<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BViewController </span>*secondVC = VCFromSB(storyboardPatient, <span class="comment">@"XRPatientAllVC");</span></span><br><span class="line">[<span class="keyword">self.view </span><span class="keyword">addSubview:secondVC.view];</span><br><span class="line"></span>[<span class="keyword">self </span><span class="keyword">addChildViewController:secondVC];</span><br><span class="line"></span>[secondVC didMoveToParentViewController:<span class="keyword">self];// </span>将<span class="keyword">B </span>视图的 UI 响应事件移到 A 中，如果不这样操作，只要点击<span class="keyword">B </span>视图中得按钮或是滚动 table 就会崩溃</span><br></pre></td></tr></table></figure></p>
<p>案例不是太好写，要写得好长一篇文章了，我还得想一项目，可以参考这部分文章：更轻量的 ViewControllers</p>
<h3 id="代码规范">代码规范</h3><p>代码规范这事儿 各人有各人的习惯，不多说，但是你得有个规范，别想咋就咋，到时候害的是自己Over</p>
<p>噢，还有件事儿，OC 的代码跟写文章一样这事儿我们都知道，每次都被后端工程师过来吐槽也是醉了，在写参数超过2个的方法时，大家按照冒号对个齐，会好看很多，我也不是逼你这样做，你就随意感受下吧</p>
<p><img src="http://static.oschina.net/uploads/space/2015/0514/181511_1zw7_735123.png" alt=""></p>
<p>最后，多复用，多重构，多写注释，祝大家都有一份整洁有条理的代码。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="">reference</a></p>
<h2 id="我是如何收拾代码的">我是如何收拾代码的</h2><h3 id="注释">注释</h3><p>虽说好的代码不用注释,但是那得是好的代码..好记性不如烂笔头，好好写注释可以给自己和自己的小伙伴省下很多时间.<br>注释都是// 或是/<em> 注释 </em>/ ，这样的通用注释不做多说明，这里介绍一些稍带技巧的注释：</p>
<h4 id="参数的注释">参数的注释</h4><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UIButton <span class="keyword">*</span>btnSend;/<span class="keyword">*</span><span class="keyword">*</span><span class="variable">&lt; 发送按钮 */</span></span><br></pre></td></tr></table></figure>
<p>在调用时可以得到提示，在内容比较多时比较好用，我有时候脑子短路要想好一会才能记得当初定义的变量是做什么用的。</p>
<h4 id="方法的注释">方法的注释</h4><p>如果你的方法是没有参数的，只需要写一句注释，那只需要在方法前加注释就行了</p>
<p>type 1<br><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="markdown">/<span class="emphasis">** table 相关设置 *</span>/</span></span></span><br><span class="line">-(<span class="keyword">void</span>)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>type 2（插件：VVDocument）使用此插件可以很便捷的为自己的代码添加注释<br><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="keyword">*</span>!</span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@author joanfen, 15-05-14 12:05:22</span></span><br><span class="line"> <span class="keyword">*</span></span><br><span class="line"> <span class="keyword">*</span>  <span class="comment">@brief  相关设置</span></span><br><span class="line"> <span class="keyword">*</span>/</span><br><span class="line">-(void)configTable&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样的注释 在你调用时会显示你所添加注释，如图<br>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[get rid of Warnnings]]></title>
    <link href="http://ytlvy.com/2015/09/01/get-rid-of-Warnnings/"/>
    <id>http://ytlvy.com/2015/09/01/get-rid-of-Warnnings/</id>
    <published>2015-09-01T13:30:50.000Z</published>
    <updated>2015-09-01T14:29:23.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://my.oschina.net/joanfen" target="_blank" rel="external">reference</a></p>
<h2 id="干掉_Warnings">干掉 Warnings</h2><h3 id="场景">场景</h3><p>事情是这样的，今天心血来潮想把工程中使用了苹果已弃用方法后得到的警告处理一下，就是这样一段代码，适配 iOS6是很可悲，我知道，你们别说了5555，上个皂片先看下 </p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095518_EO9H.png" alt=""></p>
<p>如果要适配低版本，这样的警告应该不少，每次 Build 的时候就感觉它在对我说：我就喜欢你看我不爽又干不掉我的样子。我这暴脾气，赶了好久的版本，好不容易得点空，必须干掉</p>
<p>其实很多东西都是早就有了解决办法，需要我们去发现而已<br><a id="more"></a></p>
<h3 id="代码块处理">代码块处理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">BOOL is_iOS6 = [[[UIDevice currentDevice] systemVersion] floatValue] &lt; <span class="number">7.0f</span>;</span><br><span class="line"><span class="keyword">if</span> (is_iOS6) &#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic push</span></span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic ignored "-Wdeprecated-declarations"</span></span><br><span class="line">    label.textAlignment = UITextAlignmentCenter;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">pragma</span> clang diagnostic pop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>办法很简单，但是我后来就在想，那么第一个发现”-Wdeprecated-declarations”这个关键字的是谁呢，遇到别的 warning 是不是也有这种解决办法， 我再次在网上search， 果然是从 Apple 得到的信息，点击警告信息，右键选择 Reveal In Log, 就可以看到警告的详细信息</p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095637_5aDf.png" alt=""></p>
<p>中括号中的 -Wdeprecated-declarations 便是我们想要得到的信息了 </p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095614_sBHG.png" alt=""></p>
<p>知道如果找到关键字之后就容易了，以后遇到的 warning 又明知干不掉的时候就用这种方法隐藏即可，是不是很方便呢。</p>
<p>通用格式</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="id">#pragma</span> clang diagnostic push</span><br><span class="line"><span class="id">#pragma</span> clang diagnostic ignored <span class="string">"上文得到的错误信息"</span></span><br><span class="line"><span class="comment">// 代码块</span></span><br><span class="line"><span class="id">#pragma</span> clang diagnostic pop</span><br></pre></td></tr></table></figure>
<h3 id="文件处理">文件处理</h3><p>但是有时候在一个文件中，有很多重复的这种 warning，多见第三方库，一个个改未免太麻烦，所以可以对某一个文件隐藏所有这类 warning。</p>
<p>在 <strong><em>Compile Sources</em></strong> 设置某个文件的 Compiler Flags</p>
<p>得到的 warning 信息是 <code>-Wdeprecated-declarations</code> 需要改成 <code>-Wno-deprecated-declarations</code></p>
<p>即所有的这类报错都是 -W错误信息 的格式，我们需要将 -W 替换成 -Wno- 即告诉编译器这个文件的这个错误不在提示警告，可以添加多个</p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095817_MJ45.png" alt=""></p>
<p>这是对整个文件的 warning 进行隐藏，有时候工程中这类 warning 我们都不想看到，一个个设置也是怪累的，所以也可以对工程进行处理</p>
<h3 id="工程处理">工程处理</h3><p>在 PROJECT -&gt; Build Settings -&gt; Apple LLVM 6.1 - Custom Complier Flags 中的Other Warning Flags 一栏设置即可</p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095844_8p53.png" alt=""></p>
<h3 id="来源">来源</h3><p><a href="http://www.jianshu.com/p/d35409428095" target="_blank" rel="external">简书/践行者：关于 Objective-Cwarning 那些事</a><br><a href="http://onevcat.com/2013/05/talk-about-warning/" target="_blank" rel="external">喵神 OneVCat：谈谈Objective-C的警告</a><br><a href="http://m.blog.csdn.net/blog/vincechou/18699029#" target="_blank" rel="external">CSDN/vincechou：#关于IOS 里面的Warning#</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://my.oschina.net/joanfen">reference</a></p>
<h2 id="干掉_Warnings">干掉 Warnings</h2><h3 id="场景">场景</h3><p>事情是这样的，今天心血来潮想把工程中使用了苹果已弃用方法后得到的警告处理一下，就是这样一段代码，适配 iOS6是很可悲，我知道，你们别说了5555，上个皂片先看下 </p>
<p><img src="https://static.oschina.net/uploads/img/201508/18095518_EO9H.png" alt=""></p>
<p>如果要适配低版本，这样的警告应该不少，每次 Build 的时候就感觉它在对我说：我就喜欢你看我不爽又干不掉我的样子。我这暴脾气，赶了好久的版本，好不容易得点空，必须干掉</p>
<p>其实很多东西都是早就有了解决办法，需要我们去发现而已<br>]]>
    
    </summary>
    
      <category term="IOS" scheme="http://ytlvy.com/tags/IOS/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Cxx Deleting destructors and virtual operator delete]]></title>
    <link href="http://ytlvy.com/2015/09/01/Cxx-Deleting-destructors-and-virtual-operator-delete/"/>
    <id>http://ytlvy.com/2015/09/01/Cxx-Deleting-destructors-and-virtual-operator-delete/</id>
    <published>2015-09-01T13:29:42.000Z</published>
    <updated>2015-09-01T14:29:18.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://eli.thegreenplace.net/2015/c-deleting-destructors-and-virtual-operator-delete/" target="_blank" rel="external">reference</a></p>
<h2 id="C++:_Deleting_destructors_and_virtual_operator_delete">C++: Deleting destructors and virtual operator delete</h2><p>This post starts with a fairly obscure topic - how an overloaded operator delete behaves in light of polymorphism; amazingly, it then gets even more obscure - shedding light on the trickery the compiler employs to make this work, by generating more than one destructor for certain classes. If you’re into such things, read on. If not, sorry about that; I heard that three new Javascript libraries were released this week for MVC JSON-based dynamic CSS layout. Everyone’s switching! Hurry up to keep up with the cool guys and leave this grumpy compiler engineer to mumble to himself.</p>
<h3 id="Virtual_operator_delete?">Virtual operator delete?</h3><p>Consider this code sample:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() = 0;</span><br><span class="line">  virtual ~<span class="keyword">Animal</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Sheep : public <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep says baaaaa\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  virtual ~Sheep() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep is dead\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void operator delete(void* p) &#123;</span><br><span class="line">    printf(<span class="string">"Reclaiming Sheep storage from %p\n"</span>, p);</span><br><span class="line">    ::operator delete(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  <span class="keyword">Animal</span>* ap = new Sheep;</span><br><span class="line">  ap-&gt;<span class="keyword">say</span>();</span><br><span class="line">  delete ap;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>What happens when ap is deleted? Two things:</p>
<ol>
<li>The destructor of the object pointed to by ap is called.</li>
<li>operator <code>delete</code> is called on ap to reclaim heap storage.</li>
</ol>
<p>Part 1 is fairly clear: the static type of <code>ap</code> is <code>Animal</code>, but the compiler knows that <code>Animal</code> has a virtual destructor. So it looks up the actual destructor to invoke in the virtual table stored in the object <code>ap</code> points to. Since the dynamic type of <code>ap</code> is Sheep, the destructor found there will be <code>Sheep::~Sheep</code>, which is correct.</p>
<p>What about that operator <code>delete</code>, though? Is operator <code>delete</code> virtual too? Is is also stored in the virtual table? Because if it isn’t, how does the compiler know which operator delete to invoke?</p>
<p>No, operator <code>delete</code> is not virtual. It is not stored in the virtual table. In fact, operator delete is a static member. The C++11 standard says so explicitly in secton 12.5:</p>
<blockquote>
<p>Any deallocation function for a class X is a static member (even if not explicitly declared <strong><em>static</em></strong>).</p>
</blockquote>
<p>It also adds:</p>
<blockquote>
<p> Since member allocation and deallocation functions are static they cannot be virtual.</p>
</blockquote>
<p>And if you keep reading, it actually mandates that even though this is the case, when the base destructor is virtual operator delete will be correctly looked up in the scope of the class that is the dynamic, not the static type of the object.</p>
<p>Indeed, the code snippet above works correctly and prints:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sheep says baaaaa</span><br><span class="line">Sheep <span class="keyword">is</span> dead</span><br><span class="line">Reclaiming Sheep storage <span class="keyword">from</span> <span class="number">0x1ed1be0</span></span><br></pre></td></tr></table></figure>
<h3 id="Deleting_destructor">Deleting destructor</h3><p>So how does this work, if operator delete is not virtual? Then answer is in a special destructor created for by the compiler. It’s called the deleting destructor and its existence is described by the <a href="https://mentorembedded.github.io/cxx-abi/abi.html" target="_blank" rel="external">Itanium C++ ABI</a>:</p>
<blockquote>
<p> deleting destructor of a class T - A function that, in addition to the actions required of a complete object destructor, calls the appropriate deallocation function (i.e,. operator delete) for T.</p>
</blockquote>
<p>The ABI goes on to provide more details:</p>
<blockquote>
<p> The entries for virtual destructors are actually pairs of entries. The first destructor, called the complete object destructor, performs the destruction without calling delete() on the object. The second destructor, called the deleting destructor, calls delete() after destroying the object.</p>
</blockquote>
<p>So now the mechanics of this operation should be fairly clear. The compiler mimics “virtuality” of operator delete by invoking it from the destructor. Since the destructor is virtual, what ends up called eventually is the destructor for the dynamic type of the object. In our example this would be the destructor of Sheep, which can call the right operator delete since it’s in the same static scope.</p>
<p>However, as the ABI says, such classes need two destructors. If an object is destructed but not deleted from the heap, calling operator delete is wrong. So a separate version of the destructor exists for non-delete destructions.</p>
<h3 id="Examining_how_the_compiler_implements_deleting_destructors">Examining how the compiler implements deleting destructors</h3><p>That’s quite a bit of theory. Let’s see how this is done in practice by studying the machine code generated by gcc for our code sample. First, I’ll slightly modify main to invoke another function that just creates and discards a new Sheep without involving the heap.</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void foo() &#123;</span><br><span class="line">  Sheep s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  <span class="keyword">Animal</span>* ap = new Sheep;</span><br><span class="line">  ap-&gt;<span class="keyword">say</span>();</span><br><span class="line">  delete ap;</span><br><span class="line"></span><br><span class="line">  foo();</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>And compiling this with the flags [1]:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -O2 -g -<span class="keyword">static</span> -<span class="built_in">std</span>=c++<span class="number">11</span> -fno-<span class="keyword">inline</span> -fno-exceptions</span><br></pre></td></tr></table></figure>
<p>We get the following disassembly for main. I’ve annotated the disassembly with comments to explain what’s going on:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000000400</span>cf0 &lt;main&gt;:</span><br><span class="line">  <span class="number">400</span>cf0:    push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>cf1:    mov    <span class="variable">$0</span>x8,<span class="variable">%edi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Call operator new to allocate a new object of type Sheep, and call</span></span><br><span class="line">  <span class="comment">// the constructor of Sheep. Neither Sheep nor Animal have fields, so</span></span><br><span class="line">  <span class="comment">// their size is 8 bytes for the virtual table pointer.</span></span><br><span class="line">  <span class="comment">// The pointer to the object will live in %rbx. The vtable pointer in this</span></span><br><span class="line">  <span class="comment">// object (set up by the constructor of Sheep) points to the the virtual</span></span><br><span class="line">  <span class="comment">// table of Sheep, because this is the actual type of the object (even</span></span><br><span class="line">  <span class="comment">// though we hold it by a pointer to Animal here).</span></span><br><span class="line">  <span class="number">400</span>cf6:    callq  <span class="number">401750</span> &lt;_Znwm&gt;</span><br><span class="line">  <span class="number">400</span>cfb:    mov    <span class="variable">%rax</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>cfe:    mov    <span class="variable">%rax</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d01:    callq  <span class="number">4011</span>f0 &lt;_ZN5SheepC1Ev&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The first 8 bytes of an Animal object is the vtable pointer. So move</span></span><br><span class="line">  <span class="comment">// the address of vtable into %rax, and the object pointer itself ("this")</span></span><br><span class="line">  <span class="comment">// into %rdi.</span></span><br><span class="line">  <span class="comment">// Since the vtable's first entry is the say() method, the call that</span></span><br><span class="line">  <span class="comment">// actually happens here is Sheep::say(ap) where ap is the object pointer</span></span><br><span class="line">  <span class="comment">// passed into the (implicit) "this" parameter.</span></span><br><span class="line">  <span class="number">400</span>d06:    mov    (<span class="variable">%rbx</span>),<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>d09:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d0c:    callq  <span class="variable">*(</span><span class="variable">%rax</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Once again, move the vtable address into %rax and the object pointer</span></span><br><span class="line">  <span class="comment">// into %rdi. This time, invoke the function that lives at offset 0x10 in</span></span><br><span class="line">  <span class="comment">// the vtable. This is the deleting destructor, as we'll soon see.</span></span><br><span class="line">  <span class="number">400</span>d0e:    mov    (<span class="variable">%rbx</span>),<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>d11:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d14:    callq  <span class="variable">*0x10</span>(<span class="variable">%rax</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Finally call foo() and return.</span></span><br><span class="line">  <span class="number">400</span>d17:    callq  <span class="number">4010</span>d0 &lt;_Z3foov&gt;</span><br><span class="line">  <span class="number">400</span>d1c:    xor    <span class="variable">%eax</span>,<span class="variable">%eax</span></span><br><span class="line">  <span class="number">400</span>d1e:    pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d1f:    retq</span><br></pre></td></tr></table></figure>
<p>A diagram of the memory layout of the virtual table for Sheep can be helpful here. Since neither Animal nor Sheep have any fields, the only “contents” of a Sheep object is the vtable pointer which occupies the first 8 bytes:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">                          Virtual table for Sheep:</span><br><span class="line">ap:</span><br><span class="line">--------------            -----------------------</span><br><span class="line">| vtable ptr | ---------&gt; |     Sheep::<span class="keyword">say</span>()    |  0x00</span><br><span class="line">--------------            -----------------------</span><br><span class="line">                          |   Sheep::~Sheep()   |  0x08</span><br><span class="line">                          -----------------------</span><br><span class="line">                          | Sheep deleting dtor |  0x10</span><br><span class="line">                          -----------------------</span><br></pre></td></tr></table></figure>
<p>The two destructors seen here have the roles described earlier. Let’s see their annotated disassembly:<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sheep::~Sheep</span></span><br><span class="line"><span class="number">0000000000401140</span> &lt;_ZN5SheepD1Ev&gt;:</span><br><span class="line">  <span class="comment">// Call printf("Sheep is dead\n")</span></span><br><span class="line">  <span class="number">401140</span>:    push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">401141</span>:    mov    <span class="variable">$0</span>x49dc7c,<span class="variable">%esi</span></span><br><span class="line">  <span class="number">401146</span>:    mov    <span class="variable">%rdi</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">401149</span>:    movq   <span class="variable">$0</span>x49dd50,(<span class="variable">%rdi</span>)</span><br><span class="line">  <span class="number">401150</span>:    xor    <span class="variable">%eax</span>,<span class="variable">%eax</span></span><br><span class="line">  <span class="number">401152</span>:    mov    <span class="variable">$0</span>x1,<span class="variable">%edi</span></span><br><span class="line">  <span class="number">401157</span>:    callq  <span class="number">446260</span> &lt;___printf_chk&gt;</span><br><span class="line">  <span class="number">40115</span>c:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">40115</span>f:    pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="comment">// Call Animal::~Animal, destroying the base class. <span class="doctag">Note</span> the cool tail</span></span><br><span class="line">  <span class="comment">// call here (using jmpq instead of a call instruction - control does not</span></span><br><span class="line">  <span class="comment">// return here but the return instruction from _ZN6AnimalD1Ev will return</span></span><br><span class="line">  <span class="comment">// straight to the caller).</span></span><br><span class="line">  <span class="number">401160</span>:    jmpq   <span class="number">4010</span>f0 &lt;_ZN6AnimalD1Ev&gt;</span><br><span class="line">  <span class="number">401165</span>:    nopw   <span class="variable">%cs</span>:<span class="number">0x0</span>(<span class="variable">%rax</span>,<span class="variable">%rax</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="number">40116</span>f:    nop</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sheep deleting destructor. The D0 part of the mangled name for deleting</span></span><br><span class="line"><span class="comment">// destructors, as opposed to D1 for the regular destructor, is mandated by</span></span><br><span class="line"><span class="comment">// the ABI name mangling rules.</span></span><br><span class="line"><span class="number">00000000004011</span>c0 &lt;_ZN5SheepD0Ev&gt;:</span><br><span class="line">  <span class="number">4011</span>c0:    push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="comment">// Call Sheep::~Sheep</span></span><br><span class="line">  <span class="number">4011</span>c1:    mov    <span class="variable">%rdi</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">4011</span>c4:    callq  <span class="number">401140</span> &lt;_ZN5SheepD1Ev&gt;</span><br><span class="line">  <span class="number">4011</span>c9:    mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">4011</span>cc:    pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="comment">// Call Sheep::operator delete</span></span><br><span class="line">  <span class="number">4011</span>cd:    jmpq   <span class="number">401190</span> &lt;_ZN5SheepdlEPv&gt;</span><br><span class="line">  <span class="number">4011</span>d2:    nopw   <span class="variable">%cs</span>:<span class="number">0x0</span>(<span class="variable">%rax</span>,<span class="variable">%rax</span>,<span class="number">1</span>)</span><br><span class="line">  <span class="number">4011</span>dc:    nopl   <span class="number">0x0</span>(<span class="variable">%rax</span>)</span><br></pre></td></tr></table></figure></p>
<p>Now, going back to the amended code sample, let’s see what code is generated for foo:</p>
<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">00000000004010d0 &lt;_Z3foov&gt;:</span><br><span class="line">  4010d0:    <span class="keyword">sub</span>    <span class="number">$0</span>x18,%<span class="literal">rsp</span></span><br><span class="line">  4010d4:    <span class="keyword">mov</span>    %<span class="literal">rsp</span>,%<span class="literal">rdi</span></span><br><span class="line">  4010d7:    <span class="keyword">movq</span>   <span class="number">$0</span>x49dd30,(%<span class="literal">rsp</span>)</span><br><span class="line">  4010df:    callq  <span class="number">401140</span> &lt;_ZN5SheepD1Ev&gt;</span><br><span class="line">  4010e4:    <span class="keyword">add</span>    <span class="number">$0</span>x18,%<span class="literal">rsp</span></span><br><span class="line">  4010e8:    retq</span><br><span class="line">  4010e9:    nopl   <span class="number">0x0</span>(%<span class="literal">rax</span>)</span><br></pre></td></tr></table></figure>
<p><code>foo</code> just calls <code>Sheep::~Sheep</code>. It shouldn’t call the deleting destructor, because it does not actually delete an object from the heap.</p>
<p>It is also interesting to examine how the destructor(s) of <code>Animal</code> look, since unlike <code>Sheep</code>, <code>Animal</code> does not define a custom operator delete:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// <span class="keyword">Animal</span>::~<span class="keyword">Animal</span></span><br><span class="line">00000000004010f0 &lt;_ZN6AnimalD1Ev&gt;:</span><br><span class="line">  4010f0:    movq   $0x49dcf0,(%rdi)</span><br><span class="line">  4010f7:    retq</span><br><span class="line">  4010f8:    nopl   0x0(%rax,%rax,1)</span><br><span class="line"></span><br><span class="line">// <span class="keyword">Animal</span> deleting destructor</span><br><span class="line">0000000000401100 &lt;_ZN6AnimalD0Ev&gt;:</span><br><span class="line">  401100:    push   %rbx</span><br><span class="line">  // Call <span class="keyword">Animal</span>::~<span class="keyword">Animal</span></span><br><span class="line">  401101:    mov    %rdi,%rbx</span><br><span class="line">  401104:    callq  4010f0 &lt;_ZN6AnimalD1Ev&gt;</span><br><span class="line">  401109:    mov    %rbx,%rdi</span><br><span class="line">  40110c:    pop    %rbx</span><br><span class="line">  // Call global ::operator::delete</span><br><span class="line">  40110d:    jmpq   4011f0 &lt;_ZdlPv&gt;</span><br><span class="line">  401112:    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class="line">  40111c:    nopl   0x0(%rax)</span><br></pre></td></tr></table></figure>
<p>As expected, the destructor of Animal calls the global ::operator delete.</p>
<h3 id="Classes_with_virtual_destructors_vs-_regular_destructors">Classes with virtual destructors vs. regular destructors</h3><p>I want to emphasize that this special treatment - generation of a deleting destructor, is done not for classes that have a custom operator delete, but for all classes with virtual destructors. This is because when we delete an object through a pointer to the base class, the compiler has no way of knowing what operator delete to invoke, so this has to be done for every class where the destructor is virtual [2]. Here’s a clarifying example:</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> &lt;cstdio&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Regular &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  ~Regular() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Regular dtor\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Virtual &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">virtual</span> ~Virtual() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Virtual dtor\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span> </span>&#123;</span><br><span class="line">  Regular* hr = <span class="keyword">new</span> Regular;</span><br><span class="line">  <span class="keyword">delete</span> hr;</span><br><span class="line"></span><br><span class="line">  Virtual* hv = <span class="keyword">new</span> Virtual;</span><br><span class="line">  <span class="keyword">delete</span> hv;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The only difference between Regular and Virtual here is the destructor being virtual in the latter. Let’s examine the machine code for main to see how the two delete statements are lowered:</p>
<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000000000400</span>cf0 &lt;main&gt;:</span><br><span class="line">  <span class="number">400</span>cf0:       push   <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>cf1:       mov    <span class="variable">$0</span>x1,<span class="variable">%edi</span></span><br><span class="line">  <span class="comment">// Allocate a new Regular object with the global ::operator new</span></span><br><span class="line">  <span class="number">400</span>cf6:       callq  <span class="number">4016</span>a0 &lt;_Znwm&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If hr != nullptr, call Regular::~Regular, and then call the global</span></span><br><span class="line">  <span class="comment">// ::operator delete on hr.</span></span><br><span class="line">  <span class="number">400</span>cfb:       test   <span class="variable">%rax</span>,<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>cfe:       mov    <span class="variable">%rax</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d01:       je     <span class="number">400</span>d13 &lt;main+<span class="number">0x23</span>&gt;</span><br><span class="line">  <span class="number">400</span>d03:       mov    <span class="variable">%rax</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d06:       callq  <span class="number">401130</span> &lt;_ZN7RegularD1Ev&gt;</span><br><span class="line">  <span class="number">400</span>d0b:       mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d0e:       callq  <span class="number">401160</span> &lt;_ZdlPv&gt;</span><br><span class="line">  <span class="number">400</span>d13:       mov    <span class="variable">$0</span>x8,<span class="variable">%edi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate a new Virtual object with the global ::operator new</span></span><br><span class="line">  <span class="number">400</span>d18:       callq  <span class="number">4016</span>a0 &lt;_Znwm&gt;</span><br><span class="line">  <span class="number">400</span>d1d:       mov    <span class="variable">%rax</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d20:       mov    <span class="variable">%rax</span>,<span class="variable">%rdi</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Call the constructor for Virtual. We didn't define a default</span></span><br><span class="line">  <span class="comment">// constructor, but the compiler did - to populate the vtable pointer</span></span><br><span class="line">  <span class="comment">// properly.</span></span><br><span class="line">  <span class="number">400</span>d23:       callq  <span class="number">401150</span> &lt;_ZN7VirtualC1Ev&gt;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// If hv != nullptr, call the deleting destructor of Virtual through the</span></span><br><span class="line">  <span class="comment">// virtual table. Do not call operator delete for vr; this will be done by</span></span><br><span class="line">  <span class="comment">// the deleting destructor.</span></span><br><span class="line">  <span class="number">400</span>d28:       test   <span class="variable">%rbx</span>,<span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d2b:       je     <span class="number">400</span>d36 &lt;main+<span class="number">0x46</span>&gt;</span><br><span class="line">  <span class="number">400</span>d2d:       mov    (<span class="variable">%rbx</span>),<span class="variable">%rax</span></span><br><span class="line">  <span class="number">400</span>d30:       mov    <span class="variable">%rbx</span>,<span class="variable">%rdi</span></span><br><span class="line">  <span class="number">400</span>d33:       callq  <span class="variable">*0x8</span>(<span class="variable">%rax</span>)</span><br><span class="line">  <span class="number">400</span>d36:       xor    <span class="variable">%eax</span>,<span class="variable">%eax</span></span><br><span class="line">  <span class="number">400</span>d38:       pop    <span class="variable">%rbx</span></span><br><span class="line">  <span class="number">400</span>d39:       retq</span><br><span class="line">  <span class="number">400</span>d3a:       nopw   <span class="number">0x0</span>(<span class="variable">%rax</span>,<span class="variable">%rax</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>The key difference here is that for deleting Regular, the compiler inserts a call to the (global) operator delete after the destructor. However, for Virtual it can’t do that so it just calls the deleting destructor, which will take care of the deletion as we’ve seen earlier.</p>
<hr>
<p>[1] Why this set of options? Without -O2, the code produced by the compiler is overly verbose. With -O2 it’s much better but most function calls are inlined, making the special calls generated for the deleting destructor hard to follow; hence -fno-inline. I’m also disabling exceptions because these complicate the code around destructors without being relevant to the main goal of the article.<br>[2]<br>One of the derived classes may declare its own operator delete, and the compiler doesn’t know that. In fact, a pointer to a derived class can come from a shared library that was built completely separately from the main program (as this sample demonstrates ).</p>
<p>But even if none of the derived classes defines a custom operator delete, it’s important to know the dynamic type of the deleted object when the destructor is called to pass the correct address to the global operator delete. An interesting discussion of this issue can be found in this Reddit comment thread.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://eli.thegreenplace.net/2015/c-deleting-destructors-and-virtual-operator-delete/">reference</a></p>
<h2 id="C++:_Deleting_destructors_and_virtual_operator_delete">C++: Deleting destructors and virtual operator delete</h2><p>This post starts with a fairly obscure topic - how an overloaded operator delete behaves in light of polymorphism; amazingly, it then gets even more obscure - shedding light on the trickery the compiler employs to make this work, by generating more than one destructor for certain classes. If you’re into such things, read on. If not, sorry about that; I heard that three new Javascript libraries were released this week for MVC JSON-based dynamic CSS layout. Everyone’s switching! Hurry up to keep up with the cool guys and leave this grumpy compiler engineer to mumble to himself.</p>
<h3 id="Virtual_operator_delete?">Virtual operator delete?</h3><p>Consider this code sample:</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line"></span><br><span class="line">class <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() = 0;</span><br><span class="line">  virtual ~<span class="keyword">Animal</span>() &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Sheep : public <span class="keyword">Animal</span> &#123;</span><br><span class="line">public:</span><br><span class="line">  virtual void <span class="keyword">say</span>() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep says baaaaa\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  virtual ~Sheep() &#123;</span><br><span class="line">    printf(<span class="string">"Sheep is dead\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  void operator delete(void* p) &#123;</span><br><span class="line">    printf(<span class="string">"Reclaiming Sheep storage from %p\n"</span>, p);</span><br><span class="line">    ::operator delete(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">  <span class="keyword">Animal</span>* ap = new Sheep;</span><br><span class="line">  ap-&gt;<span class="keyword">say</span>();</span><br><span class="line">  delete ap;</span><br><span class="line">  return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]>
    
    </summary>
    
      <category term="Cxx" scheme="http://ytlvy.com/tags/Cxx/"/>
    
      <category term="IOS" scheme="http://ytlvy.com/categories/IOS/"/>
    
  </entry>
  
</feed>